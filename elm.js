(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS
//
// For some reason, tabs can appear in href protocols and it still works.
// So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
// in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
// so freaky.
//
// Pulling the regular expressions out to the top level gives a slight speed
// boost in small benchmarks (4-10%) but hoisting values to reduce allocation
// can be unpredictable in large programs where JIT may have a harder time with
// functions are not fully self-contained. The benefit is more that the js and
// js_html ones are so weird that I prefer to see them near each other.


var _VirtualDom_RE_script = /^script$/i;
var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;


function _VirtualDom_noScript(tag)
{
	return _VirtualDom_RE_script.test(tag) ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return _VirtualDom_RE_on_formAction.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return _VirtualDom_RE_js.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return _VirtualDom_RE_js_html.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlJson(value)
{
	return (typeof _Json_unwrap(value) === 'string' && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
		? _Json_wrap(
			/**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		) : value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// HELPERS


function _Debugger_unsafeCoerce(value)
{
	return value;
}



// PROGRAMS


var _Debugger_element = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			var currNode = _VirtualDom_virtualize(domNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			var cornerNode = _VirtualDom_doc.createElement('div');
			domNode.parentNode.insertBefore(cornerNode, domNode.nextSibling);
			var cornerCurr = _VirtualDom_virtualize(cornerNode);

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = A2(_VirtualDom_map, $elm$browser$Debugger$Main$UserMsg, view($elm$browser$Debugger$Main$getUserModel(model)));
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view corner

				var cornerNext = $elm$browser$Debugger$Main$cornerView(model);
				var cornerPatches = _VirtualDom_diff(cornerCurr, cornerNext);
				cornerNode = _VirtualDom_applyPatches(cornerNode, cornerCurr, cornerPatches, sendToApp);
				cornerCurr = cornerNext;

				if (!model.popout.b)
				{
					currPopout = undefined;
					return;
				}

				// view popout

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


var _Debugger_document = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var divertHrefToApp = impl.setup && impl.setup(function(x) { return sendToApp($elm$browser$Debugger$Main$UserMsg(x)); });
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view($elm$browser$Debugger$Main$getUserModel(model));
				var nextNode = _VirtualDom_node('body')(_List_Nil)(
					_Utils_ap(
						A2($elm$core$List$map, _VirtualDom_map($elm$browser$Debugger$Main$UserMsg), doc.body),
						_List_Cons($elm$browser$Debugger$Main$cornerView(model), _List_Nil)
					)
				);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view popout

				if (!model.popout.b) { currPopout = undefined; return; }

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


function _Debugger_popout()
{
	return {
		b: undefined,
		a: undefined
	};
}

function _Debugger_isOpen(popout)
{
	return !!popout.b;
}

function _Debugger_open(popout)
{
	return _Scheduler_binding(function(callback)
	{
		_Debugger_openWindow(popout);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}

function _Debugger_openWindow(popout)
{
	var w = $elm$browser$Debugger$Main$initialWindowWidth,
		h = $elm$browser$Debugger$Main$initialWindowHeight,
	 	x = screen.width - w,
		y = screen.height - h;

	var debuggerWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);
	var doc = debuggerWindow.document;
	doc.title = 'Elm Debugger';

	// handle arrow keys
	doc.addEventListener('keydown', function(event) {
		event.metaKey && event.which === 82 && window.location.reload();
		event.key === 'ArrowUp'   && (popout.a($elm$browser$Debugger$Main$Up  ), event.preventDefault());
		event.key === 'ArrowDown' && (popout.a($elm$browser$Debugger$Main$Down), event.preventDefault());
	});

	// handle window close
	window.addEventListener('unload', close);
	debuggerWindow.addEventListener('unload', function() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		window.removeEventListener('unload', close);
	});

	function close() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		debuggerWindow.close();
	}

	// register new window
	popout.b = doc;
}



// SCROLL


function _Debugger_scroll(popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msgs = popout.b.getElementById('elm-debugger-sidebar');
			if (msgs && msgs.scrollTop !== 0)
			{
				msgs.scrollTop = 0;
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


var _Debugger_scrollTo = F2(function(id, popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msg = popout.b.getElementById(id);
			if (msg)
			{
				msg.scrollIntoView(false);
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});



// UPLOAD


function _Debugger_upload(popout)
{
	return _Scheduler_binding(function(callback)
	{
		var doc = popout.b || document;
		var element = doc.createElement('input');
		element.setAttribute('type', 'file');
		element.setAttribute('accept', 'text/json');
		element.style.display = 'none';
		element.addEventListener('change', function(event)
		{
			var fileReader = new FileReader();
			fileReader.onload = function(e)
			{
				callback(_Scheduler_succeed(e.target.result));
			};
			fileReader.readAsText(event.target.files[0]);
			doc.body.removeChild(element);
		});
		doc.body.appendChild(element);
		element.click();
	});
}



// DOWNLOAD


var _Debugger_download = F2(function(historyLength, json)
{
	return _Scheduler_binding(function(callback)
	{
		var fileName = 'history-' + historyLength + '.txt';
		var jsonString = JSON.stringify(json);
		var mime = 'text/plain;charset=utf-8';
		var done = _Scheduler_succeed(_Utils_Tuple0);

		// for IE10+
		if (navigator.msSaveBlob)
		{
			navigator.msSaveBlob(new Blob([jsonString], {type: mime}), fileName);
			return callback(done);
		}

		// for HTML5
		var element = document.createElement('a');
		element.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));
		element.setAttribute('download', fileName);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		callback(done);
	});
});



// POPOUT CONTENT


function _Debugger_messageToString(value)
{
	if (typeof value === 'boolean')
	{
		return value ? 'True' : 'False';
	}

	if (typeof value === 'number')
	{
		return value + '';
	}

	if (typeof value === 'string')
	{
		return '"' + _Debugger_addSlashes(value, false) + '"';
	}

	if (value instanceof String)
	{
		return "'" + _Debugger_addSlashes(value, true) + "'";
	}

	if (typeof value !== 'object' || value === null || !('$' in value))
	{
		return '…';
	}

	if (typeof value.$ === 'number')
	{
		return '…';
	}

	var code = value.$.charCodeAt(0);
	if (code === 0x23 /* # */ || /* a */ 0x61 <= code && code <= 0x7A /* z */)
	{
		return '…';
	}

	if (['Array_elm_builtin', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.$) >= 0)
	{
		return '…';
	}

	var keys = Object.keys(value);
	switch (keys.length)
	{
		case 1:
			return value.$;
		case 2:
			return value.$ + ' ' + _Debugger_messageToString(value.a);
		default:
			return value.$ + ' … ' + _Debugger_messageToString(value[keys[keys.length - 1]]);
	}
}


function _Debugger_init(value)
{
	if (typeof value === 'boolean')
	{
		return A3($elm$browser$Debugger$Expando$Constructor, $elm$core$Maybe$Just(value ? 'True' : 'False'), true, _List_Nil);
	}

	if (typeof value === 'number')
	{
		return $elm$browser$Debugger$Expando$Primitive(value + '');
	}

	if (typeof value === 'string')
	{
		return $elm$browser$Debugger$Expando$S('"' + _Debugger_addSlashes(value, false) + '"');
	}

	if (value instanceof String)
	{
		return $elm$browser$Debugger$Expando$S("'" + _Debugger_addSlashes(value, true) + "'");
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (tag === '::' || tag === '[]')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ListSeq, true,
				A2($elm$core$List$map, _Debugger_init, value)
			);
		}

		if (tag === 'Set_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$SetSeq, true,
				A3($elm$core$Set$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (tag === 'RBNode_elm_builtin' || tag == 'RBEmpty_elm_builtin')
		{
			return A2($elm$browser$Debugger$Expando$Dictionary, true,
				A3($elm$core$Dict$foldr, _Debugger_initKeyValueCons, _List_Nil, value)
			);
		}

		if (tag === 'Array_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ArraySeq, true,
				A3($elm$core$Array$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (typeof tag === 'number')
		{
			return $elm$browser$Debugger$Expando$Primitive('<internals>');
		}

		var char = tag.charCodeAt(0);
		if (char === 35 || 65 <= char && char <= 90)
		{
			var list = _List_Nil;
			for (var i in value)
			{
				if (i === '$') continue;
				list = _List_Cons(_Debugger_init(value[i]), list);
			}
			return A3($elm$browser$Debugger$Expando$Constructor, char === 35 ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(tag), true, $elm$core$List$reverse(list));
		}

		return $elm$browser$Debugger$Expando$Primitive('<internals>');
	}

	if (typeof value === 'object')
	{
		var dict = $elm$core$Dict$empty;
		for (var i in value)
		{
			dict = A3($elm$core$Dict$insert, i, _Debugger_init(value[i]), dict);
		}
		return A2($elm$browser$Debugger$Expando$Record, true, dict);
	}

	return $elm$browser$Debugger$Expando$Primitive('<internals>');
}

var _Debugger_initCons = F2(function initConsHelp(value, list)
{
	return _List_Cons(_Debugger_init(value), list);
});

var _Debugger_initKeyValueCons = F3(function(key, value, list)
{
	return _List_Cons(
		_Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)),
		list
	);
});

function _Debugger_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}



// BLOCK EVENTS


function _Debugger_updateBlocker(oldBlocker, newBlocker)
{
	if (oldBlocker === newBlocker) return;

	var oldEvents = _Debugger_blockerToEvents(oldBlocker);
	var newEvents = _Debugger_blockerToEvents(newBlocker);

	// remove old blockers
	for (var i = 0; i < oldEvents.length; i++)
	{
		document.removeEventListener(oldEvents[i], _Debugger_blocker, true);
	}

	// add new blockers
	for (var i = 0; i < newEvents.length; i++)
	{
		document.addEventListener(newEvents[i], _Debugger_blocker, true);
	}
}


function _Debugger_blocker(event)
{
	if (event.type === 'keydown' && event.metaKey && event.which === 82)
	{
		return;
	}

	var isScroll = event.type === 'scroll' || event.type === 'wheel';
	for (var node = event.target; node; node = node.parentNode)
	{
		if (isScroll ? node.id === 'elm-debugger-details' : node.id === 'elm-debugger-overlay')
		{
			return;
		}
	}

	event.stopPropagation();
	event.preventDefault();
}

function _Debugger_blockerToEvents(blocker)
{
	return blocker === $elm$browser$Debugger$Overlay$BlockNone
		? []
		: blocker === $elm$browser$Debugger$Overlay$BlockMost
			? _Debugger_mostEvents
			: _Debugger_allEvents;
}

var _Debugger_mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var _Debugger_allEvents = _Debugger_mostEvents.concat('wheel', 'scroll');




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		$elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}

// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}

// BYTES

function _Bytes_width(bytes)
{
	return bytes.byteLength;
}

var _Bytes_getHostEndianness = F2(function(le, be)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
	});
});


// ENCODERS

function _Bytes_encode(encoder)
{
	var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
	$elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
	return mutableBytes;
}


// SIGNED INTEGERS

var _Bytes_write_i8  = F3(function(mb, i, n) { mb.setInt8(i, n); return i + 1; });
var _Bytes_write_i16 = F4(function(mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; });
var _Bytes_write_i32 = F4(function(mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; });


// UNSIGNED INTEGERS

var _Bytes_write_u8  = F3(function(mb, i, n) { mb.setUint8(i, n); return i + 1 ;});
var _Bytes_write_u16 = F4(function(mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; });
var _Bytes_write_u32 = F4(function(mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; });


// FLOATS

var _Bytes_write_f32 = F4(function(mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; });
var _Bytes_write_f64 = F4(function(mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; });


// BYTES

var _Bytes_write_bytes = F3(function(mb, offset, bytes)
{
	for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4)
	{
		mb.setUint32(offset + i, bytes.getUint32(i));
	}
	for (; i < len; i++)
	{
		mb.setUint8(offset + i, bytes.getUint8(i));
	}
	return offset + len;
});


// STRINGS

function _Bytes_getStringWidth(string)
{
	for (var width = 0, i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		width +=
			(code < 0x80) ? 1 :
			(code < 0x800) ? 2 :
			(code < 0xD800 || 0xDBFF < code) ? 3 : (i++, 4);
	}
	return width;
}

var _Bytes_write_string = F3(function(mb, offset, string)
{
	for (var i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		offset +=
			(code < 0x80)
				? (mb.setUint8(offset, code)
				, 1
				)
				:
			(code < 0x800)
				? (mb.setUint16(offset, 0xC080 /* 0b1100000010000000 */
					| (code >>> 6 & 0x1F /* 0b00011111 */) << 8
					| code & 0x3F /* 0b00111111 */)
				, 2
				)
				:
			(code < 0xD800 || 0xDBFF < code)
				? (mb.setUint16(offset, 0xE080 /* 0b1110000010000000 */
					| (code >>> 12 & 0xF /* 0b00001111 */) << 8
					| code >>> 6 & 0x3F /* 0b00111111 */)
				, mb.setUint8(offset + 2, 0x80 /* 0b10000000 */
					| code & 0x3F /* 0b00111111 */)
				, 3
				)
				:
			(code = (code - 0xD800) * 0x400 + string.charCodeAt(++i) - 0xDC00 + 0x10000
			, mb.setUint32(offset, 0xF0808080 /* 0b11110000100000001000000010000000 */
				| (code >>> 18 & 0x7 /* 0b00000111 */) << 24
				| (code >>> 12 & 0x3F /* 0b00111111 */) << 16
				| (code >>> 6 & 0x3F /* 0b00111111 */) << 8
				| code & 0x3F /* 0b00111111 */)
			, 4
			);
	}
	return offset;
});


// DECODER

var _Bytes_decode = F2(function(decoder, bytes)
{
	try {
		return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
	} catch(e) {
		return $elm$core$Maybe$Nothing;
	}
});

var _Bytes_read_i8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); });
var _Bytes_read_i16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); });
var _Bytes_read_i32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); });
var _Bytes_read_u8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); });
var _Bytes_read_u16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); });
var _Bytes_read_u32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); });
var _Bytes_read_f32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); });
var _Bytes_read_f64 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); });

var _Bytes_read_bytes = F3(function(len, bytes, offset)
{
	return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
});

var _Bytes_read_string = F3(function(len, bytes, offset)
{
	var string = '';
	var end = offset + len;
	for (; offset < end;)
	{
		var byte = bytes.getUint8(offset++);
		string +=
			(byte < 128)
				? String.fromCharCode(byte)
				:
			((byte & 0xE0 /* 0b11100000 */) === 0xC0 /* 0b11000000 */)
				? String.fromCharCode((byte & 0x1F /* 0b00011111 */) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */)
				:
			((byte & 0xF0 /* 0b11110000 */) === 0xE0 /* 0b11100000 */)
				? String.fromCharCode(
					(byte & 0xF /* 0b00001111 */) << 12
					| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
					| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
				)
				:
				(byte =
					((byte & 0x7 /* 0b00000111 */) << 18
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 12
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
						| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
					) - 0x10000
				, String.fromCharCode(Math.floor(byte / 0x400) + 0xD800, byte % 0x400 + 0xDC00)
				);
	}
	return _Utils_Tuple2(offset, string);
});

var _Bytes_decodeFailure = F2(function() { throw 0; });
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $author$project$TemplateModulesBeta$MsgGlobal = function (a) {
	return {$: 'MsgGlobal', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $author$project$TemplateModulesBeta$OnPageChange = function (a) {
	return {$: 'OnPageChange', a: a};
};
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$HotReloadComplete = function (a) {
	return {$: 'HotReloadComplete', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$LinkClicked = function (a) {
	return {$: 'LinkClicked', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$NoOp = {$: 'NoOp'};
var $dillonkearns$elm_pages$Pages$Internal$Platform$UrlChanged = function (a) {
	return {$: 'UrlChanged', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg = function (a) {
	return {$: 'UserMsg', a: a};
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Debugger$Expando$ArraySeq = {$: 'ArraySeq'};
var $elm$browser$Debugger$Overlay$BlockMost = {$: 'BlockMost'};
var $elm$browser$Debugger$Overlay$BlockNone = {$: 'BlockNone'};
var $elm$browser$Debugger$Expando$Constructor = F3(
	function (a, b, c) {
		return {$: 'Constructor', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Dictionary = F2(
	function (a, b) {
		return {$: 'Dictionary', a: a, b: b};
	});
var $elm$browser$Debugger$Main$Down = {$: 'Down'};
var $elm$browser$Debugger$Expando$ListSeq = {$: 'ListSeq'};
var $elm$browser$Debugger$Main$NoOp = {$: 'NoOp'};
var $elm$browser$Debugger$Expando$Primitive = function (a) {
	return {$: 'Primitive', a: a};
};
var $elm$browser$Debugger$Expando$Record = F2(
	function (a, b) {
		return {$: 'Record', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$S = function (a) {
	return {$: 'S', a: a};
};
var $elm$browser$Debugger$Expando$Sequence = F3(
	function (a, b, c) {
		return {$: 'Sequence', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$SetSeq = {$: 'SetSeq'};
var $elm$browser$Debugger$Main$Up = {$: 'Up'};
var $elm$browser$Debugger$Main$UserMsg = function (a) {
	return {$: 'UserMsg', a: a};
};
var $elm$browser$Debugger$Main$Export = {$: 'Export'};
var $elm$browser$Debugger$Main$Import = {$: 'Import'};
var $elm$browser$Debugger$Main$Open = {$: 'Open'};
var $elm$browser$Debugger$Main$OverlayMsg = function (a) {
	return {$: 'OverlayMsg', a: a};
};
var $elm$browser$Debugger$Main$Resume = {$: 'Resume'};
var $elm$browser$Debugger$Main$isPaused = function (state) {
	if (state.$ === 'Running') {
		return false;
	} else {
		return true;
	}
};
var $elm$browser$Debugger$History$size = function (history) {
	return history.numMessages;
};
var $elm$browser$Debugger$Overlay$Accept = function (a) {
	return {$: 'Accept', a: a};
};
var $elm$browser$Debugger$Overlay$Choose = F2(
	function (a, b) {
		return {$: 'Choose', a: a, b: b};
	});
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$json$Json$Encode$string = _Json_wrap;
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$browser$Debugger$Overlay$goodNews1 = '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n';
var $elm$browser$Debugger$Overlay$goodNews2 = '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n';
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $elm$html$Html$code = _VirtualDom_node('code');
var $elm$browser$Debugger$Overlay$viewCode = function (name) {
	return A2(
		$elm$html$Html$code,
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(name)
			]));
};
var $elm$browser$Debugger$Overlay$addCommas = function (items) {
	if (!items.b) {
		return '';
	} else {
		if (!items.b.b) {
			var item = items.a;
			return item;
		} else {
			if (!items.b.b.b) {
				var item1 = items.a;
				var _v1 = items.b;
				var item2 = _v1.a;
				return item1 + (' and ' + item2);
			} else {
				var lastItem = items.a;
				var otherItems = items.b;
				return A2(
					$elm$core$String$join,
					', ',
					_Utils_ap(
						otherItems,
						_List_fromArray(
							[' and ' + lastItem])));
			}
		}
	}
};
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$browser$Debugger$Overlay$problemToString = function (problem) {
	switch (problem.$) {
		case 'Function':
			return 'functions';
		case 'Decoder':
			return 'JSON decoders';
		case 'Task':
			return 'tasks';
		case 'Process':
			return 'processes';
		case 'Socket':
			return 'web sockets';
		case 'Request':
			return 'HTTP requests';
		case 'Program':
			return 'programs';
		default:
			return 'virtual DOM values';
	}
};
var $elm$browser$Debugger$Overlay$viewProblemType = function (_v0) {
	var name = _v0.name;
	var problems = _v0.problems;
	return A2(
		$elm$html$Html$li,
		_List_Nil,
		_List_fromArray(
			[
				$elm$browser$Debugger$Overlay$viewCode(name),
				$elm$html$Html$text(
				' can contain ' + ($elm$browser$Debugger$Overlay$addCommas(
					A2($elm$core$List$map, $elm$browser$Debugger$Overlay$problemToString, problems)) + '.'))
			]));
};
var $elm$browser$Debugger$Overlay$viewBadMetadata = function (_v0) {
	var message = _v0.message;
	var problems = _v0.problems;
	return _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('The '),
					$elm$browser$Debugger$Overlay$viewCode(message),
					$elm$html$Html$text(' type of your program cannot be reliably serialized for history files.')
				])),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:')
				])),
			A2(
			$elm$html$Html$ul,
			_List_Nil,
			A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewProblemType, problems)),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews1),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('https://guide.elm-lang.org/types/custom_types.html')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('custom types')
						])),
					$elm$html$Html$text(', in your messages. From there, your '),
					$elm$browser$Debugger$Overlay$viewCode('update'),
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews2)
				]))
		]);
};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$browser$Debugger$Overlay$Cancel = {$: 'Cancel'};
var $elm$browser$Debugger$Overlay$Proceed = {$: 'Proceed'};
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$browser$Debugger$Overlay$viewButtons = function (buttons) {
	var btn = F2(
		function (msg, string) {
			return A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-right', '20px'),
						$elm$html$Html$Events$onClick(msg)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(string)
					]));
		});
	var buttonNodes = function () {
		if (buttons.$ === 'Accept') {
			var proceed = buttons.a;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		} else {
			var cancel = buttons.a;
			var proceed = buttons.b;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Cancel, cancel),
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		}
	}();
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'height', '60px'),
				A2($elm$html$Html$Attributes$style, 'line-height', '60px'),
				A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		buttonNodes);
};
var $elm$browser$Debugger$Overlay$viewMessage = F4(
	function (config, title, details, buttons) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-overlay'),
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100vw'),
					A2($elm$html$Html$Attributes$style, 'height', '100vh'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
					A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
							A2($elm$html$Html$Attributes$style, 'width', '600px'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '36px'),
									A2($elm$html$Html$Attributes$style, 'height', '80px'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)'),
									A2($elm$html$Html$Attributes$style, 'padding-left', '22px'),
									A2($elm$html$Html$Attributes$style, 'vertical-align', 'middle'),
									A2($elm$html$Html$Attributes$style, 'line-height', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(title)
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id('elm-debugger-details'),
									A2($elm$html$Html$Attributes$style, 'padding', ' 8px 20px'),
									A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
									A2($elm$html$Html$Attributes$style, 'max-height', 'calc(100vh - 156px)'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)')
								]),
							details),
							A2(
							$elm$html$Html$map,
							config.wrap,
							$elm$browser$Debugger$Overlay$viewButtons(buttons))
						]))
				]));
	});
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$virtual_dom$VirtualDom$nodeNS = F2(
	function (namespace, tag) {
		return A2(
			_VirtualDom_nodeNS,
			namespace,
			_VirtualDom_noScript(tag));
	});
var $elm$core$String$fromFloat = _String_fromNumber;
var $elm$browser$Debugger$Overlay$viewShape = F4(
	function (x, y, angle, coordinates) {
		return A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'polygon',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'points', coordinates),
					A2(
					$elm$virtual_dom$VirtualDom$attribute,
					'transform',
					'translate(' + ($elm$core$String$fromFloat(x) + (' ' + ($elm$core$String$fromFloat(y) + (') rotate(' + ($elm$core$String$fromFloat(-angle) + ')'))))))
				]),
			_List_Nil);
	});
var $elm$browser$Debugger$Overlay$elmLogo = A4(
	$elm$virtual_dom$VirtualDom$nodeNS,
	'http://www.w3.org/2000/svg',
	'svg',
	_List_fromArray(
		[
			A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '-300 -300 600 600'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'width', '24px'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'height', '24px')
		]),
	_List_fromArray(
		[
			A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'g',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'transform', 'scale(1 -1)')
				]),
			_List_fromArray(
				[
					A4($elm$browser$Debugger$Overlay$viewShape, 0, -210, 0, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, -210, 0, 90, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, 207, 207, 45, '-198,-66 0,132 198,-66'),
					A4($elm$browser$Debugger$Overlay$viewShape, 150, 0, 0, '-130,0 0,-130 130,0 0,130'),
					A4($elm$browser$Debugger$Overlay$viewShape, -89, 239, 0, '-191,61 69,61 191,-61 -69,-61'),
					A4($elm$browser$Debugger$Overlay$viewShape, 0, 106, 180, '-130,-44 0,86  130,-44'),
					A4($elm$browser$Debugger$Overlay$viewShape, 256, -150, 270, '-130,-44 0,86  130,-44')
				]))
		]));
var $elm$core$String$length = _String_length;
var $elm$browser$Debugger$Overlay$viewMiniControls = F2(
	function (config, numMsgs) {
		var string = $elm$core$String$fromInt(numMsgs);
		var width = $elm$core$String$fromInt(
			2 + $elm$core$String$length(string));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'bottom', '2em'),
					A2($elm$html$Html$Attributes$style, 'right', '2em'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(42px + ' + (width + 'ch)')),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', '#1293D8'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(config.open)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Overlay$elmLogo,
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(1ch + 6px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '1ch')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(string)
						]))
				]));
	});
var $elm$browser$Debugger$Overlay$explanationBad = '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n';
var $elm$browser$Debugger$Overlay$explanationRisky = '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n';
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $elm$browser$Debugger$Overlay$viewMention = F2(
	function (tags, verbed) {
		var _v0 = A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Overlay$viewCode,
			$elm$core$List$reverse(tags));
		if (!_v0.b) {
			return $elm$html$Html$text('');
		} else {
			if (!_v0.b.b) {
				var tag = _v0.a;
				return A2(
					$elm$html$Html$li,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(verbed),
							tag,
							$elm$html$Html$text('.')
						]));
			} else {
				if (!_v0.b.b.b) {
					var tag2 = _v0.a;
					var _v1 = _v0.b;
					var tag1 = _v1.a;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(verbed),
								tag1,
								$elm$html$Html$text(' and '),
								tag2,
								$elm$html$Html$text('.')
							]));
				} else {
					var lastTag = _v0.a;
					var otherTags = _v0.b;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$text(verbed),
							_Utils_ap(
								A2(
									$elm$core$List$intersperse,
									$elm$html$Html$text(', '),
									$elm$core$List$reverse(otherTags)),
								_List_fromArray(
									[
										$elm$html$Html$text(', and '),
										lastTag,
										$elm$html$Html$text('.')
									]))));
				}
			}
		}
	});
var $elm$browser$Debugger$Overlay$viewChange = function (change) {
	return A2(
		$elm$html$Html$li,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'margin', '8px 0')
			]),
		function () {
			if (change.$ === 'AliasChange') {
				var name = change.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							]))
					]);
			} else {
				var name = change.a;
				var removed = change.b.removed;
				var changed = change.b.changed;
				var added = change.b.added;
				var argsMatch = change.b.argsMatch;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'disc'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '2em')
							]),
						_List_fromArray(
							[
								A2($elm$browser$Debugger$Overlay$viewMention, removed, 'Removed '),
								A2($elm$browser$Debugger$Overlay$viewMention, changed, 'Changed '),
								A2($elm$browser$Debugger$Overlay$viewMention, added, 'Added ')
							])),
						argsMatch ? $elm$html$Html$text('') : $elm$html$Html$text('This may be due to the fact that the type variable names changed.')
					]);
			}
		}());
};
var $elm$browser$Debugger$Overlay$viewReport = F2(
	function (isBad, report) {
		switch (report.$) {
			case 'CorruptHistory':
				return _List_fromArray(
					[
						$elm$html$Html$text('Looks like this history file is corrupt. I cannot understand it.')
					]);
			case 'VersionChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('This history was created with Elm ' + (old + (', but you are using Elm ' + (_new + ' right now.'))))
					]);
			case 'MessageChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('To import some other history, the overall message type must' + ' be the same. The old history has '),
						$elm$browser$Debugger$Overlay$viewCode(old),
						$elm$html$Html$text(' messages, but the new program works with '),
						$elm$browser$Debugger$Overlay$viewCode(_new),
						$elm$html$Html$text(' messages.')
					]);
			default:
				var changes = report.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								isBad ? $elm$browser$Debugger$Overlay$explanationBad : $elm$browser$Debugger$Overlay$explanationRisky)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'none'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '20px')
							]),
						A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewChange, changes))
					]);
		}
	});
var $elm$browser$Debugger$Overlay$view = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		switch (state.$) {
			case 'None':
				return isOpen ? $elm$html$Html$text('') : (isPaused ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id('elm-debugger-overlay'),
							A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
							A2($elm$html$Html$Attributes$style, 'top', '0'),
							A2($elm$html$Html$Attributes$style, 'left', '0'),
							A2($elm$html$Html$Attributes$style, 'width', '100vw'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
							A2($elm$html$Html$Attributes$style, 'display', 'flex'),
							A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
							A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'color', 'white'),
							A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
							A2($elm$html$Html$Attributes$style, 'z-index', '2147483646'),
							$elm$html$Html$Events$onClick(config.resume)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Click to Resume')
								])),
							A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs)
						])) : A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs));
			case 'BadMetadata':
				var badMetadata_ = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot use Import or Export',
					$elm$browser$Debugger$Overlay$viewBadMetadata(badMetadata_),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			case 'BadImport':
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot Import History',
					A2($elm$browser$Debugger$Overlay$viewReport, true, report),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			default:
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Warning',
					A2($elm$browser$Debugger$Overlay$viewReport, false, report),
					A2($elm$browser$Debugger$Overlay$Choose, 'Cancel', 'Import Anyway'));
		}
	});
var $elm$browser$Debugger$Main$cornerView = function (model) {
	return A5(
		$elm$browser$Debugger$Overlay$view,
		{exportHistory: $elm$browser$Debugger$Main$Export, importHistory: $elm$browser$Debugger$Main$Import, open: $elm$browser$Debugger$Main$Open, resume: $elm$browser$Debugger$Main$Resume, wrap: $elm$browser$Debugger$Main$OverlayMsg},
		$elm$browser$Debugger$Main$isPaused(model.state),
		_Debugger_isOpen(model.popout),
		$elm$browser$Debugger$History$size(model.history),
		model.overlay);
};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$foldr = F3(
	function (func, initialState, _v0) {
		var dict = _v0.a;
		return A3(
			$elm$core$Dict$foldr,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm$browser$Debugger$Main$getCurrentModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.b;
		return model;
	}
};
var $elm$browser$Debugger$Main$getUserModel = function (model) {
	return $elm$browser$Debugger$Main$getCurrentModel(model.state);
};
var $elm$browser$Debugger$Main$initialWindowHeight = 420;
var $elm$browser$Debugger$Main$initialWindowWidth = 900;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$browser$Debugger$Main$cachedHistory = function (model) {
	var _v0 = model.state;
	if (_v0.$ === 'Running') {
		return model.history;
	} else {
		var history = _v0.e;
		return history;
	}
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $elm$browser$Debugger$Main$DragEnd = {$: 'DragEnd'};
var $elm$browser$Debugger$Main$getDragStatus = function (layout) {
	if (layout.$ === 'Horizontal') {
		var status = layout.a;
		return status;
	} else {
		var status = layout.a;
		return status;
	}
};
var $elm$browser$Debugger$Main$Drag = function (a) {
	return {$: 'Drag', a: a};
};
var $elm$browser$Debugger$Main$DragInfo = F5(
	function (x, y, down, width, height) {
		return {down: down, height: height, width: width, x: x, y: y};
	});
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$browser$Debugger$Main$decodeDimension = function (field) {
	return A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'ownerDocument', 'defaultView', field]),
		$elm$json$Json$Decode$float);
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$browser$Debugger$Main$onMouseMove = A2(
	$elm$html$Html$Events$on,
	'mousemove',
	A2(
		$elm$json$Json$Decode$map,
		$elm$browser$Debugger$Main$Drag,
		A6(
			$elm$json$Json$Decode$map5,
			$elm$browser$Debugger$Main$DragInfo,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			A2(
				$elm$json$Json$Decode$field,
				'buttons',
				A2(
					$elm$json$Json$Decode$map,
					function (v) {
						return v === 1;
					},
					$elm$json$Json$Decode$int)),
			$elm$browser$Debugger$Main$decodeDimension('innerWidth'),
			$elm$browser$Debugger$Main$decodeDimension('innerHeight'))));
var $elm$html$Html$Events$onMouseUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toDragListeners = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				$elm$browser$Debugger$Main$onMouseMove,
				$elm$html$Html$Events$onMouseUp($elm$browser$Debugger$Main$DragEnd)
			]);
	}
};
var $elm$browser$Debugger$Main$toFlexDirection = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'row';
	} else {
		return 'column-reverse';
	}
};
var $elm$browser$Debugger$Main$DragStart = {$: 'DragStart'};
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toPercent = function (fraction) {
	return $elm$core$String$fromFloat(100 * fraction) + '%';
};
var $elm$browser$Debugger$Main$viewDragZone = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2(
					$elm$html$Html$Attributes$style,
					'left',
					$elm$browser$Debugger$Main$toPercent(x)),
					A2($elm$html$Html$Attributes$style, 'margin-left', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '10px'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'col-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	} else {
		var y = layout.c;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2(
					$elm$html$Html$Attributes$style,
					'top',
					$elm$browser$Debugger$Main$toPercent(y)),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'margin-top', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '10px'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'row-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	}
};
var $elm$browser$Debugger$Main$TweakExpandoModel = function (a) {
	return {$: 'TweakExpandoModel', a: a};
};
var $elm$browser$Debugger$Main$TweakExpandoMsg = function (a) {
	return {$: 'TweakExpandoMsg', a: a};
};
var $elm$browser$Debugger$Main$toExpandoPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(1 - x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(y));
	}
};
var $elm$browser$Debugger$Main$toMouseBlocker = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return 'auto';
	} else {
		return 'none';
	}
};
var $elm$browser$Debugger$Expando$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$Index = F3(
	function (a, b, c) {
		return {$: 'Index', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Key = {$: 'Key'};
var $elm$browser$Debugger$Expando$None = {$: 'None'};
var $elm$browser$Debugger$Expando$Toggle = {$: 'Toggle'};
var $elm$browser$Debugger$Expando$Value = {$: 'Value'};
var $elm$browser$Debugger$Expando$blue = A2($elm$html$Html$Attributes$style, 'color', 'rgb(28, 0, 207)');
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$browser$Debugger$Expando$leftPad = function (maybeKey) {
	if (maybeKey.$ === 'Nothing') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'padding-left', '4ch')
			]);
	}
};
var $elm$browser$Debugger$Expando$makeArrow = function (arrow) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'color', '#777'),
				A2($elm$html$Html$Attributes$style, 'padding-left', '2ch'),
				A2($elm$html$Html$Attributes$style, 'width', '2ch'),
				A2($elm$html$Html$Attributes$style, 'display', 'inline-block')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(arrow)
			]));
};
var $elm$browser$Debugger$Expando$purple = A2($elm$html$Html$Attributes$style, 'color', 'rgb(136, 19, 145)');
var $elm$browser$Debugger$Expando$lineStarter = F3(
	function (maybeKey, maybeIsClosed, description) {
		var arrow = function () {
			if (maybeIsClosed.$ === 'Nothing') {
				return $elm$browser$Debugger$Expando$makeArrow('');
			} else {
				if (maybeIsClosed.a) {
					return $elm$browser$Debugger$Expando$makeArrow('▸');
				} else {
					return $elm$browser$Debugger$Expando$makeArrow('▾');
				}
			}
		}();
		if (maybeKey.$ === 'Nothing') {
			return A2($elm$core$List$cons, arrow, description);
		} else {
			var key = maybeKey.a;
			return A2(
				$elm$core$List$cons,
				arrow,
				A2(
					$elm$core$List$cons,
					A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$purple]),
						_List_fromArray(
							[
								$elm$html$Html$text(key)
							])),
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(' = '),
						description)));
		}
	});
var $elm$browser$Debugger$Expando$red = A2($elm$html$Html$Attributes$style, 'color', 'rgb(196, 26, 22)');
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$browser$Debugger$Expando$seqTypeToString = F2(
	function (n, seqType) {
		switch (seqType.$) {
			case 'ListSeq':
				return 'List(' + ($elm$core$String$fromInt(n) + ')');
			case 'SetSeq':
				return 'Set(' + ($elm$core$String$fromInt(n) + ')');
			default:
				return 'Array(' + ($elm$core$String$fromInt(n) + ')');
		}
	});
var $elm$core$String$slice = _String_slice;
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $elm$browser$Debugger$Expando$elideMiddle = function (str) {
	return ($elm$core$String$length(str) <= 18) ? str : (A2($elm$core$String$left, 8, str) + ('...' + A2($elm$core$String$right, 8, str)));
};
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 1,
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					]));
		} else {
			var field = entries.a;
			var rest = entries.b;
			var nextLength = (length + $elm$core$String$length(field)) + 1;
			if (nextLength > 18) {
				return _Utils_Tuple2(
					length + 2,
					_List_fromArray(
						[
							$elm$html$Html$text('…}')
						]));
			} else {
				var _v1 = A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, nextLength, ',', rest);
				var finalLength = _v1.a;
				var otherHtmls = _v1.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							otherHtmls)));
			}
		}
	});
var $elm$browser$Debugger$Expando$viewTinyHelp = function (str) {
	return _Utils_Tuple2(
		$elm$core$String$length(str),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $elm$browser$Debugger$Expando$viewExtraTiny = function (value) {
	if (value.$ === 'Record') {
		var record = value.b;
		return A3(
			$elm$browser$Debugger$Expando$viewExtraTinyRecord,
			0,
			'{',
			$elm$core$Dict$keys(record));
	} else {
		return $elm$browser$Debugger$Expando$viewTiny(value);
	}
};
var $elm$browser$Debugger$Expando$viewTiny = function (value) {
	switch (value.$) {
		case 'S':
			var stringRep = value.a;
			var str = $elm$browser$Debugger$Expando$elideMiddle(stringRep);
			return _Utils_Tuple2(
				$elm$core$String$length(str),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$red]),
						_List_fromArray(
							[
								$elm$html$Html$text(str)
							]))
					]));
		case 'Primitive':
			var stringRep = value.a;
			return _Utils_Tuple2(
				$elm$core$String$length(stringRep),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$blue]),
						_List_fromArray(
							[
								$elm$html$Html$text(stringRep)
							]))
					]));
		case 'Sequence':
			var seqType = value.a;
			var valueList = value.c;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				A2(
					$elm$browser$Debugger$Expando$seqTypeToString,
					$elm$core$List$length(valueList),
					seqType));
		case 'Dictionary':
			var keyValuePairs = value.b;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				'Dict(' + ($elm$core$String$fromInt(
					$elm$core$List$length(keyValuePairs)) + ')'));
		case 'Record':
			var record = value.b;
			return $elm$browser$Debugger$Expando$viewTinyRecord(record);
		default:
			if (!value.c.b) {
				var maybeName = value.a;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					A2($elm$core$Maybe$withDefault, 'Unit', maybeName));
			} else {
				var maybeName = value.a;
				var valueList = value.c;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					function () {
						if (maybeName.$ === 'Nothing') {
							return 'Tuple(' + ($elm$core$String$fromInt(
								$elm$core$List$length(valueList)) + ')');
						} else {
							var name = maybeName.a;
							return name + ' …';
						}
					}());
			}
	}
};
var $elm$browser$Debugger$Expando$viewTinyRecord = function (record) {
	return $elm$core$Dict$isEmpty(record) ? _Utils_Tuple2(
		2,
		_List_fromArray(
			[
				$elm$html$Html$text('{}')
			])) : A3(
		$elm$browser$Debugger$Expando$viewTinyRecordHelp,
		0,
		'{ ',
		$elm$core$Dict$toList(record));
};
var $elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 2,
				_List_fromArray(
					[
						$elm$html$Html$text(' }')
					]));
		} else {
			var _v1 = entries.a;
			var field = _v1.a;
			var value = _v1.b;
			var rest = entries.b;
			var fieldLen = $elm$core$String$length(field);
			var _v2 = $elm$browser$Debugger$Expando$viewExtraTiny(value);
			var valueLen = _v2.a;
			var valueHtmls = _v2.b;
			var newLength = ((length + fieldLen) + valueLen) + 5;
			if (newLength > 60) {
				return _Utils_Tuple2(
					length + 4,
					_List_fromArray(
						[
							$elm$html$Html$text(', … }')
						]));
			} else {
				var _v3 = A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, newLength, ', ', rest);
				var finalLength = _v3.a;
				var otherHtmls = _v3.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							A2(
								$elm$core$List$cons,
								$elm$html$Html$text(' = '),
								A2(
									$elm$core$List$cons,
									A2($elm$html$Html$span, _List_Nil, valueHtmls),
									otherHtmls)))));
			}
		}
	});
var $elm$browser$Debugger$Expando$view = F2(
	function (maybeKey, expando) {
		switch (expando.$) {
			case 'S':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$red]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Primitive':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$blue]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewSequence, maybeKey, seqType, isClosed, valueList);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return A3($elm$browser$Debugger$Expando$viewDictionary, maybeKey, isClosed, keyValuePairs);
			case 'Record':
				var isClosed = expando.a;
				var valueDict = expando.b;
				return A3($elm$browser$Debugger$Expando$viewRecord, maybeKey, isClosed, valueDict);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewConstructor, maybeKey, maybeName, isClosed, valueList);
		}
	});
var $elm$browser$Debugger$Expando$viewConstructor = F4(
	function (maybeKey, maybeName, isClosed, valueList) {
		var tinyArgs = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeL, $elm$core$Tuple$second, $elm$browser$Debugger$Expando$viewExtraTiny),
			valueList);
		var description = function () {
			var _v7 = _Utils_Tuple2(maybeName, tinyArgs);
			if (_v7.a.$ === 'Nothing') {
				if (!_v7.b.b) {
					var _v8 = _v7.a;
					return _List_fromArray(
						[
							$elm$html$Html$text('()')
						]);
				} else {
					var _v9 = _v7.a;
					var _v10 = _v7.b;
					var x = _v10.a;
					var xs = _v10.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text('( '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(', '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_fromArray(
									[
										$elm$html$Html$text(' )')
									]),
								xs)));
				}
			} else {
				if (!_v7.b.b) {
					var name = _v7.a.a;
					return _List_fromArray(
						[
							$elm$html$Html$text(name)
						]);
				} else {
					var name = _v7.a.a;
					var _v11 = _v7.b;
					var x = _v11.a;
					var xs = _v11.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text(name + ' '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(' '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_Nil,
								xs)));
				}
			}
		}();
		var _v4 = function () {
			if (!valueList.b) {
				return _Utils_Tuple2(
					$elm$core$Maybe$Nothing,
					A2($elm$html$Html$div, _List_Nil, _List_Nil));
			} else {
				if (!valueList.b.b) {
					var entry = valueList.a;
					switch (entry.$) {
						case 'S':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Primitive':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Sequence':
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewSequenceOpen(subValueList)));
						case 'Dictionary':
							var keyValuePairs = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)));
						case 'Record':
							var record = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewRecordOpen(record)));
						default:
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewConstructorOpen(subValueList)));
					}
				} else {
					return _Utils_Tuple2(
						$elm$core$Maybe$Just(isClosed),
						isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : $elm$browser$Debugger$Expando$viewConstructorOpen(valueList));
				}
			}
		}();
		var maybeIsClosed = _v4.a;
		var openHtml = _v4.b;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, maybeIsClosed, description)),
					openHtml
				]));
	});
var $elm$browser$Debugger$Expando$viewConstructorEntry = F2(
	function (index, value) {
		return A2(
			$elm$html$Html$map,
			A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, index),
			A2(
				$elm$browser$Debugger$Expando$view,
				$elm$core$Maybe$Just(
					$elm$core$String$fromInt(index)),
				value));
	});
var $elm$browser$Debugger$Expando$viewConstructorOpen = function (valueList) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, valueList));
};
var $elm$browser$Debugger$Expando$viewDictionary = F3(
	function (maybeKey, isClosed, keyValuePairs) {
		var starter = 'Dict(' + ($elm$core$String$fromInt(
			$elm$core$List$length(keyValuePairs)) + ')');
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)
				]));
	});
var $elm$browser$Debugger$Expando$viewDictionaryEntry = F2(
	function (index, _v2) {
		var key = _v2.a;
		var value = _v2.b;
		switch (key.$) {
			case 'S':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			case 'Primitive':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			default:
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Key, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('key'),
								key)),
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('value'),
								value))
						]));
		}
	});
var $elm$browser$Debugger$Expando$viewDictionaryOpen = function (keyValuePairs) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewDictionaryEntry, keyValuePairs));
};
var $elm$browser$Debugger$Expando$viewRecord = F3(
	function (maybeKey, isClosed, record) {
		var _v1 = isClosed ? _Utils_Tuple3(
			$elm$browser$Debugger$Expando$viewTinyRecord(record).b,
			$elm$html$Html$text(''),
			$elm$html$Html$text('')) : _Utils_Tuple3(
			_List_fromArray(
				[
					$elm$html$Html$text('{')
				]),
			$elm$browser$Debugger$Expando$viewRecordOpen(record),
			A2(
				$elm$html$Html$div,
				$elm$browser$Debugger$Expando$leftPad(
					$elm$core$Maybe$Just(_Utils_Tuple0)),
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					])));
		var start = _v1.a;
		var middle = _v1.b;
		var end = _v1.c;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						start)),
					middle,
					end
				]));
	});
var $elm$browser$Debugger$Expando$viewRecordEntry = function (_v0) {
	var field = _v0.a;
	var value = _v0.b;
	return A2(
		$elm$html$Html$map,
		$elm$browser$Debugger$Expando$Field(field),
		A2(
			$elm$browser$Debugger$Expando$view,
			$elm$core$Maybe$Just(field),
			value));
};
var $elm$browser$Debugger$Expando$viewRecordOpen = function (record) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Expando$viewRecordEntry,
			$elm$core$Dict$toList(record)));
};
var $elm$browser$Debugger$Expando$viewSequence = F4(
	function (maybeKey, seqType, isClosed, valueList) {
		var starter = A2(
			$elm$browser$Debugger$Expando$seqTypeToString,
			$elm$core$List$length(valueList),
			seqType);
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewSequenceOpen(valueList)
				]));
	});
var $elm$browser$Debugger$Expando$viewSequenceOpen = function (values) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, values));
};
var $elm$browser$Debugger$Main$viewExpando = F3(
	function (expandoMsg, expandoModel, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toExpandoPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'block'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(' + (w + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(' + (h + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'padding', '2em'),
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'overflow', 'auto'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, '-webkit-user-select', block),
					A2($elm$html$Html$Attributes$style, '-moz-user-select', block),
					A2($elm$html$Html$Attributes$style, '-ms-user-select', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '0 0 1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MESSAGE')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoMsg,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoMsg)),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MODEL')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoModel,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoModel))
				]));
	});
var $elm$browser$Debugger$Main$Jump = function (a) {
	return {$: 'Jump', a: a};
};
var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
var $elm$browser$Debugger$Main$toHistoryPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(1 - y));
	}
};
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $elm$html$Html$Lazy$lazy3 = $elm$virtual_dom$VirtualDom$lazy3;
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$browser$Debugger$History$idForMessageIndex = function (index) {
	return 'msg-' + $elm$core$String$fromInt(index);
};
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $elm$browser$Debugger$History$viewMessage = F3(
	function (currentIndex, index, msg) {
		var messageName = _Debugger_messageToString(msg);
		var className = _Utils_eq(currentIndex, index) ? 'elm-debugger-entry elm-debugger-entry-selected' : 'elm-debugger-entry';
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id(
					$elm$browser$Debugger$History$idForMessageIndex(index)),
					$elm$html$Html$Attributes$class(className),
					$elm$html$Html$Events$onClick(index)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$title(messageName),
							$elm$html$Html$Attributes$class('elm-debugger-entry-content')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(messageName)
						])),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('elm-debugger-entry-index')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(index))
						]))
				]));
	});
var $elm$browser$Debugger$History$consMsg = F3(
	function (currentIndex, msg, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		return _Utils_Tuple2(
			index + 1,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$elm$core$String$fromInt(index),
					A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewMessage, currentIndex, index, msg)),
				rest));
	});
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm$browser$Debugger$History$maxSnapshotSize = 31;
var $elm$browser$Debugger$History$showMoreButton = function (numMessages) {
	var nextIndex = (numMessages - 1) - ($elm$browser$Debugger$History$maxSnapshotSize * 2);
	var labelText = 'View more messages';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-debugger-entry'),
				$elm$html$Html$Events$onClick(nextIndex)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$title(labelText),
						$elm$html$Html$Attributes$class('elm-debugger-entry-content')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(labelText)
					])),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elm-debugger-entry-index')
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$History$styles = A3(
	$elm$html$Html$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 8px;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 40px);\n  padding: 0 5px;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 40px;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n')
		]));
var $elm$core$Basics$ge = _Utils_ge;
var $elm$browser$Debugger$History$viewSnapshot = F3(
	function (selectedIndex, index, _v0) {
		var messages = _v0.messages;
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$Array$foldr,
				$elm$browser$Debugger$History$consMsg(selectedIndex),
				_Utils_Tuple2(index, _List_Nil),
				messages).b);
	});
var $elm$browser$Debugger$History$consSnapshot = F3(
	function (selectedIndex, snapshot, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		var nextIndex = index + $elm$core$Array$length(snapshot.messages);
		var selectedIndexHelp = ((_Utils_cmp(nextIndex, selectedIndex) > 0) && (_Utils_cmp(selectedIndex, index) > -1)) ? selectedIndex : (-1);
		return _Utils_Tuple2(
			nextIndex,
			A2(
				$elm$core$List$cons,
				A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewSnapshot, selectedIndexHelp, index, snapshot),
				rest));
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$foldl = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldl,
			func,
			A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var $elm$browser$Debugger$History$viewAllSnapshots = F3(
	function (selectedIndex, startIndex, snapshots) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			A3(
				$elm$core$Array$foldl,
				$elm$browser$Debugger$History$consSnapshot(selectedIndex),
				_Utils_Tuple2(startIndex, _List_Nil),
				snapshots).b);
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_v0.$ === 'SubTree') {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_v0.$ === 'SubTree') {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $elm$browser$Debugger$History$viewRecentSnapshots = F3(
	function (selectedIndex, recentMessagesNum, snapshots) {
		var messagesToFill = $elm$browser$Debugger$History$maxSnapshotSize - recentMessagesNum;
		var arrayLength = $elm$core$Array$length(snapshots);
		var snapshotsToRender = function () {
			var _v0 = _Utils_Tuple2(
				A2($elm$core$Array$get, arrayLength - 2, snapshots),
				A2($elm$core$Array$get, arrayLength - 1, snapshots));
			if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
				var fillerSnapshot = _v0.a.a;
				var recentSnapshot = _v0.b.a;
				return $elm$core$Array$fromList(
					_List_fromArray(
						[
							{
							messages: A3($elm$core$Array$slice, 0, messagesToFill, fillerSnapshot.messages),
							model: fillerSnapshot.model
						},
							recentSnapshot
						]));
			} else {
				return snapshots;
			}
		}();
		var startingIndex = ((arrayLength * $elm$browser$Debugger$History$maxSnapshotSize) - $elm$browser$Debugger$History$maxSnapshotSize) - messagesToFill;
		return A3($elm$browser$Debugger$History$viewAllSnapshots, selectedIndex, startingIndex, snapshotsToRender);
	});
var $elm$browser$Debugger$History$view = F2(
	function (maybeIndex, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var recentMessageStartIndex = numMessages - recent.numMessages;
		var index = A2($elm$core$Maybe$withDefault, -1, maybeIndex);
		var newStuff = A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$List$foldr,
				$elm$browser$Debugger$History$consMsg(index),
				_Utils_Tuple2(recentMessageStartIndex, _List_Nil),
				recent.messages).b);
		var onlyRenderRecentMessages = (!_Utils_eq(index, -1)) || ($elm$core$Array$length(snapshots) < 2);
		var oldStuff = onlyRenderRecentMessages ? A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewAllSnapshots, index, 0, snapshots) : A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewRecentSnapshots, index, recent.numMessages, snapshots);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-sidebar'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(100% - 72px)')
				]),
			A2(
				$elm$core$List$cons,
				$elm$browser$Debugger$History$styles,
				A2(
					$elm$core$List$cons,
					newStuff,
					A2(
						$elm$core$List$cons,
						oldStuff,
						onlyRenderRecentMessages ? _List_Nil : _List_fromArray(
							[
								$elm$browser$Debugger$History$showMoreButton(numMessages)
							])))));
	});
var $elm$browser$Debugger$Main$SwapLayout = {$: 'SwapLayout'};
var $elm$browser$Debugger$Main$toHistoryIcon = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'M13 1a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M13 3h-10a1 1 0 0 0-1 1v5h12v-5a1 1 0 0 0-1-1z M14 10h-12v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1z';
	} else {
		return 'M0 4a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3z M2 4v8a1 1 0 0 0 1 1h2v-10h-2a1 1 0 0 0-1 1z M6 3v10h7a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1z';
	}
};
var $elm$browser$Debugger$Main$icon = function (path) {
	return A4(
		$elm$virtual_dom$VirtualDom$nodeNS,
		'http://www.w3.org/2000/svg',
		'svg',
		_List_fromArray(
			[
				A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '0 0 16 16'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'width', '16px'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'height', '16px')
			]),
		_List_fromArray(
			[
				A4(
				$elm$virtual_dom$VirtualDom$nodeNS,
				'http://www.w3.org/2000/svg',
				'path',
				_List_fromArray(
					[
						A2($elm$virtual_dom$VirtualDom$attribute, 'd', path)
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$Main$viewHistoryButton = F3(
	function (label, msg, path) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'background', 'none'),
					A2($elm$html$Html$Attributes$style, 'border', 'none'),
					A2($elm$html$Html$Attributes$style, 'color', 'inherit'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(msg)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Main$icon(path),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', '6px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				]));
	});
var $elm$browser$Debugger$Main$viewHistoryOptions = function (layout) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
				A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
				A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		_List_fromArray(
			[
				A3(
				$elm$browser$Debugger$Main$viewHistoryButton,
				'Swap Layout',
				$elm$browser$Debugger$Main$SwapLayout,
				$elm$browser$Debugger$Main$toHistoryIcon(layout)),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'display', 'flex'),
						A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
						A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
						A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between')
					]),
				_List_fromArray(
					[
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Import', $elm$browser$Debugger$Main$Import, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M10 2a1 1 0 0 0 -2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2h-3.586l4.293-4.293a1 1 0 0 0-1.414-1.414l-4.293 4.293z'),
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Export', $elm$browser$Debugger$Main$Export, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1 a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M9 3a1 1 0 1 1 0-2h6a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-3.586l-5.293 5.293 a1 1 0 0 1-1.414-1.414l5.293 -5.293z')
					]))
			]));
};
var $elm$browser$Debugger$Main$SliderJump = function (a) {
	return {$: 'SliderJump', a: a};
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$browser$Debugger$Main$isPlaying = function (maybeIndex) {
	if (maybeIndex.$ === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$core$String$toInt = _String_toInt;
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $elm$browser$Debugger$Main$viewPlayButton = function (playing) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'background', '#1293D8'),
				A2($elm$html$Html$Attributes$style, 'border', 'none'),
				A2($elm$html$Html$Attributes$style, 'color', 'white'),
				A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
				A2($elm$html$Html$Attributes$style, 'width', '36px'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				$elm$html$Html$Events$onClick($elm$browser$Debugger$Main$Resume)
			]),
		_List_fromArray(
			[
				playing ? $elm$browser$Debugger$Main$icon('M2 2h4v12h-4v-12z M10 2h4v12h-4v-12z') : $elm$browser$Debugger$Main$icon('M2 2l12 7l-12 7z')
			]));
};
var $elm$browser$Debugger$Main$viewHistorySlider = F2(
	function (history, maybeIndex) {
		var lastIndex = $elm$browser$Debugger$History$size(history) - 1;
		var selectedIndex = A2($elm$core$Maybe$withDefault, lastIndex, maybeIndex);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Lazy$lazy,
					$elm$browser$Debugger$Main$viewPlayButton,
					$elm$browser$Debugger$Main$isPlaying(maybeIndex)),
					A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('range'),
							A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 56px)'),
							A2($elm$html$Html$Attributes$style, 'height', '36px'),
							A2($elm$html$Html$Attributes$style, 'margin', '0 10px'),
							$elm$html$Html$Attributes$min('0'),
							$elm$html$Html$Attributes$max(
							$elm$core$String$fromInt(lastIndex)),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(selectedIndex)),
							$elm$html$Html$Events$onInput(
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toInt,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$withDefault(lastIndex),
									$elm$browser$Debugger$Main$SliderJump)))
						]),
					_List_Nil)
				]));
	});
var $elm$browser$Debugger$Main$viewHistory = F3(
	function (maybeIndex, history, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toHistoryPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'width', w),
					A2($elm$html$Html$Attributes$style, 'height', h),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'column'),
					A2($elm$html$Html$Attributes$style, 'color', '#DDDDDD'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2($elm$browser$Debugger$Main$viewHistorySlider, history, maybeIndex),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$Jump,
					A2($elm$browser$Debugger$History$view, maybeIndex, history)),
					A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewHistoryOptions, layout)
				]));
	});
var $elm$browser$Debugger$Main$popoutView = function (model) {
	var maybeIndex = function () {
		var _v0 = model.state;
		if (_v0.$ === 'Running') {
			return $elm$core$Maybe$Nothing;
		} else {
			var index = _v0.a;
			return $elm$core$Maybe$Just(index);
		}
	}();
	var historyToRender = $elm$browser$Debugger$Main$cachedHistory(model);
	return A3(
		$elm$html$Html$node,
		'body',
		_Utils_ap(
			$elm$browser$Debugger$Main$toDragListeners(model.layout),
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'padding', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2(
					$elm$html$Html$Attributes$style,
					'flex-direction',
					$elm$browser$Debugger$Main$toFlexDirection(model.layout))
				])),
		_List_fromArray(
			[
				A3($elm$browser$Debugger$Main$viewHistory, maybeIndex, historyToRender, model.layout),
				$elm$browser$Debugger$Main$viewDragZone(model.layout),
				A3($elm$browser$Debugger$Main$viewExpando, model.expandoMsg, model.expandoModel, model.layout)
			]));
};
var $elm$browser$Debugger$Overlay$BlockAll = {$: 'BlockAll'};
var $elm$browser$Debugger$Overlay$toBlockerType = F2(
	function (isPaused, state) {
		switch (state.$) {
			case 'None':
				return isPaused ? $elm$browser$Debugger$Overlay$BlockAll : $elm$browser$Debugger$Overlay$BlockNone;
			case 'BadMetadata':
				return $elm$browser$Debugger$Overlay$BlockMost;
			case 'BadImport':
				return $elm$browser$Debugger$Overlay$BlockMost;
			default:
				return $elm$browser$Debugger$Overlay$BlockMost;
		}
	});
var $elm$browser$Debugger$Main$toBlockerType = function (model) {
	return A2(
		$elm$browser$Debugger$Overlay$toBlockerType,
		$elm$browser$Debugger$Main$isPaused(model.state),
		model.overlay);
};
var $elm$browser$Debugger$Main$Horizontal = F3(
	function (a, b, c) {
		return {$: 'Horizontal', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$Running = function (a) {
	return {$: 'Running', a: a};
};
var $elm$browser$Debugger$Main$Static = {$: 'Static'};
var $elm$browser$Debugger$Metadata$Error = F2(
	function (message, problems) {
		return {message: message, problems: problems};
	});
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$browser$Debugger$Metadata$Metadata = F2(
	function (versions, types) {
		return {types: types, versions: versions};
	});
var $elm$browser$Debugger$Metadata$Types = F3(
	function (message, aliases, unions) {
		return {aliases: aliases, message: message, unions: unions};
	});
var $elm$browser$Debugger$Metadata$Alias = F2(
	function (args, tipe) {
		return {args: args, tipe: tipe};
	});
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$browser$Debugger$Metadata$decodeAlias = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Alias,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$Union = F2(
	function (args, tags) {
		return {args: args, tags: tags};
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $elm$browser$Debugger$Metadata$decodeUnion = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Union,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$field,
		'tags',
		$elm$json$Json$Decode$dict(
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$browser$Debugger$Metadata$decodeTypes = A4(
	$elm$json$Json$Decode$map3,
	$elm$browser$Debugger$Metadata$Types,
	A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'aliases',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeAlias)),
	A2(
		$elm$json$Json$Decode$field,
		'unions',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeUnion)));
var $elm$browser$Debugger$Metadata$Versions = function (elm) {
	return {elm: elm};
};
var $elm$browser$Debugger$Metadata$decodeVersions = A2(
	$elm$json$Json$Decode$map,
	$elm$browser$Debugger$Metadata$Versions,
	A2($elm$json$Json$Decode$field, 'elm', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$decoder = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Metadata,
	A2($elm$json$Json$Decode$field, 'versions', $elm$browser$Debugger$Metadata$decodeVersions),
	A2($elm$json$Json$Decode$field, 'types', $elm$browser$Debugger$Metadata$decodeTypes));
var $elm$browser$Debugger$Metadata$ProblemType = F2(
	function (name, problems) {
		return {name: name, problems: problems};
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$core$String$contains = _String_contains;
var $elm$browser$Debugger$Metadata$hasProblem = F2(
	function (tipe, _v0) {
		var problem = _v0.a;
		var token = _v0.b;
		return A2($elm$core$String$contains, token, tipe) ? $elm$core$Maybe$Just(problem) : $elm$core$Maybe$Nothing;
	});
var $elm$browser$Debugger$Metadata$Decoder = {$: 'Decoder'};
var $elm$browser$Debugger$Metadata$Function = {$: 'Function'};
var $elm$browser$Debugger$Metadata$Process = {$: 'Process'};
var $elm$browser$Debugger$Metadata$Program = {$: 'Program'};
var $elm$browser$Debugger$Metadata$Request = {$: 'Request'};
var $elm$browser$Debugger$Metadata$Socket = {$: 'Socket'};
var $elm$browser$Debugger$Metadata$Task = {$: 'Task'};
var $elm$browser$Debugger$Metadata$VirtualDom = {$: 'VirtualDom'};
var $elm$browser$Debugger$Metadata$problemTable = _List_fromArray(
	[
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Function, '->'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Decoder, 'Json.Decode.Decoder'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Task, 'Task.Task'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Process, 'Process.Id'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Socket, 'WebSocket.LowLevel.WebSocket'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Request, 'Http.Request'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Program, 'Platform.Program'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Node'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Attribute')
	]);
var $elm$browser$Debugger$Metadata$findProblems = function (tipe) {
	return A2(
		$elm$core$List$filterMap,
		$elm$browser$Debugger$Metadata$hasProblem(tipe),
		$elm$browser$Debugger$Metadata$problemTable);
};
var $elm$browser$Debugger$Metadata$collectBadAliases = F3(
	function (name, _v0, list) {
		var tipe = _v0.tipe;
		var _v1 = $elm$browser$Debugger$Metadata$findProblems(tipe);
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $elm$browser$Debugger$Metadata$collectBadUnions = F3(
	function (name, _v0, list) {
		var tags = _v0.tags;
		var _v1 = A2(
			$elm$core$List$concatMap,
			$elm$browser$Debugger$Metadata$findProblems,
			$elm$core$List$concat(
				$elm$core$Dict$values(tags)));
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$browser$Debugger$Metadata$isPortable = function (_v0) {
	var types = _v0.types;
	var badAliases = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadAliases, _List_Nil, types.aliases);
	var _v1 = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadUnions, badAliases, types.unions);
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var problems = _v1;
		return $elm$core$Maybe$Just(
			A2($elm$browser$Debugger$Metadata$Error, types.message, problems));
	}
};
var $elm$browser$Debugger$Metadata$decode = function (value) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $elm$browser$Debugger$Metadata$decoder, value);
	if (_v0.$ === 'Err') {
		return $elm$core$Result$Err(
			A2($elm$browser$Debugger$Metadata$Error, 'The compiler is generating bad metadata. This is a compiler bug!', _List_Nil));
	} else {
		var metadata = _v0.a;
		var _v1 = $elm$browser$Debugger$Metadata$isPortable(metadata);
		if (_v1.$ === 'Nothing') {
			return $elm$core$Result$Ok(metadata);
		} else {
			var error = _v1.a;
			return $elm$core$Result$Err(error);
		}
	}
};
var $elm$browser$Debugger$History$History = F3(
	function (snapshots, recent, numMessages) {
		return {numMessages: numMessages, recent: recent, snapshots: snapshots};
	});
var $elm$browser$Debugger$History$RecentHistory = F3(
	function (model, messages, numMessages) {
		return {messages: messages, model: model, numMessages: numMessages};
	});
var $elm$browser$Debugger$History$empty = function (model) {
	return A3(
		$elm$browser$Debugger$History$History,
		$elm$core$Array$empty,
		A3($elm$browser$Debugger$History$RecentHistory, model, _List_Nil, 0),
		0);
};
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$browser$Debugger$Expando$initHelp = F2(
	function (isOuter, expando) {
		switch (expando.$) {
			case 'S':
				return expando;
			case 'Primitive':
				return expando;
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var items = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Sequence,
					seqType,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						items)) : (($elm$core$List$length(items) <= 8) ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, items) : expando);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Dictionary,
					false,
					A2(
						$elm$core$List$map,
						function (_v1) {
							var k = _v1.a;
							var v = _v1.b;
							return _Utils_Tuple2(
								k,
								A2($elm$browser$Debugger$Expando$initHelp, false, v));
						},
						keyValuePairs)) : (($elm$core$List$length(keyValuePairs) <= 8) ? A2($elm$browser$Debugger$Expando$Dictionary, false, keyValuePairs) : expando);
			case 'Record':
				var isClosed = expando.a;
				var entries = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Record,
					false,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v2, v) {
								return A2($elm$browser$Debugger$Expando$initHelp, false, v);
							}),
						entries)) : (($elm$core$Dict$size(entries) <= 4) ? A2($elm$browser$Debugger$Expando$Record, false, entries) : expando);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var args = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Constructor,
					maybeName,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						args)) : (($elm$core$List$length(args) <= 4) ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, args) : expando);
		}
	});
var $elm$browser$Debugger$Expando$init = function (value) {
	return A2(
		$elm$browser$Debugger$Expando$initHelp,
		true,
		_Debugger_init(value));
};
var $elm$core$Platform$Cmd$map = _Platform_map;
var $elm$browser$Debugger$Overlay$None = {$: 'None'};
var $elm$browser$Debugger$Overlay$none = $elm$browser$Debugger$Overlay$None;
var $elm$browser$Debugger$Main$wrapInit = F4(
	function (metadata, popout, init, flags) {
		var _v0 = init(flags);
		var userModel = _v0.a;
		var userCommands = _v0.b;
		return _Utils_Tuple2(
			{
				expandoModel: $elm$browser$Debugger$Expando$init(userModel),
				expandoMsg: $elm$browser$Debugger$Expando$init(_Utils_Tuple0),
				history: $elm$browser$Debugger$History$empty(userModel),
				layout: A3($elm$browser$Debugger$Main$Horizontal, $elm$browser$Debugger$Main$Static, 0.3, 0.5),
				metadata: $elm$browser$Debugger$Metadata$decode(metadata),
				overlay: $elm$browser$Debugger$Overlay$none,
				popout: popout,
				state: $elm$browser$Debugger$Main$Running(userModel)
			},
			A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCommands));
	});
var $elm$browser$Debugger$Main$getLatestModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.c;
		return model;
	}
};
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$browser$Debugger$Main$wrapSubs = F2(
	function (subscriptions, model) {
		return A2(
			$elm$core$Platform$Sub$map,
			$elm$browser$Debugger$Main$UserMsg,
			subscriptions(
				$elm$browser$Debugger$Main$getLatestModel(model.state)));
	});
var $elm$browser$Debugger$Main$Moving = {$: 'Moving'};
var $elm$browser$Debugger$Main$Paused = F5(
	function (a, b, c, d, e) {
		return {$: 'Paused', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$browser$Debugger$History$Snapshot = F2(
	function (model, messages) {
		return {messages: messages, model: model};
	});
var $elm$browser$Debugger$History$addRecent = F3(
	function (msg, newModel, _v0) {
		var model = _v0.model;
		var messages = _v0.messages;
		var numMessages = _v0.numMessages;
		return _Utils_eq(numMessages, $elm$browser$Debugger$History$maxSnapshotSize) ? _Utils_Tuple2(
			$elm$core$Maybe$Just(
				A2(
					$elm$browser$Debugger$History$Snapshot,
					model,
					$elm$core$Array$fromList(messages))),
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				newModel,
				_List_fromArray(
					[msg]),
				1)) : _Utils_Tuple2(
			$elm$core$Maybe$Nothing,
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				model,
				A2($elm$core$List$cons, msg, messages),
				numMessages + 1));
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$browser$Debugger$History$add = F3(
	function (msg, model, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var _v1 = A3($elm$browser$Debugger$History$addRecent, msg, model, recent);
		if (_v1.a.$ === 'Just') {
			var snapshot = _v1.a.a;
			var newRecent = _v1.b;
			return A3(
				$elm$browser$Debugger$History$History,
				A2($elm$core$Array$push, snapshot, snapshots),
				newRecent,
				numMessages + 1);
		} else {
			var _v2 = _v1.a;
			var newRecent = _v1.b;
			return A3($elm$browser$Debugger$History$History, snapshots, newRecent, numMessages + 1);
		}
	});
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$browser$Debugger$Overlay$BadImport = function (a) {
	return {$: 'BadImport', a: a};
};
var $elm$browser$Debugger$Overlay$RiskyImport = F2(
	function (a, b) {
		return {$: 'RiskyImport', a: a, b: b};
	});
var $elm$browser$Debugger$Report$VersionChanged = F2(
	function (a, b) {
		return {$: 'VersionChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$MessageChanged = F2(
	function (a, b) {
		return {$: 'MessageChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$SomethingChanged = function (a) {
	return {$: 'SomethingChanged', a: a};
};
var $elm$browser$Debugger$Report$AliasChange = function (a) {
	return {$: 'AliasChange', a: a};
};
var $elm$browser$Debugger$Metadata$checkAlias = F4(
	function (name, old, _new, changes) {
		return (_Utils_eq(old.tipe, _new.tipe) && _Utils_eq(old.args, _new.args)) ? changes : A2(
			$elm$core$List$cons,
			$elm$browser$Debugger$Report$AliasChange(name),
			changes);
	});
var $elm$browser$Debugger$Report$UnionChange = F2(
	function (a, b) {
		return {$: 'UnionChange', a: a, b: b};
	});
var $elm$browser$Debugger$Metadata$addTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				added: A2($elm$core$List$cons, tag, changes.added)
			});
	});
var $elm$browser$Debugger$Metadata$checkTag = F4(
	function (tag, old, _new, changes) {
		return _Utils_eq(old, _new) ? changes : _Utils_update(
			changes,
			{
				changed: A2($elm$core$List$cons, tag, changes.changed)
			});
	});
var $elm$browser$Debugger$Report$TagChanges = F4(
	function (removed, changed, added, argsMatch) {
		return {added: added, argsMatch: argsMatch, changed: changed, removed: removed};
	});
var $elm$browser$Debugger$Report$emptyTagChanges = function (argsMatch) {
	return A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, argsMatch);
};
var $elm$browser$Debugger$Report$hasTagChanges = function (tagChanges) {
	return _Utils_eq(
		tagChanges,
		A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, true));
};
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Debugger$Metadata$removeTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				removed: A2($elm$core$List$cons, tag, changes.removed)
			});
	});
var $elm$browser$Debugger$Metadata$checkUnion = F4(
	function (name, old, _new, changes) {
		var tagChanges = A6(
			$elm$core$Dict$merge,
			$elm$browser$Debugger$Metadata$removeTag,
			$elm$browser$Debugger$Metadata$checkTag,
			$elm$browser$Debugger$Metadata$addTag,
			old.tags,
			_new.tags,
			$elm$browser$Debugger$Report$emptyTagChanges(
				_Utils_eq(old.args, _new.args)));
		return $elm$browser$Debugger$Report$hasTagChanges(tagChanges) ? changes : A2(
			$elm$core$List$cons,
			A2($elm$browser$Debugger$Report$UnionChange, name, tagChanges),
			changes);
	});
var $elm$browser$Debugger$Metadata$ignore = F3(
	function (key, value, report) {
		return report;
	});
var $elm$browser$Debugger$Metadata$checkTypes = F2(
	function (old, _new) {
		return (!_Utils_eq(old.message, _new.message)) ? A2($elm$browser$Debugger$Report$MessageChanged, old.message, _new.message) : $elm$browser$Debugger$Report$SomethingChanged(
			A6(
				$elm$core$Dict$merge,
				$elm$browser$Debugger$Metadata$ignore,
				$elm$browser$Debugger$Metadata$checkUnion,
				$elm$browser$Debugger$Metadata$ignore,
				old.unions,
				_new.unions,
				A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkAlias, $elm$browser$Debugger$Metadata$ignore, old.aliases, _new.aliases, _List_Nil)));
	});
var $elm$browser$Debugger$Metadata$check = F2(
	function (old, _new) {
		return (!_Utils_eq(old.versions.elm, _new.versions.elm)) ? A2($elm$browser$Debugger$Report$VersionChanged, old.versions.elm, _new.versions.elm) : A2($elm$browser$Debugger$Metadata$checkTypes, old.types, _new.types);
	});
var $elm$browser$Debugger$Report$CorruptHistory = {$: 'CorruptHistory'};
var $elm$browser$Debugger$Overlay$corruptImport = $elm$browser$Debugger$Overlay$BadImport($elm$browser$Debugger$Report$CorruptHistory);
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$browser$Debugger$Report$Fine = {$: 'Fine'};
var $elm$browser$Debugger$Report$Impossible = {$: 'Impossible'};
var $elm$browser$Debugger$Report$Risky = {$: 'Risky'};
var $elm$core$Basics$not = _Basics_not;
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$browser$Debugger$Report$some = function (list) {
	return !$elm$core$List$isEmpty(list);
};
var $elm$browser$Debugger$Report$evaluateChange = function (change) {
	if (change.$ === 'AliasChange') {
		return $elm$browser$Debugger$Report$Impossible;
	} else {
		var removed = change.b.removed;
		var changed = change.b.changed;
		var added = change.b.added;
		var argsMatch = change.b.argsMatch;
		return ((!argsMatch) || ($elm$browser$Debugger$Report$some(changed) || $elm$browser$Debugger$Report$some(removed))) ? $elm$browser$Debugger$Report$Impossible : ($elm$browser$Debugger$Report$some(added) ? $elm$browser$Debugger$Report$Risky : $elm$browser$Debugger$Report$Fine);
	}
};
var $elm$browser$Debugger$Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			if (!statusList.b) {
				return status;
			} else {
				switch (statusList.a.$) {
					case 'Impossible':
						var _v1 = statusList.a;
						return $elm$browser$Debugger$Report$Impossible;
					case 'Risky':
						var _v2 = statusList.a;
						var rest = statusList.b;
						var $temp$status = $elm$browser$Debugger$Report$Risky,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
					default:
						var _v3 = statusList.a;
						var rest = statusList.b;
						var $temp$status = status,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
				}
			}
		}
	});
var $elm$browser$Debugger$Report$evaluate = function (report) {
	switch (report.$) {
		case 'CorruptHistory':
			return $elm$browser$Debugger$Report$Impossible;
		case 'VersionChanged':
			return $elm$browser$Debugger$Report$Impossible;
		case 'MessageChanged':
			return $elm$browser$Debugger$Report$Impossible;
		default:
			var changes = report.a;
			return A2(
				$elm$browser$Debugger$Report$worstCase,
				$elm$browser$Debugger$Report$Fine,
				A2($elm$core$List$map, $elm$browser$Debugger$Report$evaluateChange, changes));
	}
};
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $elm$browser$Debugger$Overlay$uploadDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (x, y) {
			return _Utils_Tuple2(x, y);
		}),
	A2($elm$json$Json$Decode$field, 'metadata', $elm$browser$Debugger$Metadata$decoder),
	A2($elm$json$Json$Decode$field, 'history', $elm$json$Json$Decode$value));
var $elm$browser$Debugger$Overlay$assessImport = F2(
	function (metadata, jsonString) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$browser$Debugger$Overlay$uploadDecoder, jsonString);
		if (_v0.$ === 'Err') {
			return $elm$core$Result$Err($elm$browser$Debugger$Overlay$corruptImport);
		} else {
			var _v1 = _v0.a;
			var foreignMetadata = _v1.a;
			var rawHistory = _v1.b;
			var report = A2($elm$browser$Debugger$Metadata$check, foreignMetadata, metadata);
			var _v2 = $elm$browser$Debugger$Report$evaluate(report);
			switch (_v2.$) {
				case 'Impossible':
					return $elm$core$Result$Err(
						$elm$browser$Debugger$Overlay$BadImport(report));
				case 'Risky':
					return $elm$core$Result$Err(
						A2($elm$browser$Debugger$Overlay$RiskyImport, report, rawHistory));
				default:
					return $elm$core$Result$Ok(rawHistory);
			}
		}
	});
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$browser$Debugger$Overlay$close = F2(
	function (msg, state) {
		switch (state.$) {
			case 'None':
				return $elm$core$Maybe$Nothing;
			case 'BadMetadata':
				return $elm$core$Maybe$Nothing;
			case 'BadImport':
				return $elm$core$Maybe$Nothing;
			default:
				var rawHistory = state.b;
				if (msg.$ === 'Cancel') {
					return $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just(rawHistory);
				}
		}
	});
var $elm$browser$Debugger$History$elmToJs = A2($elm$core$Basics$composeR, _Json_wrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$encodeHelp = F2(
	function (snapshot, allMessages) {
		return A3($elm$core$Array$foldl, $elm$core$List$cons, allMessages, snapshot.messages);
	});
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$browser$Debugger$History$encode = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$browser$Debugger$History$elmToJs,
		A3(
			$elm$core$Array$foldr,
			$elm$browser$Debugger$History$encodeHelp,
			$elm$core$List$reverse(recent.messages),
			snapshots));
};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$browser$Debugger$Metadata$encodeAlias = function (_v0) {
	var args = _v0.args;
	var tipe = _v0.tipe;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string(tipe))
			]));
};
var $elm$browser$Debugger$Metadata$encodeDict = F2(
	function (f, dict) {
		return $elm$json$Json$Encode$object(
			$elm$core$Dict$toList(
				A2(
					$elm$core$Dict$map,
					F2(
						function (key, value) {
							return f(value);
						}),
					dict)));
	});
var $elm$browser$Debugger$Metadata$encodeUnion = function (_v0) {
	var args = _v0.args;
	var tags = _v0.tags;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'tags',
				A2(
					$elm$browser$Debugger$Metadata$encodeDict,
					$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
					tags))
			]));
};
var $elm$browser$Debugger$Metadata$encodeTypes = function (_v0) {
	var message = _v0.message;
	var unions = _v0.unions;
	var aliases = _v0.aliases;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'message',
				$elm$json$Json$Encode$string(message)),
				_Utils_Tuple2(
				'aliases',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeAlias, aliases)),
				_Utils_Tuple2(
				'unions',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeUnion, unions))
			]));
};
var $elm$browser$Debugger$Metadata$encodeVersions = function (_v0) {
	var elm = _v0.elm;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'elm',
				$elm$json$Json$Encode$string(elm))
			]));
};
var $elm$browser$Debugger$Metadata$encode = function (_v0) {
	var versions = _v0.versions;
	var types = _v0.types;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'versions',
				$elm$browser$Debugger$Metadata$encodeVersions(versions)),
				_Utils_Tuple2(
				'types',
				$elm$browser$Debugger$Metadata$encodeTypes(types))
			]));
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Debugger$Main$download = F2(
	function (metadata, history) {
		var historyLength = $elm$browser$Debugger$History$size(history);
		return A2(
			$elm$core$Task$perform,
			function (_v0) {
				return $elm$browser$Debugger$Main$NoOp;
			},
			A2(
				_Debugger_download,
				historyLength,
				_Json_unwrap(
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'metadata',
								$elm$browser$Debugger$Metadata$encode(metadata)),
								_Utils_Tuple2(
								'history',
								$elm$browser$Debugger$History$encode(history))
							])))));
	});
var $elm$browser$Debugger$Main$Vertical = F3(
	function (a, b, c) {
		return {$: 'Vertical', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$drag = F2(
	function (info, layout) {
		if (layout.$ === 'Horizontal') {
			var status = layout.a;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, info.x / info.width, y);
		} else {
			var status = layout.a;
			var x = layout.b;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, info.y / info.height);
		}
	});
var $elm$browser$Debugger$History$Stepping = F2(
	function (a, b) {
		return {$: 'Stepping', a: a, b: b};
	});
var $elm$browser$Debugger$History$Done = F2(
	function (a, b) {
		return {$: 'Done', a: a, b: b};
	});
var $elm$browser$Debugger$History$getHelp = F3(
	function (update, msg, getResult) {
		if (getResult.$ === 'Done') {
			return getResult;
		} else {
			var n = getResult.a;
			var model = getResult.b;
			return (!n) ? A2(
				$elm$browser$Debugger$History$Done,
				msg,
				A2(update, msg, model).a) : A2(
				$elm$browser$Debugger$History$Stepping,
				n - 1,
				A2(update, msg, model).a);
		}
	});
var $elm$browser$Debugger$History$undone = function (getResult) {
	undone:
	while (true) {
		if (getResult.$ === 'Done') {
			var msg = getResult.a;
			var model = getResult.b;
			return _Utils_Tuple2(model, msg);
		} else {
			var $temp$getResult = getResult;
			getResult = $temp$getResult;
			continue undone;
		}
	}
};
var $elm$browser$Debugger$History$get = F3(
	function (update, index, history) {
		get:
		while (true) {
			var recent = history.recent;
			var snapshotMax = history.numMessages - recent.numMessages;
			if (_Utils_cmp(index, snapshotMax) > -1) {
				return $elm$browser$Debugger$History$undone(
					A3(
						$elm$core$List$foldr,
						$elm$browser$Debugger$History$getHelp(update),
						A2($elm$browser$Debugger$History$Stepping, index - snapshotMax, recent.model),
						recent.messages));
			} else {
				var _v0 = A2($elm$core$Array$get, (index / $elm$browser$Debugger$History$maxSnapshotSize) | 0, history.snapshots);
				if (_v0.$ === 'Nothing') {
					var $temp$update = update,
						$temp$index = index,
						$temp$history = history;
					update = $temp$update;
					index = $temp$index;
					history = $temp$history;
					continue get;
				} else {
					var model = _v0.a.model;
					var messages = _v0.a.messages;
					return $elm$browser$Debugger$History$undone(
						A3(
							$elm$core$Array$foldr,
							$elm$browser$Debugger$History$getHelp(update),
							A2($elm$browser$Debugger$History$Stepping, index % $elm$browser$Debugger$History$maxSnapshotSize, model),
							messages));
				}
			}
		}
	});
var $elm$browser$Debugger$History$getRecentMsg = function (history) {
	getRecentMsg:
	while (true) {
		var _v0 = history.recent.messages;
		if (!_v0.b) {
			var $temp$history = history;
			history = $temp$history;
			continue getRecentMsg;
		} else {
			var first = _v0.a;
			return first;
		}
	}
};
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$browser$Debugger$Expando$mergeDictHelp = F3(
	function (oldDict, key, value) {
		var _v12 = A2($elm$core$Dict$get, key, oldDict);
		if (_v12.$ === 'Nothing') {
			return value;
		} else {
			var oldValue = _v12.a;
			return A2($elm$browser$Debugger$Expando$mergeHelp, oldValue, value);
		}
	});
var $elm$browser$Debugger$Expando$mergeHelp = F2(
	function (old, _new) {
		var _v3 = _Utils_Tuple2(old, _new);
		_v3$6:
		while (true) {
			switch (_v3.b.$) {
				case 'S':
					return _new;
				case 'Primitive':
					return _new;
				case 'Sequence':
					if (_v3.a.$ === 'Sequence') {
						var _v4 = _v3.a;
						var isClosed = _v4.b;
						var oldValues = _v4.c;
						var _v5 = _v3.b;
						var seqType = _v5.a;
						var newValues = _v5.c;
						return A3(
							$elm$browser$Debugger$Expando$Sequence,
							seqType,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
				case 'Dictionary':
					if (_v3.a.$ === 'Dictionary') {
						var _v6 = _v3.a;
						var isClosed = _v6.a;
						var _v7 = _v3.b;
						var keyValuePairs = _v7.b;
						return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, keyValuePairs);
					} else {
						break _v3$6;
					}
				case 'Record':
					if (_v3.a.$ === 'Record') {
						var _v8 = _v3.a;
						var isClosed = _v8.a;
						var oldDict = _v8.b;
						var _v9 = _v3.b;
						var newDict = _v9.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A2(
								$elm$core$Dict$map,
								$elm$browser$Debugger$Expando$mergeDictHelp(oldDict),
								newDict));
					} else {
						break _v3$6;
					}
				default:
					if (_v3.a.$ === 'Constructor') {
						var _v10 = _v3.a;
						var isClosed = _v10.b;
						var oldValues = _v10.c;
						var _v11 = _v3.b;
						var maybeName = _v11.a;
						var newValues = _v11.c;
						return A3(
							$elm$browser$Debugger$Expando$Constructor,
							maybeName,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
			}
		}
		return _new;
	});
var $elm$browser$Debugger$Expando$mergeListHelp = F2(
	function (olds, news) {
		var _v0 = _Utils_Tuple2(olds, news);
		if (!_v0.a.b) {
			return news;
		} else {
			if (!_v0.b.b) {
				return news;
			} else {
				var _v1 = _v0.a;
				var x = _v1.a;
				var xs = _v1.b;
				var _v2 = _v0.b;
				var y = _v2.a;
				var ys = _v2.b;
				return A2(
					$elm$core$List$cons,
					A2($elm$browser$Debugger$Expando$mergeHelp, x, y),
					A2($elm$browser$Debugger$Expando$mergeListHelp, xs, ys));
			}
		}
	});
var $elm$browser$Debugger$Expando$merge = F2(
	function (value, expando) {
		return A2(
			$elm$browser$Debugger$Expando$mergeHelp,
			expando,
			_Debugger_init(value));
	});
var $elm$browser$Debugger$Main$jumpUpdate = F3(
	function (update, index, model) {
		var history = $elm$browser$Debugger$Main$cachedHistory(model);
		var currentMsg = $elm$browser$Debugger$History$getRecentMsg(history);
		var currentModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
		var _v0 = A3($elm$browser$Debugger$History$get, update, index, history);
		var indexModel = _v0.a;
		var indexMsg = _v0.b;
		return _Utils_update(
			model,
			{
				expandoModel: A2($elm$browser$Debugger$Expando$merge, indexModel, model.expandoModel),
				expandoMsg: A2($elm$browser$Debugger$Expando$merge, indexMsg, model.expandoMsg),
				state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, currentModel, currentMsg, history)
			});
	});
var $elm$browser$Debugger$History$jsToElm = A2($elm$core$Basics$composeR, _Json_unwrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$decoder = F2(
	function (initialModel, update) {
		var addMessage = F2(
			function (rawMsg, _v0) {
				var model = _v0.a;
				var history = _v0.b;
				var msg = $elm$browser$Debugger$History$jsToElm(rawMsg);
				return _Utils_Tuple2(
					A2(update, msg, model),
					A3($elm$browser$Debugger$History$add, msg, model, history));
			});
		var updateModel = function (rawMsgs) {
			return A3(
				$elm$core$List$foldl,
				addMessage,
				_Utils_Tuple2(
					initialModel,
					$elm$browser$Debugger$History$empty(initialModel)),
				rawMsgs);
		};
		return A2(
			$elm$json$Json$Decode$map,
			updateModel,
			$elm$json$Json$Decode$list($elm$json$Json$Decode$value));
	});
var $elm$browser$Debugger$History$getInitialModel = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	var _v1 = A2($elm$core$Array$get, 0, snapshots);
	if (_v1.$ === 'Just') {
		var model = _v1.a.model;
		return model;
	} else {
		return recent.model;
	}
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $elm$browser$Debugger$Main$loadNewHistory = F3(
	function (rawHistory, update, model) {
		var pureUserUpdate = F2(
			function (msg, userModel) {
				return A2(update, msg, userModel).a;
			});
		var initialUserModel = $elm$browser$Debugger$History$getInitialModel(model.history);
		var decoder = A2($elm$browser$Debugger$History$decoder, initialUserModel, pureUserUpdate);
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, rawHistory);
		if (_v0.$ === 'Err') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{overlay: $elm$browser$Debugger$Overlay$corruptImport}),
				$elm$core$Platform$Cmd$none);
		} else {
			var _v1 = _v0.a;
			var latestUserModel = _v1.a;
			var newHistory = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						expandoModel: $elm$browser$Debugger$Expando$init(latestUserModel),
						expandoMsg: $elm$browser$Debugger$Expando$init(
							$elm$browser$Debugger$History$getRecentMsg(newHistory)),
						history: newHistory,
						overlay: $elm$browser$Debugger$Overlay$none,
						state: $elm$browser$Debugger$Main$Running(latestUserModel)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$scroll = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
		_Debugger_scroll(popout));
};
var $elm$browser$Debugger$Main$scrollTo = F2(
	function (id, popout) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
			A2(_Debugger_scrollTo, id, popout));
	});
var $elm$browser$Debugger$Main$setDragStatus = F2(
	function (status, layout) {
		if (layout.$ === 'Horizontal') {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, x, y);
		} else {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, y);
		}
	});
var $elm$browser$Debugger$Main$swapLayout = function (layout) {
	if (layout.$ === 'Horizontal') {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Vertical, s, x, y);
	} else {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Horizontal, s, x, y);
	}
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$browser$Debugger$Expando$updateIndex = F3(
	function (n, func, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var x = list.a;
			var xs = list.b;
			return (n <= 0) ? A2(
				$elm$core$List$cons,
				func(x),
				xs) : A2(
				$elm$core$List$cons,
				x,
				A3($elm$browser$Debugger$Expando$updateIndex, n - 1, func, xs));
		}
	});
var $elm$browser$Debugger$Expando$update = F2(
	function (msg, value) {
		switch (value.$) {
			case 'S':
				return value;
			case 'Primitive':
				return value;
			case 'Sequence':
				var seqType = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Sequence, seqType, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v3 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Sequence,
								seqType,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
			case 'Dictionary':
				var isClosed = value.a;
				var keyValuePairs = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Dictionary, !isClosed, keyValuePairs);
					case 'Index':
						var redirect = msg.a;
						var index = msg.b;
						var subMsg = msg.c;
						switch (redirect.$) {
							case 'None':
								return value;
							case 'Key':
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v6) {
											var k = _v6.a;
											var v = _v6.b;
											return _Utils_Tuple2(
												A2($elm$browser$Debugger$Expando$update, subMsg, k),
												v);
										},
										keyValuePairs));
							default:
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v7) {
											var k = _v7.a;
											var v = _v7.b;
											return _Utils_Tuple2(
												k,
												A2($elm$browser$Debugger$Expando$update, subMsg, v));
										},
										keyValuePairs));
						}
					default:
						return value;
				}
			case 'Record':
				var isClosed = value.a;
				var valueDict = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Record, !isClosed, valueDict);
					case 'Index':
						return value;
					default:
						var field = msg.a;
						var subMsg = msg.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A3(
								$elm$core$Dict$update,
								field,
								$elm$browser$Debugger$Expando$updateField(subMsg),
								valueDict));
				}
			default:
				var maybeName = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Constructor, maybeName, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v10 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Constructor,
								maybeName,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
		}
	});
var $elm$browser$Debugger$Expando$updateField = F2(
	function (msg, maybeExpando) {
		if (maybeExpando.$ === 'Nothing') {
			return maybeExpando;
		} else {
			var expando = maybeExpando.a;
			return $elm$core$Maybe$Just(
				A2($elm$browser$Debugger$Expando$update, msg, expando));
		}
	});
var $elm$browser$Debugger$Main$Upload = function (a) {
	return {$: 'Upload', a: a};
};
var $elm$browser$Debugger$Main$upload = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$browser$Debugger$Main$Upload,
		_Debugger_upload(popout));
};
var $elm$browser$Debugger$Overlay$BadMetadata = function (a) {
	return {$: 'BadMetadata', a: a};
};
var $elm$browser$Debugger$Overlay$badMetadata = $elm$browser$Debugger$Overlay$BadMetadata;
var $elm$browser$Debugger$Main$withGoodMetadata = F2(
	function (model, func) {
		var _v0 = model.metadata;
		if (_v0.$ === 'Ok') {
			var metadata = _v0.a;
			return func(metadata);
		} else {
			var error = _v0.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						overlay: $elm$browser$Debugger$Overlay$badMetadata(error)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$wrapUpdate = F3(
	function (update, msg, model) {
		wrapUpdate:
		while (true) {
			switch (msg.$) {
				case 'NoOp':
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				case 'UserMsg':
					var userMsg = msg.a;
					var userModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
					var newHistory = A3($elm$browser$Debugger$History$add, userMsg, userModel, model.history);
					var _v1 = A2(update, userMsg, userModel);
					var newUserModel = _v1.a;
					var userCmds = _v1.b;
					var commands = A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCmds);
					var _v2 = model.state;
					if (_v2.$ === 'Running') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, newUserModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									history: newHistory,
									state: $elm$browser$Debugger$Main$Running(newUserModel)
								}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										commands,
										$elm$browser$Debugger$Main$scroll(model.popout)
									])));
					} else {
						var index = _v2.a;
						var indexModel = _v2.b;
						var history = _v2.e;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									history: newHistory,
									state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, newUserModel, userMsg, history)
								}),
							commands);
					}
				case 'TweakExpandoMsg':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoMsg: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoMsg)
							}),
						$elm$core$Platform$Cmd$none);
				case 'TweakExpandoModel':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoModel: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoModel)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Resume':
					var _v3 = model.state;
					if (_v3.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var userModel = _v3.c;
						var userMsg = _v3.d;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, userModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									state: $elm$browser$Debugger$Main$Running(userModel)
								}),
							$elm$browser$Debugger$Main$scroll(model.popout));
					}
				case 'Jump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						$elm$core$Platform$Cmd$none);
				case 'SliderJump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						A2(
							$elm$browser$Debugger$Main$scrollTo,
							$elm$browser$Debugger$History$idForMessageIndex(index),
							model.popout));
				case 'Open':
					return _Utils_Tuple2(
						model,
						A2(
							$elm$core$Task$perform,
							$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
							_Debugger_open(model.popout)));
				case 'Up':
					var _v4 = model.state;
					if (_v4.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var i = _v4.a;
						var history = _v4.e;
						var targetIndex = i + 1;
						if (_Utils_cmp(
							targetIndex,
							$elm$browser$Debugger$History$size(history)) < 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(targetIndex),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$Resume,
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						}
					}
				case 'Down':
					var _v5 = model.state;
					if (_v5.$ === 'Running') {
						var $temp$update = update,
							$temp$msg = $elm$browser$Debugger$Main$Jump(
							$elm$browser$Debugger$History$size(model.history) - 1),
							$temp$model = model;
						update = $temp$update;
						msg = $temp$msg;
						model = $temp$model;
						continue wrapUpdate;
					} else {
						var index = _v5.a;
						if (index > 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(index - 1),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				case 'Import':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (_v6) {
							return _Utils_Tuple2(
								model,
								$elm$browser$Debugger$Main$upload(model.popout));
						});
				case 'Export':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							return _Utils_Tuple2(
								model,
								A2($elm$browser$Debugger$Main$download, metadata, model.history));
						});
				case 'Upload':
					var jsonString = msg.a;
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							var _v7 = A2($elm$browser$Debugger$Overlay$assessImport, metadata, jsonString);
							if (_v7.$ === 'Err') {
								var newOverlay = _v7.a;
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{overlay: newOverlay}),
									$elm$core$Platform$Cmd$none);
							} else {
								var rawHistory = _v7.a;
								return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
							}
						});
				case 'OverlayMsg':
					var overlayMsg = msg.a;
					var _v8 = A2($elm$browser$Debugger$Overlay$close, overlayMsg, model.overlay);
					if (_v8.$ === 'Nothing') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{overlay: $elm$browser$Debugger$Overlay$none}),
							$elm$core$Platform$Cmd$none);
					} else {
						var rawHistory = _v8.a;
						return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
					}
				case 'SwapLayout':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: $elm$browser$Debugger$Main$swapLayout(model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'DragStart':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Moving, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Drag':
					var info = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$drag, info, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				default:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Static, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
			}
		}
	});
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$browser$Browser$application = _Browser_application;
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $dillonkearns$elm_pages$Pages$ContentCache$ContentJson = F4(
	function (staticData, is404, path, notFoundReason) {
		return {is404: is404, notFoundReason: notFoundReason, path: path, staticData: staticData};
	});
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$Payload = F2(
	function (path, reason) {
		return {path: path, reason: reason};
	});
var $miniBill$elm_codec$Codec$Codec = function (a) {
	return {$: 'Codec', a: a};
};
var $miniBill$elm_codec$Codec$buildObject = function (_v0) {
	var om = _v0.a;
	return $miniBill$elm_codec$Codec$Codec(
		{
			decoder: om.decoder,
			encoder: function (v) {
				return $elm$json$Json$Encode$object(
					om.encoder(v));
			}
		});
};
var $miniBill$elm_codec$Codec$ObjectCodec = function (a) {
	return {$: 'ObjectCodec', a: a};
};
var $miniBill$elm_codec$Codec$decoder = function (_v0) {
	var m = _v0.a;
	return m.decoder;
};
var $miniBill$elm_codec$Codec$encoder = function (_v0) {
	var m = _v0.a;
	return m.encoder;
};
var $miniBill$elm_codec$Codec$field = F4(
	function (name, getter, codec, _v0) {
		var ocodec = _v0.a;
		return $miniBill$elm_codec$Codec$ObjectCodec(
			{
				decoder: A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (f, x) {
							return f(x);
						}),
					ocodec.decoder,
					A2(
						$elm$json$Json$Decode$field,
						name,
						$miniBill$elm_codec$Codec$decoder(codec))),
				encoder: function (v) {
					return A2(
						$elm$core$List$cons,
						_Utils_Tuple2(
							name,
							A2(
								$miniBill$elm_codec$Codec$encoder,
								codec,
								getter(v))),
						ocodec.encoder(v));
				}
			});
	});
var $dillonkearns$elm_pages$Path$Path = function (a) {
	return {$: 'Path', a: a};
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$String$endsWith = _String_endsWith;
var $dillonkearns$elm_pages$Pages$Internal$String$chopEnd = F2(
	function (needle, string) {
		chopEnd:
		while (true) {
			if (A2($elm$core$String$endsWith, needle, string)) {
				var $temp$needle = needle,
					$temp$string = A2(
					$elm$core$String$dropRight,
					$elm$core$String$length(needle),
					string);
				needle = $temp$needle;
				string = $temp$string;
				continue chopEnd;
			} else {
				return string;
			}
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$String$chopStart = F2(
	function (needle, string) {
		chopStart:
		while (true) {
			if (A2($elm$core$String$startsWith, needle, string)) {
				var $temp$needle = needle,
					$temp$string = A2(
					$elm$core$String$dropLeft,
					$elm$core$String$length(needle),
					string);
				needle = $temp$needle;
				string = $temp$string;
				continue chopStart;
			} else {
				return string;
			}
		}
	});
var $dillonkearns$elm_pages$Path$normalize = function (pathPart) {
	return A2(
		$dillonkearns$elm_pages$Pages$Internal$String$chopStart,
		'/',
		A2($dillonkearns$elm_pages$Pages$Internal$String$chopEnd, '/', pathPart));
};
var $dillonkearns$elm_pages$Path$join = function (parts) {
	return $dillonkearns$elm_pages$Path$Path(
		A2(
			$elm$core$String$join,
			'/',
			A2($elm$core$List$map, $dillonkearns$elm_pages$Path$normalize, parts)));
};
var $miniBill$elm_codec$Codec$composite = F3(
	function (enc, dec, _v0) {
		var codec = _v0.a;
		return $miniBill$elm_codec$Codec$Codec(
			{
				decoder: dec(codec.decoder),
				encoder: enc(codec.encoder)
			});
	});
var $miniBill$elm_codec$Codec$list = A2($miniBill$elm_codec$Codec$composite, $elm$json$Json$Encode$list, $elm$json$Json$Decode$list);
var $miniBill$elm_codec$Codec$map = F3(
	function (go, back, codec) {
		return $miniBill$elm_codec$Codec$Codec(
			{
				decoder: A2(
					$elm$json$Json$Decode$map,
					go,
					$miniBill$elm_codec$Codec$decoder(codec)),
				encoder: function (v) {
					return A2(
						$miniBill$elm_codec$Codec$encoder,
						codec,
						back(v));
				}
			});
	});
var $miniBill$elm_codec$Codec$object = function (ctor) {
	return $miniBill$elm_codec$Codec$ObjectCodec(
		{
			decoder: $elm$json$Json$Decode$succeed(ctor),
			encoder: function (_v0) {
				return _List_Nil;
			}
		});
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NoMatchingRoute = {$: 'NoMatchingRoute'};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered = F2(
	function (a, b) {
		return {$: 'NotPrerendered', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerenderedOrHandledByFallback = F2(
	function (a, b) {
		return {$: 'NotPrerenderedOrHandledByFallback', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$UnhandledServerRoute = function (a) {
	return {$: 'UnhandledServerRoute', a: a};
};
var $elm$json$Json$Decode$fail = _Json_fail;
var $miniBill$elm_codec$Codec$buildCustom = function (_v0) {
	var am = _v0.a;
	return $miniBill$elm_codec$Codec$Codec(
		{
			decoder: A2(
				$elm$json$Json$Decode$andThen,
				function (tag) {
					var _v1 = A2($elm$core$Dict$get, tag, am.decoder);
					if (_v1.$ === 'Nothing') {
						return $elm$json$Json$Decode$fail('tag ' + (tag + 'did not match'));
					} else {
						var dec = _v1.a;
						return A2($elm$json$Json$Decode$field, 'args', dec);
					}
				},
				A2($elm$json$Json$Decode$field, 'tag', $elm$json$Json$Decode$string)),
			encoder: function (v) {
				return am.match(v);
			}
		});
};
var $miniBill$elm_codec$Codec$CustomCodec = function (a) {
	return {$: 'CustomCodec', a: a};
};
var $miniBill$elm_codec$Codec$custom = function (match) {
	return $miniBill$elm_codec$Codec$CustomCodec(
		{decoder: $elm$core$Dict$empty, match: match});
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$ModuleContext = F3(
	function (moduleName, routePattern, matchedRouteParams) {
		return {matchedRouteParams: matchedRouteParams, moduleName: moduleName, routePattern: routePattern};
	});
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$RoutePattern = F2(
	function (segments, ending) {
		return {ending: ending, segments: segments};
	});
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$Optional = function (a) {
	return {$: 'Optional', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$OptionalSplat = {$: 'OptionalSplat'};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$RequiredSplat = {$: 'RequiredSplat'};
var $miniBill$elm_codec$Codec$build = F2(
	function (encoder_, decoder_) {
		return $miniBill$elm_codec$Codec$Codec(
			{decoder: decoder_, encoder: encoder_});
	});
var $miniBill$elm_codec$Codec$string = A2($miniBill$elm_codec$Codec$build, $elm$json$Json$Encode$string, $elm$json$Json$Decode$string);
var $miniBill$elm_codec$Codec$variant = F4(
	function (name, matchPiece, decoderPiece, _v0) {
		var am = _v0.a;
		var enc = function (v) {
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'tag',
						$elm$json$Json$Encode$string(name)),
						_Utils_Tuple2(
						'args',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, v))
					]));
		};
		return $miniBill$elm_codec$Codec$CustomCodec(
			{
				decoder: A3($elm$core$Dict$insert, name, decoderPiece, am.decoder),
				match: am.match(
					matchPiece(enc))
			});
	});
var $miniBill$elm_codec$Codec$variant0 = F2(
	function (name, ctor) {
		return A3(
			$miniBill$elm_codec$Codec$variant,
			name,
			function (c) {
				return c(_List_Nil);
			},
			$elm$json$Json$Decode$succeed(ctor));
	});
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $miniBill$elm_codec$Codec$variant1 = F3(
	function (name, ctor, m1) {
		return A3(
			$miniBill$elm_codec$Codec$variant,
			name,
			F2(
				function (c, v) {
					return c(
						_List_fromArray(
							[
								A2($miniBill$elm_codec$Codec$encoder, m1, v)
							]));
				}),
			A2(
				$elm$json$Json$Decode$map,
				ctor,
				A2(
					$elm$json$Json$Decode$index,
					0,
					$miniBill$elm_codec$Codec$decoder(m1))));
	});
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$endingCodec = $miniBill$elm_codec$Codec$buildCustom(
	A3(
		$miniBill$elm_codec$Codec$variant0,
		'OptionalSplat',
		$dillonkearns$elm_pages$Pages$Internal$RoutePattern$OptionalSplat,
		A3(
			$miniBill$elm_codec$Codec$variant0,
			'RequiredSplat',
			$dillonkearns$elm_pages$Pages$Internal$RoutePattern$RequiredSplat,
			A4(
				$miniBill$elm_codec$Codec$variant1,
				'Optional',
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$Optional,
				$miniBill$elm_codec$Codec$string,
				$miniBill$elm_codec$Codec$custom(
					F4(
						function (vOptional, vRequiredSplat, vOptionalSplat, value) {
							switch (value.$) {
								case 'Optional':
									var string = value.a;
									return vOptional(string);
								case 'RequiredSplat':
									return vRequiredSplat;
								default:
									return vOptionalSplat;
							}
						}))))));
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $miniBill$elm_codec$Codec$maybe = function (codec) {
	return $miniBill$elm_codec$Codec$Codec(
		{
			decoder: $elm$json$Json$Decode$maybe(
				$miniBill$elm_codec$Codec$decoder(codec)),
			encoder: function (v) {
				if (v.$ === 'Nothing') {
					return $elm$json$Json$Encode$null;
				} else {
					var x = v.a;
					return A2($miniBill$elm_codec$Codec$encoder, codec, x);
				}
			}
		});
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment = function (a) {
	return {$: 'DynamicSegment', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment = function (a) {
	return {$: 'StaticSegment', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentCodec = $miniBill$elm_codec$Codec$buildCustom(
	A4(
		$miniBill$elm_codec$Codec$variant1,
		'DynamicSegment',
		$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment,
		$miniBill$elm_codec$Codec$string,
		A4(
			$miniBill$elm_codec$Codec$variant1,
			'StaticSegment',
			$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment,
			$miniBill$elm_codec$Codec$string,
			$miniBill$elm_codec$Codec$custom(
				F3(
					function (vStatic, vDynamic, value) {
						if (value.$ === 'StaticSegment') {
							var string = value.a;
							return vStatic(string);
						} else {
							var string = value.a;
							return vDynamic(string);
						}
					})))));
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$codec = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'ending',
		function ($) {
			return $.ending;
		},
		$miniBill$elm_codec$Codec$maybe($dillonkearns$elm_pages$Pages$Internal$RoutePattern$endingCodec),
		A4(
			$miniBill$elm_codec$Codec$field,
			'segments',
			function ($) {
				return $.segments;
			},
			$miniBill$elm_codec$Codec$list($dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentCodec),
			$miniBill$elm_codec$Codec$object($dillonkearns$elm_pages$Pages$Internal$RoutePattern$RoutePattern))));
var $miniBill$elm_codec$Codec$tuple = F2(
	function (m1, m2) {
		return $miniBill$elm_codec$Codec$Codec(
			{
				decoder: A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (a, b) {
							return _Utils_Tuple2(a, b);
						}),
					A2(
						$elm$json$Json$Decode$index,
						0,
						$miniBill$elm_codec$Codec$decoder(m1)),
					A2(
						$elm$json$Json$Decode$index,
						1,
						$miniBill$elm_codec$Codec$decoder(m2))),
				encoder: function (_v0) {
					var v1 = _v0.a;
					var v2 = _v0.b;
					return A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								A2($miniBill$elm_codec$Codec$encoder, m1, v1),
								A2($miniBill$elm_codec$Codec$encoder, m2, v2)
							]));
				}
			});
	});
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordCodec = $miniBill$elm_codec$Codec$list(
	A2($miniBill$elm_codec$Codec$tuple, $miniBill$elm_codec$Codec$string, $miniBill$elm_codec$Codec$string));
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleContextCodec = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'matchedRouteParams',
		function ($) {
			return $.matchedRouteParams;
		},
		$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordCodec,
		A4(
			$miniBill$elm_codec$Codec$field,
			'routePattern',
			function ($) {
				return $.routePattern;
			},
			$dillonkearns$elm_pages$Pages$Internal$RoutePattern$codec,
			A4(
				$miniBill$elm_codec$Codec$field,
				'moduleName',
				function ($) {
					return $.moduleName;
				},
				$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string),
				$miniBill$elm_codec$Codec$object($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$ModuleContext)))));
var $miniBill$elm_codec$Codec$variant2 = F4(
	function (name, ctor, m1, m2) {
		return A3(
			$miniBill$elm_codec$Codec$variant,
			name,
			F3(
				function (c, v1, v2) {
					return c(
						_List_fromArray(
							[
								A2($miniBill$elm_codec$Codec$encoder, m1, v1),
								A2($miniBill$elm_codec$Codec$encoder, m2, v2)
							]));
				}),
			A3(
				$elm$json$Json$Decode$map2,
				ctor,
				A2(
					$elm$json$Json$Decode$index,
					0,
					$miniBill$elm_codec$Codec$decoder(m1)),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$miniBill$elm_codec$Codec$decoder(m2))));
	});
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$reasonCodec = $miniBill$elm_codec$Codec$buildCustom(
	A4(
		$miniBill$elm_codec$Codec$variant1,
		'UnhandledServerRoute',
		$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$UnhandledServerRoute,
		$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleContextCodec,
		A5(
			$miniBill$elm_codec$Codec$variant2,
			'NotPrerenderedOrHandledByFallback',
			$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerenderedOrHandledByFallback,
			$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleContextCodec,
			$miniBill$elm_codec$Codec$list($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordCodec),
			A5(
				$miniBill$elm_codec$Codec$variant2,
				'NotPrerendered',
				$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered,
				$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleContextCodec,
				$miniBill$elm_codec$Codec$list($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordCodec),
				A3(
					$miniBill$elm_codec$Codec$variant0,
					'NoMatchingRoute',
					$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NoMatchingRoute,
					$miniBill$elm_codec$Codec$custom(
						F5(
							function (vNoMatchingRoute, vNotPrerendered, vNotPrerenderedOrHandledByFallback, vUnhandledServerRoute, value) {
								switch (value.$) {
									case 'NoMatchingRoute':
										return vNoMatchingRoute;
									case 'NotPrerendered':
										var moduleContext = value.a;
										var prerenderedRoutes = value.b;
										return A2(vNotPrerendered, moduleContext, prerenderedRoutes);
									case 'NotPrerenderedOrHandledByFallback':
										var moduleContext = value.a;
										var prerenderedRoutes = value.b;
										return A2(vNotPrerenderedOrHandledByFallback, moduleContext, prerenderedRoutes);
									default:
										var moduleContext = value.a;
										return vUnhandledServerRoute(moduleContext);
								}
							})))))));
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $dillonkearns$elm_pages$Path$toSegments = function (_v0) {
	var path = _v0.a;
	return A2(
		$elm$core$List$filter,
		$elm$core$Basics$neq(''),
		A2($elm$core$String$split, '/', path));
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$codec = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'reason',
		function ($) {
			return $.reason;
		},
		$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$reasonCodec,
		A4(
			$miniBill$elm_codec$Codec$field,
			'path',
			function ($) {
				return $.path;
			},
			A3(
				$miniBill$elm_codec$Codec$map,
				$dillonkearns$elm_pages$Path$join,
				$dillonkearns$elm_pages$Path$toSegments,
				$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string)),
			$miniBill$elm_codec$Codec$object($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$Payload))));
var $dillonkearns$elm_pages$RequestsAndPending$decoder = $elm$json$Json$Decode$dict(
	A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$string));
var $elm$json$Json$Decode$map4 = _Json_map4;
var $dillonkearns$elm_pages$Pages$ContentCache$contentJsonDecoder = A2(
	$elm$json$Json$Decode$andThen,
	function (is404Value) {
		return is404Value ? A5(
			$elm$json$Json$Decode$map4,
			$dillonkearns$elm_pages$Pages$ContentCache$ContentJson,
			$elm$json$Json$Decode$succeed($elm$core$Dict$empty),
			$elm$json$Json$Decode$succeed(is404Value),
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Maybe$Just,
				A2($elm$json$Json$Decode$field, 'path', $elm$json$Json$Decode$string)),
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['staticData', 'notFoundReason']),
				A2(
					$elm$json$Json$Decode$andThen,
					function (jsonString) {
						var _v0 = A2(
							$elm$json$Json$Decode$decodeString,
							A2(
								$elm$json$Json$Decode$map,
								$elm$core$Maybe$Just,
								$miniBill$elm_codec$Codec$decoder($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$codec)),
							jsonString);
						if (_v0.$ === 'Ok') {
							var okValue = _v0.a;
							return $elm$json$Json$Decode$succeed(okValue);
						} else {
							var error = _v0.a;
							return $elm$json$Json$Decode$fail(
								$elm$json$Json$Decode$errorToString(error));
						}
					},
					$elm$json$Json$Decode$string))) : A5(
			$elm$json$Json$Decode$map4,
			$dillonkearns$elm_pages$Pages$ContentCache$ContentJson,
			A2($elm$json$Json$Decode$field, 'staticData', $dillonkearns$elm_pages$RequestsAndPending$decoder),
			$elm$json$Json$Decode$succeed(is404Value),
			$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing),
			$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing));
	},
	A2($elm$json$Json$Decode$field, 'is404', $elm$json$Json$Decode$bool));
var $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser = {$: 'Browser'};
var $dillonkearns$elm_pages$Pages$Flags$BrowserFlags = function (a) {
	return {$: 'BrowserFlags', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCache = function (a) {
	return {$: 'UpdateCache', a: a};
};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $vito$elm_ansi$Ansi$Cyan = {$: 'Cyan'};
var $dillonkearns$elm_pages$TerminalText$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $dillonkearns$elm_pages$TerminalText$blankStyle = {bold: false, color: $elm$core$Maybe$Nothing, underline: false};
var $dillonkearns$elm_pages$TerminalText$cyan = function (inner) {
	return A2(
		$dillonkearns$elm_pages$TerminalText$Style,
		_Utils_update(
			$dillonkearns$elm_pages$TerminalText$blankStyle,
			{
				color: $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Cyan)
			}),
		inner);
};
var $dillonkearns$elm_pages$TerminalText$text = function (value) {
	return A2($dillonkearns$elm_pages$TerminalText$Style, $dillonkearns$elm_pages$TerminalText$blankStyle, value);
};
var $elm$core$String$toUpper = _String_toUpper;
var $dillonkearns$elm_pages$BuildError$banner = function (title) {
	return _List_fromArray(
		[
			$dillonkearns$elm_pages$TerminalText$cyan(
			'-- ' + ($elm$core$String$toUpper(title) + ' ----------------------------------------------------- elm-pages')),
			$dillonkearns$elm_pages$TerminalText$text('\n\n')
		]);
};
var $vito$elm_ansi$Ansi$White = {$: 'White'};
var $dillonkearns$elm_pages$TerminalText$ansiPrefix = '\u001B';
var $dillonkearns$elm_pages$TerminalText$ansi = function (code) {
	return _Utils_ap($dillonkearns$elm_pages$TerminalText$ansiPrefix, code);
};
var $dillonkearns$elm_pages$TerminalText$colorToString = function (color) {
	return $dillonkearns$elm_pages$TerminalText$ansi(
		function () {
			switch (color.$) {
				case 'Red':
					return '[31m';
				case 'Blue':
					return '[34m';
				case 'Green':
					return '[32m';
				case 'Yellow':
					return '[33m';
				case 'Cyan':
					return '[36m';
				default:
					return '';
			}
		}());
};
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $dillonkearns$elm_pages$TerminalText$resetColors = $dillonkearns$elm_pages$TerminalText$ansi('[0m');
var $dillonkearns$elm_pages$TerminalText$toString_ = function (_v0) {
	var ansiStyle = _v0.a;
	var innerText = _v0.b;
	return $elm$core$String$concat(
		_List_fromArray(
			[
				$dillonkearns$elm_pages$TerminalText$colorToString(
				A2($elm$core$Maybe$withDefault, $vito$elm_ansi$Ansi$White, ansiStyle.color)),
				innerText,
				$dillonkearns$elm_pages$TerminalText$resetColors
			]));
};
var $dillonkearns$elm_pages$TerminalText$toString = function (list) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $dillonkearns$elm_pages$TerminalText$toString_, list));
};
var $dillonkearns$elm_pages$BuildError$errorToString = function (error) {
	return $dillonkearns$elm_pages$TerminalText$toString(
		_Utils_ap(
			$dillonkearns$elm_pages$BuildError$banner(error.title),
			error.message));
};
var $dillonkearns$elm_pages$Path$fromString = function (path) {
	return $dillonkearns$elm_pages$Path$Path(
		$dillonkearns$elm_pages$Path$normalize(path));
};
var $dillonkearns$elm_pages$QueryParams$QueryParams = function (a) {
	return {$: 'QueryParams', a: a};
};
var $dillonkearns$elm_pages$QueryParams$fromString = $dillonkearns$elm_pages$QueryParams$QueryParams;
var $dillonkearns$elm_pages$Pages$ContentCache$Parsed = function (a) {
	return {$: 'Parsed', a: a};
};
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $dillonkearns$elm_pages$Pages$ContentCache$init = function (maybeInitialPageContent) {
	if (maybeInitialPageContent.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var _v1 = maybeInitialPageContent.a;
		var urls = _v1.a;
		var contentJson = _v1.b;
		return A2(
			$elm$core$Dict$singleton,
			urls,
			$dillonkearns$elm_pages$Pages$ContentCache$Parsed(contentJson));
	}
};
var $elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $elm$http$Http$NetworkError = {$: 'NetworkError'};
var $elm$http$Http$Timeout = {$: 'Timeout'};
var $elm$core$String$append = _String_append;
var $dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes = A2(
	$elm$core$Basics$composeR,
	$dillonkearns$elm_pages$Pages$Internal$String$chopStart('/'),
	$dillonkearns$elm_pages$Pages$Internal$String$chopEnd('/'));
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var $elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var $elm$http$Http$Timeout_ = {$: 'Timeout_'};
var $elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$stringResolver = A2(_Http_expect, '', $elm$core$Basics$identity);
var $elm$core$Task$fail = _Scheduler_fail;
var $elm$http$Http$resultToTask = function (result) {
	if (result.$ === 'Ok') {
		var a = result.a;
		return $elm$core$Task$succeed(a);
	} else {
		var x = result.a;
		return $elm$core$Task$fail(x);
	}
};
var $elm$http$Http$task = function (r) {
	return A3(
		_Http_toTask,
		_Utils_Tuple0,
		$elm$http$Http$resultToTask,
		{allowCookiesFromOtherDomains: false, body: r.body, expect: r.resolver, headers: r.headers, method: r.method, timeout: r.timeout, tracker: $elm$core$Maybe$Nothing, url: r.url});
};
var $dillonkearns$elm_pages$Pages$ContentCache$httpTask = function (url) {
	return $elm$http$Http$task(
		{
			body: $elm$http$Http$emptyBody,
			headers: _List_Nil,
			method: 'GET',
			resolver: $elm$http$Http$stringResolver(
				function (response) {
					switch (response.$) {
						case 'BadUrl_':
							var url_ = response.a;
							return $elm$core$Result$Err(
								$elm$http$Http$BadUrl(url_));
						case 'Timeout_':
							return $elm$core$Result$Err($elm$http$Http$Timeout);
						case 'NetworkError_':
							return $elm$core$Result$Err($elm$http$Http$NetworkError);
						case 'BadStatus_':
							var metadata = response.a;
							return $elm$core$Result$Err(
								$elm$http$Http$BadStatus(metadata.statusCode));
						default:
							var body = response.b;
							return A2(
								$elm$core$Result$mapError,
								function (err) {
									return $elm$http$Http$BadBody(
										$elm$json$Json$Decode$errorToString(err));
								},
								A2($elm$json$Json$Decode$decodeString, $dillonkearns$elm_pages$Pages$ContentCache$contentJsonDecoder, body));
					}
				}),
			timeout: $elm$core$Maybe$Nothing,
			url: A2(
				$elm$core$String$append,
				'/',
				A2(
					$elm$core$String$join,
					'/',
					function (l) {
						return _Utils_ap(
							l,
							_List_fromArray(
								['content.json']));
					}(
						A2(
							$elm$core$List$filter,
							$elm$core$Basics$neq(''),
							A2(
								$elm$core$String$split,
								'/',
								$dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes(url.path))))))
		});
};
var $dillonkearns$elm_pages$Pages$ContentCache$pathForUrl = function (_v0) {
	var currentUrl = _v0.currentUrl;
	var basePath = _v0.basePath;
	return A2(
		$elm$core$List$drop,
		$elm$core$List$length(basePath),
		A2(
			$elm$core$List$filter,
			$elm$core$Basics$neq(''),
			A2(
				$elm$core$String$split,
				'/',
				$dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes(currentUrl.path))));
};
var $dillonkearns$elm_pages$Pages$ContentCache$update = F3(
	function (cache, urls, rawContent) {
		return A3(
			$elm$core$Dict$update,
			$dillonkearns$elm_pages$Pages$ContentCache$pathForUrl(urls),
			function (entry) {
				if (entry.$ === 'Just') {
					return entry;
				} else {
					return $elm$core$Maybe$Just(
						$dillonkearns$elm_pages$Pages$ContentCache$Parsed(
							{is404: rawContent.is404, notFoundReason: rawContent.notFoundReason, path: rawContent.path, staticData: rawContent.staticData}));
				}
			},
			cache);
	});
var $dillonkearns$elm_pages$Pages$ContentCache$lazyLoad = F2(
	function (urls, cache) {
		var _v0 = A2(
			$elm$core$Dict$get,
			$dillonkearns$elm_pages$Pages$ContentCache$pathForUrl(urls),
			cache);
		if (_v0.$ === 'Just') {
			var contentJson = _v0.a.a;
			return $elm$core$Task$succeed(
				_Utils_Tuple3(urls.currentUrl, contentJson, cache));
		} else {
			return A2(
				$elm$core$Task$map,
				function (downloadedContent) {
					return _Utils_Tuple3(
						urls.currentUrl,
						downloadedContent,
						A3($dillonkearns$elm_pages$Pages$ContentCache$update, cache, urls, downloadedContent));
				},
				$dillonkearns$elm_pages$Pages$ContentCache$httpTask(urls.currentUrl));
		}
	});
var $elm$html$Html$br = _VirtualDom_node('br');
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleName = function (moduleContext) {
	return A2(
		$elm$core$String$join,
		'/',
		A2($elm$core$List$cons, 'src', moduleContext.moduleName)) + '.elm';
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString = function (fields) {
	return '{ ' + (A2(
		$elm$core$String$join,
		', ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var key = _v0.a;
				var value = _v0.b;
				return key + (' = ' + value);
			},
			fields)) + ' }');
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$prerenderedOptionsView = F2(
	function (moduleContext, routes) {
		if (!routes.b) {
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						$elm$html$Html$text('But this Page module has no pre-rendered routes! If you want to pre-render this page, add these '),
						A2(
						$elm$html$Html$code,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('RouteParams')
							])),
						$elm$html$Html$text(' to the module\'s '),
						A2(
						$elm$html$Html$code,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('routes')
							])),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2(
						$elm$html$Html$code,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'border-bottom', 'dotted 2px'),
								A2($elm$html$Html$Attributes$style, 'font-weight', 'bold')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString(moduleContext.matchedRouteParams))
							]))
					]));
		} else {
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						$elm$html$Html$text(' but these RouteParams were not present '),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2(
						$elm$html$Html$code,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'border-bottom', 'dotted 2px'),
								A2($elm$html$Html$Attributes$style, 'font-weight', 'bold')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString(moduleContext.matchedRouteParams))
							])),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						$elm$html$Html$text('The following RouteParams are pre-rendered:'),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'padding-top', '30px')
							]),
						A2(
							$elm$core$List$map,
							function (record) {
								return A2(
									$elm$html$Html$li,
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'list-style', 'inside')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$code,
											_List_Nil,
											_List_fromArray(
												[
													$elm$html$Html$text(
													$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString(record))
												]))
										]));
							},
							routes)),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Try changing '),
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('routes')
									])),
								$elm$html$Html$text(' in '),
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleName(moduleContext))
									])),
								$elm$html$Html$text(' to make sure it includes these '),
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('RouteParams')
									])),
								$elm$html$Html$text('.')
							]))
					]));
		}
	});
var $dillonkearns$elm_pages$Path$toAbsolute = function (_v0) {
	var path = _v0.a;
	return '/' + path;
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentToString = function (segment) {
	if (segment.$ === 'StaticSegment') {
		var string = segment.a;
		return string;
	} else {
		var name = segment.a;
		return ':' + name;
	}
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_ = function (segments) {
	return '/' + A2(
		$elm$core$String$join,
		'/',
		A2($elm$core$List$map, $dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentToString, segments));
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$view = function (routePattern) {
	return A2(
		$elm$html$Html$span,
		_List_Nil,
		function () {
			var _v0 = routePattern.ending;
			if (_v0.$ === 'Nothing') {
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$code,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments))
							]))
					]);
			} else {
				switch (_v0.a.$) {
					case 'Optional':
						var optionalName = _v0.a.a;
						return _List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments))
									])),
								$elm$html$Html$text(' or '),
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments) + ('/:' + optionalName))
									]))
							]);
					case 'RequiredSplat':
						var _v1 = _v0.a;
						return _List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments))
									]))
							]);
					default:
						var _v2 = _v0.a;
						return _List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments))
									]))
							]);
				}
			}
		}());
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$document = F2(
	function (pathPatterns, payload) {
		return {
			body: A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$id('not-found-reason'),
						A2($elm$html$Html$Attributes$style, 'padding', '30px')
					]),
				function () {
					var _v0 = payload.reason;
					switch (_v0.$) {
						case 'NoMatchingRoute':
							return _List_fromArray(
								[
									$elm$html$Html$text('No route found for '),
									A2(
									$elm$html$Html$code,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											$dillonkearns$elm_pages$Path$toAbsolute(payload.path))
										])),
									$elm$html$Html$text(' Did you mean to go to one of these routes:'),
									A2(
									$elm$html$Html$ul,
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'padding-top', '30px')
										]),
									A2(
										$elm$core$List$map,
										function (route) {
											return A2(
												$elm$html$Html$li,
												_List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'list-style', 'inside')
													]),
												_List_fromArray(
													[
														$dillonkearns$elm_pages$Pages$Internal$RoutePattern$view(route)
													]));
										},
										pathPatterns))
								]);
						case 'NotPrerendered':
							var moduleContext = _v0.a;
							var routes = _v0.b;
							return _List_fromArray(
								[
									A2(
									$elm$html$Html$h1,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Page Not Found')
										])),
									A2(
									$elm$html$Html$code,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											$dillonkearns$elm_pages$Path$toAbsolute(payload.path))
										])),
									$elm$html$Html$text(' successfully matched the route '),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2(
									$elm$html$Html$code,
									_List_Nil,
									_List_fromArray(
										[
											$dillonkearns$elm_pages$Pages$Internal$RoutePattern$view(moduleContext.routePattern)
										])),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									$elm$html$Html$text(' from the Page Module '),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2(
									$elm$html$Html$code,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleName(moduleContext))
										])),
									A2($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$prerenderedOptionsView, moduleContext, routes)
								]);
						default:
							return _List_fromArray(
								[
									$elm$html$Html$text('Page not found'),
									$elm$html$Html$text('TODO')
								]);
					}
				}()),
			title: 'Page not found'
		};
	});
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_pages$Pages$ContentCache$notFoundReason = F2(
	function (dict, urls) {
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$core$Maybe$Nothing,
			A2(
				$elm$core$Maybe$map,
				function (entry) {
					var data = entry.a;
					return data.notFoundReason;
				},
				A2(
					$elm$core$Dict$get,
					$dillonkearns$elm_pages$Pages$ContentCache$pathForUrl(urls),
					dict)));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$mainView = F2(
	function (config, model) {
		var urls = {basePath: config.basePath, currentUrl: model.url};
		var _v0 = A2($dillonkearns$elm_pages$Pages$ContentCache$notFoundReason, model.contentCache, urls);
		if (_v0.$ === 'Just') {
			var notFoundReason = _v0.a;
			return A2($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$document, config.pathPatterns, notFoundReason);
		} else {
			var _v1 = model.pageData;
			if (_v1.$ === 'Ok') {
				var pageData = _v1.a;
				return A4(
					config.view,
					{
						path: $dillonkearns$elm_pages$Path$join(
							$dillonkearns$elm_pages$Pages$ContentCache$pathForUrl(urls)),
						route: config.urlToRoute(model.url)
					},
					$elm$core$Maybe$Nothing,
					pageData.sharedData,
					pageData.pageData).view(pageData.userModel);
			} else {
				var error = _v1.a;
				return {
					body: A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(error)
							])),
					title: 'Page Data Error'
				};
			}
		}
	});
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $dillonkearns$elm_pages$KeepOrDiscard$Keep = {$: 'Keep'};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve = F3(
	function (appType, request, rawResponses) {
		resolve:
		while (true) {
			switch (request.$) {
				case 'RequestError':
					var error = request.a;
					return $elm$core$Result$Err(error);
				case 'Request':
					var _v1 = request.b;
					var lookupFn = _v1.b;
					var _v2 = A3(lookupFn, $dillonkearns$elm_pages$KeepOrDiscard$Keep, appType, rawResponses);
					var nextRequest = _v2;
					var $temp$appType = appType,
						$temp$request = nextRequest,
						$temp$rawResponses = rawResponses;
					appType = $temp$appType;
					request = $temp$request;
					rawResponses = $temp$rawResponses;
					continue resolve;
				default:
					var value = request.b;
					return $elm$core$Result$Ok(value);
			}
		}
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError = F2(
	function (path, error) {
		switch (error.$) {
			case 'MissingHttpResponse':
				var missingKey = error.a;
				return {
					fatal: true,
					message: _List_fromArray(
						[
							$dillonkearns$elm_pages$TerminalText$text(missingKey)
						]),
					path: path,
					title: 'Missing Http Response'
				};
			case 'DecoderError':
				var decodeErrorMessage = error.a;
				return {
					fatal: true,
					message: _List_fromArray(
						[
							$dillonkearns$elm_pages$TerminalText$text(decodeErrorMessage)
						]),
					path: path,
					title: 'Static Http Decoding Error'
				};
			default:
				var decodeErrorMessage = error.a;
				return {
					fatal: true,
					message: _List_fromArray(
						[
							$dillonkearns$elm_pages$TerminalText$text('I ran into a call to `DataSource.fail` with message: ' + decodeErrorMessage)
						]),
					path: path,
					title: 'Called Static Http Fail'
				};
		}
	});
var $elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$urlsToPagePath = function (urls) {
	return $dillonkearns$elm_pages$Path$join(
		A2(
			$elm$core$List$drop,
			$elm$core$List$length(urls.basePath),
			A2(
				$elm$core$List$filter,
				$elm$core$Basics$neq(''),
				A2(
					$elm$core$String$split,
					'/',
					$dillonkearns$elm_pages$Pages$Internal$String$chopForwardSlashes(urls.currentUrl.path)))));
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$init = F4(
	function (config, flags, url, key) {
		var urls = {basePath: config.basePath, currentUrl: url};
		var currentPath = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			$elm$core$Result$toMaybe(
				A2(
					$elm$core$Result$mapError,
					$elm$json$Json$Decode$errorToString,
					A2(
						$elm$json$Json$Decode$decodeValue,
						A2(
							$elm$json$Json$Decode$at,
							_List_fromArray(
								['contentJson', 'path']),
							A2(
								$elm$json$Json$Decode$map,
								$dillonkearns$elm_pages$Path$toSegments,
								A2($elm$json$Json$Decode$map, $dillonkearns$elm_pages$Path$fromString, $elm$json$Json$Decode$string))),
						flags))));
		var contentJson = $elm$core$Result$toMaybe(
			A2(
				$elm$json$Json$Decode$decodeValue,
				A2($elm$json$Json$Decode$field, 'contentJson', $dillonkearns$elm_pages$Pages$ContentCache$contentJsonDecoder),
				flags));
		var contentCache = $dillonkearns$elm_pages$Pages$ContentCache$init(
			A2(
				$elm$core$Maybe$map,
				function (cj) {
					return _Utils_Tuple2(currentPath, cj);
				},
				contentJson));
		var _v0 = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.staticData;
			},
			contentJson);
		if (_v0.$ === 'Just') {
			var justContentJson = _v0.a;
			var sharedDataResult = A2(
				$elm$core$Result$mapError,
				$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(url.path),
				A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve, $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser, config.sharedData, justContentJson));
			var pagePath = $dillonkearns$elm_pages$Pages$Internal$Platform$urlsToPagePath(urls);
			var pageDataResult = A2(
				$elm$core$Result$mapError,
				$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(url.path),
				A3(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
					$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser,
					config.data(
						config.urlToRoute(url)),
					justContentJson));
			var _v1 = A3($elm$core$Result$map2, $elm$core$Tuple$pair, sharedDataResult, pageDataResult);
			if (_v1.$ === 'Ok') {
				var _v2 = _v1.a;
				var sharedData = _v2.a;
				var pageData = _v2.b;
				var userFlags = $dillonkearns$elm_pages$Pages$Flags$BrowserFlags(
					A2(
						$elm$core$Result$withDefault,
						$elm$json$Json$Encode$null,
						A2(
							$elm$json$Json$Decode$decodeValue,
							A2($elm$json$Json$Decode$field, 'userFlags', $elm$json$Json$Decode$value),
							flags)));
				var _v3 = A5(
					config.init,
					userFlags,
					sharedData,
					pageData,
					$elm$core$Maybe$Just(key),
					$elm$core$Maybe$Just(
						{
							metadata: config.urlToRoute(url),
							pageUrl: $elm$core$Maybe$Just(
								{
									fragment: url.fragment,
									host: url.host,
									path: pagePath,
									port_: url.port_,
									protocol: url.protocol,
									query: A2($elm$core$Maybe$map, $dillonkearns$elm_pages$QueryParams$fromString, url.query)
								}),
							path: {fragment: url.fragment, path: pagePath, query: url.query}
						}));
				var userModel = _v3.a;
				var userCmd = _v3.b;
				var cmd = $elm$core$Platform$Cmd$batch(
					A2(
						$elm$core$List$filterMap,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								$elm$core$Maybe$Just(
								A2($elm$core$Platform$Cmd$map, $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg, userCmd)),
								$elm$core$Maybe$Just(
								A2(
									$elm$core$Task$attempt,
									$dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCache,
									A2($dillonkearns$elm_pages$Pages$ContentCache$lazyLoad, urls, contentCache)))
							])));
				var initialModel = {
					ariaNavigationAnnouncement: '',
					contentCache: contentCache,
					key: key,
					pageData: $elm$core$Result$Ok(
						{pageData: pageData, sharedData: sharedData, userModel: userModel}),
					url: url,
					userFlags: flags
				};
				return _Utils_Tuple2(
					_Utils_update(
						initialModel,
						{
							ariaNavigationAnnouncement: A2($dillonkearns$elm_pages$Pages$Internal$Platform$mainView, config, initialModel).title
						}),
					cmd);
			} else {
				var error = _v1.a;
				return _Utils_Tuple2(
					{
						ariaNavigationAnnouncement: 'Error',
						contentCache: contentCache,
						key: key,
						pageData: $elm$core$Result$Err(
							$dillonkearns$elm_pages$BuildError$errorToString(error)),
						url: url,
						userFlags: flags
					},
					$elm$core$Platform$Cmd$none);
			}
		} else {
			return _Utils_Tuple2(
				{
					ariaNavigationAnnouncement: 'Error',
					contentCache: contentCache,
					key: key,
					pageData: $elm$core$Result$Err('TODO'),
					url: url,
					userFlags: flags
				},
				$elm$core$Platform$Cmd$none);
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$PageScrollComplete = {$: 'PageScrollComplete'};
var $dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrl = F2(
	function (a, b) {
		return {$: 'UpdateCacheAndUrl', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$ContentCache$is404 = F2(
	function (dict, urls) {
		return A2(
			$elm$core$Maybe$withDefault,
			true,
			A2(
				$elm$core$Maybe$map,
				function (entry) {
					var data = entry.a;
					return data.is404;
				},
				A2(
					$elm$core$Dict$get,
					$dillonkearns$elm_pages$Pages$ContentCache$pathForUrl(urls),
					dict)));
	});
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $elm$browser$Browser$Dom$setViewport = _Browser_setViewport;
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.protocol;
		if (_v0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$urlPathToPath = F2(
	function (config, urls) {
		return $dillonkearns$elm_pages$Path$fromString(urls.path);
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$update = F3(
	function (config, appMsg, model) {
		switch (appMsg.$) {
			case 'LinkClicked':
				var urlRequest = appMsg.a;
				if (urlRequest.$ === 'Internal') {
					var url = urlRequest.a;
					var navigatingToSamePage = _Utils_eq(url.path, model.url.path) && (!_Utils_eq(url, model.url));
					return navigatingToSamePage ? _Utils_Tuple2(
						model,
						$elm$browser$Browser$Navigation$load(
							$elm$url$Url$toString(url))) : _Utils_Tuple2(
						model,
						A2(
							$elm$browser$Browser$Navigation$pushUrl,
							model.key,
							$elm$url$Url$toString(url)));
				} else {
					var href = urlRequest.a;
					return _Utils_Tuple2(
						model,
						$elm$browser$Browser$Navigation$load(href));
				}
			case 'UrlChanged':
				var url = appMsg.a;
				var urls = {basePath: config.basePath, currentUrl: url};
				var navigatingToSamePage = _Utils_eq(url.path, model.url.path) && (!_Utils_eq(url, model.url));
				return navigatingToSamePage ? A2(
					$elm$core$Result$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Result$map,
						function (pageData) {
							var _v2 = A5(
								config.update,
								pageData.sharedData,
								pageData.pageData,
								$elm$core$Maybe$Just(model.key),
								config.onPageChange(
									{
										fragment: url.fragment,
										host: model.url.host,
										metadata: config.urlToRoute(url),
										path: A2($dillonkearns$elm_pages$Pages$Internal$Platform$urlPathToPath, config, urls.currentUrl),
										port_: model.url.port_,
										protocol: model.url.protocol,
										query: url.query
									}),
								pageData.userModel);
							var userModel = _v2.a;
							var userCmd = _v2.b;
							var updatedPageData = $elm$core$Result$Ok(
								{pageData: pageData.pageData, sharedData: pageData.sharedData, userModel: userModel});
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{pageData: updatedPageData, url: url}),
								$elm$core$Platform$Cmd$none);
						},
						model.pageData)) : _Utils_Tuple2(
					model,
					A2(
						$elm$core$Task$attempt,
						$dillonkearns$elm_pages$Pages$Internal$Platform$UpdateCacheAndUrl(url),
						A2($dillonkearns$elm_pages$Pages$ContentCache$lazyLoad, urls, model.contentCache)));
			case 'UserMsg':
				var userMsg = appMsg.a;
				var _v3 = model.pageData;
				if (_v3.$ === 'Ok') {
					var pageData = _v3.a;
					var _v4 = A5(
						config.update,
						pageData.sharedData,
						pageData.pageData,
						$elm$core$Maybe$Just(model.key),
						userMsg,
						pageData.userModel);
					var userModel = _v4.a;
					var userCmd = _v4.b;
					var updatedPageData = $elm$core$Result$Ok(
						_Utils_update(
							pageData,
							{userModel: userModel}));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{pageData: updatedPageData}),
						A2($elm$core$Platform$Cmd$map, $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg, userCmd));
				} else {
					var error = _v3.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'UpdateCache':
				var cacheUpdateResult = appMsg.a;
				if (cacheUpdateResult.$ === 'Ok') {
					var _v6 = cacheUpdateResult.a;
					var url = _v6.a;
					var contentJson = _v6.b;
					var updatedCache = _v6.c;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{contentCache: updatedCache}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 'UpdateCacheAndUrl':
				var url = appMsg.a;
				var cacheUpdateResult = appMsg.b;
				var _v7 = A3(
					$elm$core$Result$map2,
					$elm$core$Tuple$pair,
					A2(
						$elm$core$Result$mapError,
						function (error) {
							return 'Http error';
						},
						cacheUpdateResult),
					model.pageData);
				if (_v7.$ === 'Ok') {
					var _v8 = _v7.a;
					var _v9 = _v8.a;
					var contentJson = _v9.b;
					var updatedCache = _v9.c;
					var pageData = _v8.b;
					var updatedPageStaticData = A2(
						$elm$core$Result$mapError,
						function (error) {
							return $dillonkearns$elm_pages$BuildError$errorToString(
								A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError, '', error));
						},
						A3(
							$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
							$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser,
							config.data(
								config.urlToRoute(url)),
							contentJson.staticData));
					var _v10 = A5(
						config.update,
						pageData.sharedData,
						A2($elm$core$Result$withDefault, pageData.pageData, updatedPageStaticData),
						$elm$core$Maybe$Just(model.key),
						config.onPageChange(
							{
								fragment: url.fragment,
								host: model.url.host,
								metadata: config.urlToRoute(url),
								path: A2($dillonkearns$elm_pages$Pages$Internal$Platform$urlPathToPath, config, url),
								port_: model.url.port_,
								protocol: model.url.protocol,
								query: url.query
							}),
						pageData.userModel);
					var userModel = _v10.a;
					var userCmd = _v10.b;
					var updatedPageData = A2(
						$elm$core$Result$map,
						function (pageStaticData) {
							return {pageData: pageStaticData, sharedData: pageData.sharedData, userModel: userModel};
						},
						updatedPageStaticData);
					var updatedModel = _Utils_update(
						model,
						{contentCache: updatedCache, pageData: updatedPageData, url: url});
					return _Utils_Tuple2(
						_Utils_update(
							updatedModel,
							{
								ariaNavigationAnnouncement: A2($dillonkearns$elm_pages$Pages$Internal$Platform$mainView, config, updatedModel).title
							}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2($elm$core$Platform$Cmd$map, $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg, userCmd),
									A2(
									$elm$core$Task$perform,
									function (_v11) {
										return $dillonkearns$elm_pages$Pages$Internal$Platform$PageScrollComplete;
									},
									A2($elm$browser$Browser$Dom$setViewport, 0, 0))
								])));
				} else {
					var error = _v7.a;
					return _Utils_Tuple2(
						model,
						$elm$browser$Browser$Navigation$load(
							$elm$url$Url$toString(url)));
				}
			case 'PageScrollComplete':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'HotReloadComplete':
				var contentJson = appMsg.a;
				var urls = {basePath: config.basePath, currentUrl: model.url};
				var was404 = A2($dillonkearns$elm_pages$Pages$ContentCache$is404, model.contentCache, urls);
				var sharedDataResult = A2(
					$elm$core$Result$mapError,
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(model.url.path),
					A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve, $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser, config.sharedData, contentJson.staticData));
				var pageDataResult = A2(
					$elm$core$Result$mapError,
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(model.url.path),
					A3(
						$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
						$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser,
						config.data(
							config.urlToRoute(model.url)),
						contentJson.staticData));
				var from404ToNon404 = (!contentJson.is404) && was404;
				var _v12 = A3($elm$core$Result$map2, $elm$core$Tuple$pair, sharedDataResult, pageDataResult);
				if (_v12.$ === 'Ok') {
					var _v13 = _v12.a;
					var sharedData = _v13.a;
					var pageData = _v13.b;
					var updateResult = function () {
						if (from404ToNon404) {
							var _v17 = model.pageData;
							if (_v17.$ === 'Ok') {
								var pageData_ = _v17.a;
								return $elm$core$Maybe$Just(
									A5(
										config.update,
										sharedData,
										pageData,
										$elm$core$Maybe$Just(model.key),
										config.onPageChange(
											{
												fragment: model.url.fragment,
												host: model.url.host,
												metadata: config.urlToRoute(model.url),
												path: A2($dillonkearns$elm_pages$Pages$Internal$Platform$urlPathToPath, config, model.url),
												port_: model.url.port_,
												protocol: model.url.protocol,
												query: model.url.query
											}),
										pageData_.userModel));
							} else {
								var error = _v17.a;
								return $elm$core$Maybe$Nothing;
							}
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					if (updateResult.$ === 'Just') {
						var _v15 = updateResult.a;
						var userModel = _v15.a;
						var userCmd = _v15.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									contentCache: $dillonkearns$elm_pages$Pages$ContentCache$init(
										$elm$core$Maybe$Just(
											_Utils_Tuple2(
												config.routeToPath(
													config.urlToRoute(urls.currentUrl)),
												contentJson))),
									pageData: $elm$core$Result$Ok(
										{pageData: pageData, sharedData: sharedData, userModel: userModel})
								}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2($elm$core$Platform$Cmd$map, $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg, userCmd)
									])));
					} else {
						var userFlags = $dillonkearns$elm_pages$Pages$Flags$BrowserFlags(
							A2(
								$elm$core$Result$withDefault,
								$elm$json$Json$Encode$null,
								A2(
									$elm$json$Json$Decode$decodeValue,
									A2($elm$json$Json$Decode$field, 'userFlags', $elm$json$Json$Decode$value),
									model.userFlags)));
						var pagePath = $dillonkearns$elm_pages$Pages$Internal$Platform$urlsToPagePath(urls);
						var _v16 = A5(
							config.init,
							userFlags,
							sharedData,
							pageData,
							$elm$core$Maybe$Just(model.key),
							$elm$core$Maybe$Just(
								{
									metadata: config.urlToRoute(model.url),
									pageUrl: $elm$core$Maybe$Just(
										{
											fragment: model.url.fragment,
											host: model.url.host,
											path: pagePath,
											port_: model.url.port_,
											protocol: model.url.protocol,
											query: A2($elm$core$Maybe$map, $dillonkearns$elm_pages$QueryParams$fromString, model.url.query)
										}),
									path: {fragment: model.url.fragment, path: pagePath, query: model.url.query}
								}));
						var userModel = _v16.a;
						var userCmd = _v16.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									contentCache: $dillonkearns$elm_pages$Pages$ContentCache$init(
										$elm$core$Maybe$Just(
											_Utils_Tuple2(
												config.routeToPath(
													config.urlToRoute(urls.currentUrl)),
												contentJson))),
									pageData: $elm$core$Result$Ok(
										A2(
											$elm$core$Result$withDefault,
											{pageData: pageData, sharedData: sharedData, userModel: userModel},
											A2(
												$elm$core$Result$map,
												function (previousPageData) {
													return {pageData: pageData, sharedData: sharedData, userModel: previousPageData.userModel};
												},
												model.pageData)))
								}),
							A2($elm$core$Platform$Cmd$map, $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg, userCmd));
					}
				} else {
					var error = _v12.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								contentCache: $dillonkearns$elm_pages$Pages$ContentCache$init(
									$elm$core$Maybe$Just(
										_Utils_Tuple2(
											config.routeToPath(
												config.urlToRoute(urls.currentUrl)),
											contentJson)))
							}),
						$elm$core$Platform$Cmd$none);
				}
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $dillonkearns$elm_pages$Pages$Internal$Platform$onViewChangeElement = function (currentUrl) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$attribute,
				'data-url',
				$elm$url$Url$toString(currentUrl)),
				A2($elm$html$Html$Attributes$attribute, 'display', 'none')
			]),
		_List_Nil);
};
var $dillonkearns$elm_pages$AriaLiveAnnouncer$mainView = function (title) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$id('elm-pages-announcer'),
				A2($elm$html$Html$Attributes$attribute, 'aria-live', 'assertive'),
				A2($elm$html$Html$Attributes$attribute, 'aria-atomic', 'true'),
				A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
				A2($elm$html$Html$Attributes$style, 'top', '0'),
				A2($elm$html$Html$Attributes$style, 'width', '1px'),
				A2($elm$html$Html$Attributes$style, 'height', '1px'),
				A2($elm$html$Html$Attributes$style, 'padding', '0'),
				A2($elm$html$Html$Attributes$style, 'overflow', 'hidden'),
				A2($elm$html$Html$Attributes$style, 'clip', 'rect(0, 0, 0, 0)'),
				A2($elm$html$Html$Attributes$style, 'whiteSpace', 'nowrap'),
				A2($elm$html$Html$Attributes$style, 'border', '0')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text('Navigated to ' + title)
			]));
};
var $dillonkearns$elm_pages$AriaLiveAnnouncer$view = function (title) {
	return A2($elm$html$Html$Lazy$lazy, $dillonkearns$elm_pages$AriaLiveAnnouncer$mainView, title);
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$view = F2(
	function (config, model) {
		var _v0 = A2($dillonkearns$elm_pages$Pages$Internal$Platform$mainView, config, model);
		var title = _v0.title;
		var body = _v0.body;
		return {
			body: _List_fromArray(
				[
					$dillonkearns$elm_pages$Pages$Internal$Platform$onViewChangeElement(model.url),
					A2($elm$html$Html$map, $dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg, body),
					$dillonkearns$elm_pages$AriaLiveAnnouncer$view(model.ariaNavigationAnnouncement)
				]),
			title: title
		};
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$application = function (config) {
	return $elm$browser$Browser$application(
		{
			init: F3(
				function (flags, url, key) {
					return A4($dillonkearns$elm_pages$Pages$Internal$Platform$init, config, flags, url, key);
				}),
			onUrlChange: $dillonkearns$elm_pages$Pages$Internal$Platform$UrlChanged,
			onUrlRequest: $dillonkearns$elm_pages$Pages$Internal$Platform$LinkClicked,
			subscriptions: function (model) {
				var urls = {currentUrl: model.url};
				var _v0 = model.pageData;
				if (_v0.$ === 'Ok') {
					var pageData = _v0.a;
					return $elm$core$Platform$Sub$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Platform$Sub$map,
								$dillonkearns$elm_pages$Pages$Internal$Platform$UserMsg,
								A3(
									config.subscriptions,
									config.urlToRoute(model.url),
									$dillonkearns$elm_pages$Path$join(
										config.routeToPath(
											config.urlToRoute(urls.currentUrl))),
									pageData.userModel)),
								A2(
								$elm$core$Platform$Sub$map,
								function (decodeValue) {
									var _v1 = A2(
										$elm$json$Json$Decode$decodeValue,
										A2($elm$json$Json$Decode$field, 'contentJson', $dillonkearns$elm_pages$Pages$ContentCache$contentJsonDecoder),
										decodeValue);
									if (_v1.$ === 'Ok') {
										var contentJson = _v1.a;
										return $dillonkearns$elm_pages$Pages$Internal$Platform$HotReloadComplete(contentJson);
									} else {
										return $dillonkearns$elm_pages$Pages$Internal$Platform$NoOp;
									}
								},
								config.fromJsPort)
							]));
				} else {
					return A2(
						$elm$core$Platform$Sub$map,
						function (decodeValue) {
							var _v2 = A2(
								$elm$json$Json$Decode$decodeValue,
								A2($elm$json$Json$Decode$field, 'contentJson', $dillonkearns$elm_pages$Pages$ContentCache$contentJsonDecoder),
								decodeValue);
							if (_v2.$ === 'Ok') {
								var contentJson = _v2.a;
								return $dillonkearns$elm_pages$Pages$Internal$Platform$HotReloadComplete(contentJson);
							} else {
								return $dillonkearns$elm_pages$Pages$Internal$Platform$NoOp;
							}
						},
						config.fromJsPort);
				}
			},
			update: $dillonkearns$elm_pages$Pages$Internal$Platform$update(config),
			view: $dillonkearns$elm_pages$Pages$Internal$Platform$view(config)
		});
};
var $author$project$TemplateModulesBeta$Data404NotFoundPage____ = {$: 'Data404NotFoundPage____'};
var $author$project$TemplateModulesBeta$DataAbout = function (a) {
	return {$: 'DataAbout', a: a};
};
var $author$project$TemplateModulesBeta$DataContact = function (a) {
	return {$: 'DataContact', a: a};
};
var $author$project$TemplateModulesBeta$DataFacilities = function (a) {
	return {$: 'DataFacilities', a: a};
};
var $author$project$TemplateModulesBeta$DataGallery = function (a) {
	return {$: 'DataGallery', a: a};
};
var $author$project$TemplateModulesBeta$DataIndex = function (a) {
	return {$: 'DataIndex', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute = F2(
	function (a, b) {
		return {$: 'ApiRoute', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$Request = F2(
	function (a, b) {
		return {$: 'Request', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError = function (a) {
	return {$: 'RequestError', a: a};
};
var $dillonkearns$elm_pages$DataSource$map = F2(
	function (fn, requestInfo) {
		switch (requestInfo.$) {
			case 'RequestError':
				var error = requestInfo.a;
				return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
			case 'Request':
				var partiallyStripped = requestInfo.a;
				var _v1 = requestInfo.b;
				var urls = _v1.a;
				var lookupFn = _v1.b;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					partiallyStripped,
					_Utils_Tuple2(
						urls,
						F3(
							function (keepOrDiscard, appType, rawResponses) {
								return A2(
									$dillonkearns$elm_pages$DataSource$map,
									fn,
									A3(lookupFn, keepOrDiscard, appType, rawResponses));
							})));
			default:
				var stripped = requestInfo.a;
				var value = requestInfo.b;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute,
					stripped,
					fn(value));
		}
	});
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Page$buildNoState = F2(
	function (_v0, builderState) {
		var view = _v0.view;
		var record = builderState.a;
		return {
			data: record.data,
			handleRoute: record.handleRoute,
			head: record.head,
			init: F3(
				function (_v2, _v3, _v4) {
					return _Utils_Tuple2(_Utils_Tuple0, $elm$core$Platform$Cmd$none);
				}),
			kind: record.kind,
			staticRoutes: record.staticRoutes,
			subscriptions: F5(
				function (_v5, _v6, _v7, _v8, _v9) {
					return $elm$core$Platform$Sub$none;
				}),
			update: F6(
				function (_v10, _v11, _v12, _v13, _v14, _v15) {
					return _Utils_Tuple3(_Utils_Tuple0, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}),
			view: F3(
				function (maybePageUrl, sharedModel, _v16) {
					return A2(view, maybePageUrl, sharedModel);
				})
		};
	});
var $dillonkearns$elm_pages$DataSource$succeed = function (value) {
	return A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, $elm$core$Dict$empty, value);
};
var $author$project$Page$About$data = $dillonkearns$elm_pages$DataSource$succeed(_Utils_Tuple0);
var $dillonkearns$elm_pages$Pages$Url$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $dillonkearns$elm_pages$Pages$Url$fromPath = function (path) {
	return $dillonkearns$elm_pages$Pages$Url$Internal(
		$dillonkearns$elm_pages$Path$toAbsolute(path));
};
var $author$project$Site$commonSeo = {
	canonicalUrlOverride: $elm$core$Maybe$Nothing,
	description: 'Aspargesgården byr på sjarmerende og unike lokaler i landlige omgivelser, ved kysten i Vestfold.',
	image: {
		alt: 'Aspargesgården',
		dimensions: $elm$core$Maybe$Just(
			{height: 1024, width: 2048}),
		mimeType: $elm$core$Maybe$Just('image/jpeg'),
		url: $dillonkearns$elm_pages$Pages$Url$fromPath(
			$dillonkearns$elm_pages$Path$join(
				_List_fromArray(
					['ressurser', 'twitter2_2048w_resize.jpeg'])))
	},
	locale: $elm$core$Maybe$Just('nb_NO'),
	siteName: 'Aspargesgården',
	title: 'Aspargesgården | '
};
var $dillonkearns$elm_pages$Head$Twitter$Large = {$: 'Large'};
var $dillonkearns$elm_pages$Head$Twitter$Summary = function (a) {
	return {$: 'Summary', a: a};
};
var $dillonkearns$elm_pages$Head$Seo$buildSummary = F2(
	function (_v0, summarySize) {
		var title = _v0.title;
		var image = _v0.image;
		var canonicalUrlOverride = _v0.canonicalUrlOverride;
		var description = _v0.description;
		var siteName = _v0.siteName;
		var locale = _v0.locale;
		return {
			alternateLocales: _List_Nil,
			audio: $elm$core$Maybe$Nothing,
			canonicalUrlOverride: canonicalUrlOverride,
			description: description,
			image: image,
			locale: locale,
			siteName: siteName,
			title: title,
			twitterCard: $dillonkearns$elm_pages$Head$Twitter$Summary(
				{
					description: $elm$core$Maybe$Just(description),
					image: $elm$core$Maybe$Just(
						{alt: image.alt, url: image.url}),
					siteUser: $elm$core$Maybe$Nothing,
					size: summarySize,
					title: title
				}),
			video: $elm$core$Maybe$Nothing
		};
	});
var $dillonkearns$elm_pages$Head$Seo$summaryLarge = function (config) {
	return A2($dillonkearns$elm_pages$Head$Seo$buildSummary, config, $dillonkearns$elm_pages$Head$Twitter$Large);
};
var $dillonkearns$elm_pages$Head$Seo$Content = F2(
	function (a, b) {
		return {$: 'Content', a: a, b: b};
	});
var $dillonkearns$elm_pages$Head$Seo$Website = {$: 'Website'};
var $dillonkearns$elm_pages$Head$FullUrlToCurrentPage = {$: 'FullUrlToCurrentPage'};
var $dillonkearns$elm_pages$Head$currentPageFullUrl = $dillonkearns$elm_pages$Head$FullUrlToCurrentPage;
var $dillonkearns$elm_pages$Head$Tag = function (a) {
	return {$: 'Tag', a: a};
};
var $dillonkearns$elm_pages$Head$node = F2(
	function (name, attributes) {
		return $dillonkearns$elm_pages$Head$Tag(
			{attributes: attributes, name: name});
	});
var $dillonkearns$elm_pages$Head$Raw = function (a) {
	return {$: 'Raw', a: a};
};
var $dillonkearns$elm_pages$Head$raw = function (value) {
	return $dillonkearns$elm_pages$Head$Raw(value);
};
var $dillonkearns$elm_pages$Head$canonicalLink = function (maybePath) {
	return A2(
		$dillonkearns$elm_pages$Head$node,
		'link',
		_List_fromArray(
			[
				_Utils_Tuple2(
				'rel',
				$dillonkearns$elm_pages$Head$raw('canonical')),
				_Utils_Tuple2(
				'href',
				A2(
					$elm$core$Maybe$withDefault,
					$dillonkearns$elm_pages$Head$currentPageFullUrl,
					A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, maybePath)))
			]));
};
var $dillonkearns$elm_pages$Head$metaName = F2(
	function (name, content) {
		return A2(
			$dillonkearns$elm_pages$Head$node,
			'meta',
			_List_fromArray(
				[
					_Utils_Tuple2(
					'name',
					$dillonkearns$elm_pages$Head$Raw(name)),
					_Utils_Tuple2('content', content)
				]));
	});
var $dillonkearns$elm_pages$Head$metaProperty = F2(
	function (property, content) {
		return A2(
			$dillonkearns$elm_pages$Head$node,
			'meta',
			_List_fromArray(
				[
					_Utils_Tuple2(
					'property',
					$dillonkearns$elm_pages$Head$raw(property)),
					_Utils_Tuple2('content', content)
				]));
	});
var $dillonkearns$elm_pages$Head$Twitter$cardValue = function (card) {
	switch (card.$) {
		case 'Summary':
			var details = card.a;
			var _v1 = details.size;
			if (_v1.$ === 'Regular') {
				return 'summary';
			} else {
				return 'summary_large_image';
			}
		case 'App':
			return 'app';
		default:
			return 'player';
	}
};
var $dillonkearns$elm_pages$Head$FullUrl = function (a) {
	return {$: 'FullUrl', a: a};
};
var $dillonkearns$elm_pages$Head$urlAttribute = function (value) {
	return $dillonkearns$elm_pages$Head$FullUrl(value);
};
var $dillonkearns$elm_pages$Head$Twitter$rawTags = function (card) {
	return A2(
		$elm$core$List$cons,
		_Utils_Tuple2(
			'twitter:card',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(
					$dillonkearns$elm_pages$Head$Twitter$cardValue(card)))),
		function () {
			switch (card.$) {
				case 'Summary':
					var details = card.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'twitter:title',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.title))),
							_Utils_Tuple2(
							'twitter:site',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.siteUser)),
							_Utils_Tuple2(
							'twitter:description',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.description)),
							_Utils_Tuple2(
							'twitter:image',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$urlAttribute,
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.url;
									},
									details.image))),
							_Utils_Tuple2(
							'twitter:image:alt',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$raw,
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.alt;
									},
									details.image)))
						]);
				case 'App':
					var details = card.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'twitter:title',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.title))),
							_Utils_Tuple2(
							'twitter:site',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.siteUser))),
							_Utils_Tuple2(
							'twitter:description',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.description)),
							_Utils_Tuple2(
							'twitter:image',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$urlAttribute,
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.url;
									},
									details.image))),
							_Utils_Tuple2(
							'twitter:image:alt',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$raw,
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.alt;
									},
									details.image))),
							_Utils_Tuple2(
							'twitter:app:name:iphone',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appNameIphone)),
							_Utils_Tuple2(
							'twitter:app:name:ipad',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appNameIpad)),
							_Utils_Tuple2(
							'twitter:app:name:googleplay',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appNameGooglePlay)),
							_Utils_Tuple2(
							'twitter:app:id:iphone',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$raw,
								A2($elm$core$Maybe$map, $elm$core$String$fromInt, details.appIdIphone))),
							_Utils_Tuple2(
							'twitter:app:id:ipad',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$raw,
								A2($elm$core$Maybe$map, $elm$core$String$fromInt, details.appIdIpad))),
							_Utils_Tuple2(
							'twitter:app:id:googleplay',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appIdGooglePlay)),
							_Utils_Tuple2(
							'twitter:app:url:iphone',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appUrlIphone)),
							_Utils_Tuple2(
							'twitter:app:url:ipad',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appUrlIpad)),
							_Utils_Tuple2(
							'twitter:app:url:googleplay',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appUrlGooglePlay)),
							_Utils_Tuple2(
							'twitter:app:country',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appCountry))
						]);
				default:
					var details = card.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'twitter:title',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.title))),
							_Utils_Tuple2(
							'twitter:site',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.siteUser))),
							_Utils_Tuple2(
							'twitter:description',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.description)),
							_Utils_Tuple2(
							'twitter:image',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$urlAttribute(details.image.url))),
							_Utils_Tuple2(
							'twitter:image:alt',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.image.alt)))
						]);
			}
		}());
};
var $dillonkearns$elm_pages$Head$Seo$tagsForAudio = function (audio) {
	return _List_fromArray(
		[
			_Utils_Tuple2(
			'og:audio',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(audio.url))),
			_Utils_Tuple2(
			'og:audio:secure_url',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(audio.url))),
			_Utils_Tuple2(
			'og:audio:type',
			A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, audio.mimeType))
		]);
};
var $dillonkearns$elm_pages$Head$Seo$tagsForImage = function (image) {
	return _List_fromArray(
		[
			_Utils_Tuple2(
			'og:image',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$urlAttribute(image.url))),
			_Utils_Tuple2(
			'og:image:secure_url',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$urlAttribute(image.url))),
			_Utils_Tuple2(
			'og:image:alt',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(image.alt))),
			_Utils_Tuple2(
			'og:image:width',
			A2(
				$elm$core$Maybe$map,
				$dillonkearns$elm_pages$Head$raw,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$fromInt,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.width;
						},
						image.dimensions)))),
			_Utils_Tuple2(
			'og:image:height',
			A2(
				$elm$core$Maybe$map,
				$dillonkearns$elm_pages$Head$raw,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$fromInt,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.height;
						},
						image.dimensions))))
		]);
};
var $dillonkearns$elm_pages$Head$Seo$tagsForVideo = function (video) {
	return _List_fromArray(
		[
			_Utils_Tuple2(
			'og:video',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(video.url))),
			_Utils_Tuple2(
			'og:video:secure_url',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(video.url))),
			_Utils_Tuple2(
			'og:video:width',
			A2(
				$elm$core$Maybe$map,
				$dillonkearns$elm_pages$Head$raw,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$fromInt,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.width;
						},
						video.dimensions)))),
			_Utils_Tuple2(
			'og:video:height',
			A2(
				$elm$core$Maybe$map,
				$dillonkearns$elm_pages$Head$raw,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$fromInt,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.height;
						},
						video.dimensions))))
		]);
};
var $dillonkearns$elm_pages$Head$Seo$tagsForCommon = function (common) {
	return _Utils_ap(
		$dillonkearns$elm_pages$Head$Seo$tagsForImage(common.image),
		_Utils_ap(
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$Seo$tagsForAudio, common.audio)),
			_Utils_ap(
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$Seo$tagsForVideo, common.video)),
				_Utils_ap(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'og:title',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(common.title))),
							_Utils_Tuple2(
							'og:url',
							$elm$core$Maybe$Just(
								A2(
									$elm$core$Maybe$withDefault,
									$dillonkearns$elm_pages$Head$currentPageFullUrl,
									A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, common.canonicalUrlOverride)))),
							_Utils_Tuple2(
							'og:description',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(common.description))),
							_Utils_Tuple2(
							'og:site_name',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(common.siteName))),
							_Utils_Tuple2(
							'og:locale',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, common.locale))
						]),
					_Utils_ap(
						A2(
							$elm$core$List$map,
							function (alternateLocale) {
								return _Utils_Tuple2(
									'og:locale:alternate',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw(alternateLocale)));
							},
							common.alternateLocales),
						$dillonkearns$elm_pages$Head$Twitter$rawTags(common.twitterCard))))));
};
var $dillonkearns$elm_pages$Head$Seo$tags = function (_v0) {
	var common = _v0.a;
	var details = _v0.b;
	return A2(
		$elm$core$List$append,
		_List_fromArray(
			[
				$dillonkearns$elm_pages$Head$canonicalLink(common.canonicalUrlOverride),
				A2(
				$dillonkearns$elm_pages$Head$metaName,
				'description',
				$dillonkearns$elm_pages$Head$raw(common.description))
			]),
		A2(
			$elm$core$List$filterMap,
			function (_v2) {
				var name = _v2.a;
				var maybeContent = _v2.b;
				return A2(
					$elm$core$Maybe$map,
					function (metaContent) {
						return A2($dillonkearns$elm_pages$Head$metaProperty, name, metaContent);
					},
					maybeContent);
			},
			_Utils_ap(
				$dillonkearns$elm_pages$Head$Seo$tagsForCommon(common),
				function () {
					switch (details.$) {
						case 'Website':
							return _List_fromArray(
								[
									_Utils_Tuple2(
									'og:type',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw('website')))
								]);
						case 'Article':
							var articleDetails = details.a;
							return _Utils_ap(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'og:type',
										$elm$core$Maybe$Just(
											$dillonkearns$elm_pages$Head$raw('article'))),
										_Utils_Tuple2(
										'article:section',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, articleDetails.section)),
										_Utils_Tuple2(
										'article:published_time',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, articleDetails.publishedTime)),
										_Utils_Tuple2(
										'article:modified_time',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, articleDetails.modifiedTime)),
										_Utils_Tuple2(
										'article:expiration_time',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, articleDetails.expirationTime))
									]),
								A2(
									$elm$core$List$map,
									function (tag) {
										return _Utils_Tuple2(
											'article:tag',
											$elm$core$Maybe$Just(
												$dillonkearns$elm_pages$Head$raw(tag)));
									},
									articleDetails.tags));
						case 'Book':
							var bookDetails = details.a;
							return _Utils_ap(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'og:type',
										$elm$core$Maybe$Just(
											$dillonkearns$elm_pages$Head$raw('book'))),
										_Utils_Tuple2(
										'og:isbn',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, bookDetails.isbn)),
										_Utils_Tuple2(
										'og:release_date',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, bookDetails.releaseDate))
									]),
								A2(
									$elm$core$List$map,
									function (tag) {
										return _Utils_Tuple2(
											'book:tag',
											$elm$core$Maybe$Just(
												$dillonkearns$elm_pages$Head$raw(tag)));
									},
									bookDetails.tags));
						case 'Song':
							var songDetails = details.a;
							return _List_fromArray(
								[
									_Utils_Tuple2(
									'og:type',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw('music.song'))),
									_Utils_Tuple2(
									'music:duration',
									A2(
										$elm$core$Maybe$map,
										$dillonkearns$elm_pages$Head$raw,
										A2($elm$core$Maybe$map, $elm$core$String$fromInt, songDetails.duration))),
									_Utils_Tuple2(
									'music:album:disc',
									A2(
										$elm$core$Maybe$map,
										$dillonkearns$elm_pages$Head$raw,
										A2($elm$core$Maybe$map, $elm$core$String$fromInt, songDetails.disc))),
									_Utils_Tuple2(
									'music:album:track',
									A2(
										$elm$core$Maybe$map,
										$dillonkearns$elm_pages$Head$raw,
										A2($elm$core$Maybe$map, $elm$core$String$fromInt, songDetails.track)))
								]);
						default:
							var profileDetails = details.a;
							return _List_fromArray(
								[
									_Utils_Tuple2(
									'og:type',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw('profile'))),
									_Utils_Tuple2(
									'profile:first_name',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw(profileDetails.firstName))),
									_Utils_Tuple2(
									'profile:last_name',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw(profileDetails.lastName))),
									_Utils_Tuple2(
									'profile:username',
									A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, profileDetails.username))
								]);
					}
				}())));
};
var $dillonkearns$elm_pages$Head$Seo$website = function (common) {
	return $dillonkearns$elm_pages$Head$Seo$tags(
		A2($dillonkearns$elm_pages$Head$Seo$Content, common, $dillonkearns$elm_pages$Head$Seo$Website));
};
var $author$project$Page$About$head = function (_v0) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summaryLarge(
			_Utils_update(
				$author$project$Site$commonSeo,
				{title: 'Aspargesgården | Om gården'})));
};
var $author$project$Page$WithData = function (a) {
	return {$: 'WithData', a: a};
};
var $author$project$Page$single = function (_v0) {
	var data = _v0.data;
	var head = _v0.head;
	return $author$project$Page$WithData(
		{
			data: function (_v1) {
				return data;
			},
			handleRoute: F3(
				function (_v2, _v3, _v4) {
					return $dillonkearns$elm_pages$DataSource$succeed($elm$core$Maybe$Nothing);
				}),
			head: head,
			kind: 'static',
			serverless: false,
			staticRoutes: $dillonkearns$elm_pages$DataSource$succeed(
				_List_fromArray(
					[
						{}
					]))
		});
};
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$Node = F3(
	function (a, b, c) {
		return {$: 'Node', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$node = $rtfeldman$elm_css$VirtualDom$Styled$Node;
var $rtfeldman$elm_css$Html$Styled$node = $rtfeldman$elm_css$VirtualDom$Styled$node;
var $rtfeldman$elm_css$Html$Styled$a = $rtfeldman$elm_css$Html$Styled$node('a');
var $rtfeldman$elm_css$VirtualDom$Styled$Attribute = F3(
	function (a, b, c) {
		return {$: 'Attribute', a: a, b: b, c: c};
	});
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlJson(value));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$property = F2(
	function (key, value) {
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$property, key, value),
			false,
			'');
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$alt = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('alt');
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $rtfeldman$elm_css$Css$Structure$compactHelp = F2(
	function (declaration, _v0) {
		var keyframesByName = _v0.a;
		var declarations = _v0.b;
		switch (declaration.$) {
			case 'StyleBlockDeclaration':
				var _v2 = declaration.a;
				var properties = _v2.c;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'MediaRule':
				var styleBlocks = declaration.b;
				return A2(
					$elm$core$List$all,
					function (_v3) {
						var properties = _v3.c;
						return $elm$core$List$isEmpty(properties);
					},
					styleBlocks) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'SupportsRule':
				var otherDeclarations = declaration.b;
				return $elm$core$List$isEmpty(otherDeclarations) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'DocumentRule':
				return _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'PageRule':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'FontFace':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'Keyframes':
				var record = declaration.a;
				return $elm$core$String$isEmpty(record.declaration) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					A3($elm$core$Dict$insert, record.name, record.declaration, keyframesByName),
					declarations);
			case 'Viewport':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			case 'CounterStyle':
				var properties = declaration.a;
				return $elm$core$List$isEmpty(properties) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
			default:
				var tuples = declaration.a;
				return A2(
					$elm$core$List$all,
					function (_v4) {
						var properties = _v4.b;
						return $elm$core$List$isEmpty(properties);
					},
					tuples) ? _Utils_Tuple2(keyframesByName, declarations) : _Utils_Tuple2(
					keyframesByName,
					A2($elm$core$List$cons, declaration, declarations));
		}
	});
var $rtfeldman$elm_css$Css$Structure$Keyframes = function (a) {
	return {$: 'Keyframes', a: a};
};
var $rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations = F2(
	function (keyframesByName, compactedDeclarations) {
		return A2(
			$elm$core$List$append,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var name = _v0.a;
					var decl = _v0.b;
					return $rtfeldman$elm_css$Css$Structure$Keyframes(
						{declaration: decl, name: name});
				},
				$elm$core$Dict$toList(keyframesByName)),
			compactedDeclarations);
	});
var $rtfeldman$elm_css$Css$Structure$compactDeclarations = function (declarations) {
	var _v0 = A3(
		$elm$core$List$foldr,
		$rtfeldman$elm_css$Css$Structure$compactHelp,
		_Utils_Tuple2($elm$core$Dict$empty, _List_Nil),
		declarations);
	var keyframesByName = _v0.a;
	var compactedDeclarations = _v0.b;
	return A2($rtfeldman$elm_css$Css$Structure$withKeyframeDeclarations, keyframesByName, compactedDeclarations);
};
var $rtfeldman$elm_css$Css$Structure$compactStylesheet = function (_v0) {
	var charset = _v0.charset;
	var imports = _v0.imports;
	var namespaces = _v0.namespaces;
	var declarations = _v0.declarations;
	return {
		charset: charset,
		declarations: $rtfeldman$elm_css$Css$Structure$compactDeclarations(declarations),
		imports: imports,
		namespaces: namespaces
	};
};
var $rtfeldman$elm_css$Css$Structure$Output$charsetToString = function (charset) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$map,
			function (str) {
				return '@charset \"' + (str + '\"');
			},
			charset));
};
var $rtfeldman$elm_css$Css$String$mapJoinHelp = F4(
	function (map, sep, strs, result) {
		mapJoinHelp:
		while (true) {
			if (!strs.b) {
				return result;
			} else {
				if (!strs.b.b) {
					var first = strs.a;
					return result + (map(first) + '');
				} else {
					var first = strs.a;
					var rest = strs.b;
					var $temp$map = map,
						$temp$sep = sep,
						$temp$strs = rest,
						$temp$result = result + (map(first) + (sep + ''));
					map = $temp$map;
					sep = $temp$sep;
					strs = $temp$strs;
					result = $temp$result;
					continue mapJoinHelp;
				}
			}
		}
	});
var $rtfeldman$elm_css$Css$String$mapJoin = F3(
	function (map, sep, strs) {
		return A4($rtfeldman$elm_css$Css$String$mapJoinHelp, map, sep, strs, '');
	});
var $rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString = function (expression) {
	return '(' + (expression.feature + (A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$map,
			$elm$core$Basics$append(': '),
			expression.value)) + ')'));
};
var $rtfeldman$elm_css$Css$Structure$Output$mediaTypeToString = function (mediaType) {
	switch (mediaType.$) {
		case 'Print':
			return 'print';
		case 'Screen':
			return 'screen';
		default:
			return 'speech';
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString = function (mediaQuery) {
	var prefixWith = F3(
		function (str, mediaType, expressions) {
			return str + (' ' + A2(
				$elm$core$String$join,
				' and ',
				A2(
					$elm$core$List$cons,
					$rtfeldman$elm_css$Css$Structure$Output$mediaTypeToString(mediaType),
					A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, expressions))));
		});
	switch (mediaQuery.$) {
		case 'AllQuery':
			var expressions = mediaQuery.a;
			return A3($rtfeldman$elm_css$Css$String$mapJoin, $rtfeldman$elm_css$Css$Structure$Output$mediaExpressionToString, ' and ', expressions);
		case 'OnlyQuery':
			var mediaType = mediaQuery.a;
			var expressions = mediaQuery.b;
			return A3(prefixWith, 'only', mediaType, expressions);
		case 'NotQuery':
			var mediaType = mediaQuery.a;
			var expressions = mediaQuery.b;
			return A3(prefixWith, 'not', mediaType, expressions);
		default:
			var str = mediaQuery.a;
			return str;
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString = F2(
	function (name, mediaQuery) {
		return '@import \"' + (name + ($rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString(mediaQuery) + '\"'));
	});
var $rtfeldman$elm_css$Css$Structure$Output$importToString = function (_v0) {
	var name = _v0.a;
	var mediaQueries = _v0.b;
	return A3(
		$rtfeldman$elm_css$Css$String$mapJoin,
		$rtfeldman$elm_css$Css$Structure$Output$importMediaQueryToString(name),
		'\n',
		mediaQueries);
};
var $rtfeldman$elm_css$Css$Structure$Output$namespaceToString = function (_v0) {
	var prefix = _v0.a;
	var str = _v0.b;
	return '@namespace ' + (prefix + ('\"' + (str + '\"')));
};
var $rtfeldman$elm_css$Css$Structure$Output$emitProperties = function (properties) {
	return A3(
		$rtfeldman$elm_css$Css$String$mapJoin,
		function (_v0) {
			var prop = _v0.a;
			return prop + ';';
		},
		'',
		properties);
};
var $rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString = function (_v0) {
	var str = _v0.a;
	return '::' + str;
};
var $rtfeldman$elm_css$Css$Structure$Output$combinatorToString = function (combinator) {
	switch (combinator.$) {
		case 'AdjacentSibling':
			return '+';
		case 'GeneralSibling':
			return '~';
		case 'Child':
			return '>';
		default:
			return '';
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString = function (repeatableSimpleSelector) {
	switch (repeatableSimpleSelector.$) {
		case 'ClassSelector':
			var str = repeatableSimpleSelector.a;
			return '.' + str;
		case 'IdSelector':
			var str = repeatableSimpleSelector.a;
			return '#' + str;
		case 'PseudoClassSelector':
			var str = repeatableSimpleSelector.a;
			return ':' + str;
		default:
			var str = repeatableSimpleSelector.a;
			return '[' + (str + ']');
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString = function (simpleSelectorSequence) {
	switch (simpleSelectorSequence.$) {
		case 'TypeSelectorSequence':
			var str = simpleSelectorSequence.a.a;
			var repeatableSimpleSelectors = simpleSelectorSequence.b;
			return _Utils_ap(
				str,
				A3($rtfeldman$elm_css$Css$String$mapJoin, $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, '', repeatableSimpleSelectors));
		case 'UniversalSelectorSequence':
			var repeatableSimpleSelectors = simpleSelectorSequence.a;
			return $elm$core$List$isEmpty(repeatableSimpleSelectors) ? '*' : A3($rtfeldman$elm_css$Css$String$mapJoin, $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, '', repeatableSimpleSelectors);
		default:
			var str = simpleSelectorSequence.a;
			var repeatableSimpleSelectors = simpleSelectorSequence.b;
			return _Utils_ap(
				str,
				A3($rtfeldman$elm_css$Css$String$mapJoin, $rtfeldman$elm_css$Css$Structure$Output$repeatableSimpleSelectorToString, '', repeatableSimpleSelectors));
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$selectorChainToString = function (_v0) {
	var combinator = _v0.a;
	var sequence = _v0.b;
	return $rtfeldman$elm_css$Css$Structure$Output$combinatorToString(combinator) + (' ' + $rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(sequence));
};
var $rtfeldman$elm_css$Css$Structure$Output$selectorToString = function (_v0) {
	var simpleSelectorSequence = _v0.a;
	var chain = _v0.b;
	var pseudoElement = _v0.c;
	var segments = A2(
		$elm$core$List$cons,
		$rtfeldman$elm_css$Css$Structure$Output$simpleSelectorSequenceToString(simpleSelectorSequence),
		A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$Output$selectorChainToString, chain));
	var pseudoElementsString = A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Maybe$map, $rtfeldman$elm_css$Css$Structure$Output$pseudoElementToString, pseudoElement));
	return A2(
		$elm$core$String$append,
		A2($elm$core$String$join, ' ', segments),
		pseudoElementsString);
};
var $rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock = function (_v0) {
	var firstSelector = _v0.a;
	var otherSelectors = _v0.b;
	var properties = _v0.c;
	var selectorStr = A3(
		$rtfeldman$elm_css$Css$String$mapJoin,
		$rtfeldman$elm_css$Css$Structure$Output$selectorToString,
		',',
		A2($elm$core$List$cons, firstSelector, otherSelectors));
	return selectorStr + ('{' + ($rtfeldman$elm_css$Css$Structure$Output$emitProperties(properties) + '}'));
};
var $rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration = function (decl) {
	switch (decl.$) {
		case 'StyleBlockDeclaration':
			var styleBlock = decl.a;
			return $rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock(styleBlock);
		case 'MediaRule':
			var mediaQueries = decl.a;
			var styleBlocks = decl.b;
			var query = A3($rtfeldman$elm_css$Css$String$mapJoin, $rtfeldman$elm_css$Css$Structure$Output$mediaQueryToString, ', ', mediaQueries);
			var blocks = A3($rtfeldman$elm_css$Css$String$mapJoin, $rtfeldman$elm_css$Css$Structure$Output$prettyPrintStyleBlock, '\n', styleBlocks);
			return '@media ' + (query + ('{' + (blocks + '}')));
		case 'SupportsRule':
			return 'TODO';
		case 'DocumentRule':
			return 'TODO';
		case 'PageRule':
			return 'TODO';
		case 'FontFace':
			return 'TODO';
		case 'Keyframes':
			var name = decl.a.name;
			var declaration = decl.a.declaration;
			return '@keyframes ' + (name + ('{' + (declaration + '}')));
		case 'Viewport':
			return 'TODO';
		case 'CounterStyle':
			return 'TODO';
		default:
			return 'TODO';
	}
};
var $rtfeldman$elm_css$Css$Structure$Output$prettyPrint = function (_v0) {
	var charset = _v0.charset;
	var imports = _v0.imports;
	var namespaces = _v0.namespaces;
	var declarations = _v0.declarations;
	return $rtfeldman$elm_css$Css$Structure$Output$charsetToString(charset) + (A3($rtfeldman$elm_css$Css$String$mapJoin, $rtfeldman$elm_css$Css$Structure$Output$importToString, '\n', imports) + (A3($rtfeldman$elm_css$Css$String$mapJoin, $rtfeldman$elm_css$Css$Structure$Output$namespaceToString, '\n', namespaces) + (A3($rtfeldman$elm_css$Css$String$mapJoin, $rtfeldman$elm_css$Css$Structure$Output$prettyPrintDeclaration, '\n', declarations) + '')));
};
var $rtfeldman$elm_css$Css$Structure$CounterStyle = function (a) {
	return {$: 'CounterStyle', a: a};
};
var $rtfeldman$elm_css$Css$Structure$FontFace = function (a) {
	return {$: 'FontFace', a: a};
};
var $rtfeldman$elm_css$Css$Structure$PageRule = function (a) {
	return {$: 'PageRule', a: a};
};
var $rtfeldman$elm_css$Css$Structure$Property = function (a) {
	return {$: 'Property', a: a};
};
var $rtfeldman$elm_css$Css$Structure$Selector = F3(
	function (a, b, c) {
		return {$: 'Selector', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$Structure$StyleBlock = F3(
	function (a, b, c) {
		return {$: 'StyleBlock', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration = function (a) {
	return {$: 'StyleBlockDeclaration', a: a};
};
var $rtfeldman$elm_css$Css$Structure$SupportsRule = F2(
	function (a, b) {
		return {$: 'SupportsRule', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$Viewport = function (a) {
	return {$: 'Viewport', a: a};
};
var $rtfeldman$elm_css$Css$Structure$MediaRule = F2(
	function (a, b) {
		return {$: 'MediaRule', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$mapLast = F2(
	function (update, list) {
		if (!list.b) {
			return list;
		} else {
			if (!list.b.b) {
				var only = list.a;
				return _List_fromArray(
					[
						update(only)
					]);
			} else {
				var first = list.a;
				var rest = list.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Structure$mapLast, update, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Structure$withPropertyAppended = F2(
	function (property, _v0) {
		var firstSelector = _v0.a;
		var otherSelectors = _v0.b;
		var properties = _v0.c;
		return A3(
			$rtfeldman$elm_css$Css$Structure$StyleBlock,
			firstSelector,
			otherSelectors,
			_Utils_ap(
				properties,
				_List_fromArray(
					[property])));
	});
var $rtfeldman$elm_css$Css$Structure$appendProperty = F2(
	function (property, declarations) {
		if (!declarations.b) {
			return declarations;
		} else {
			if (!declarations.b.b) {
				switch (declarations.a.$) {
					case 'StyleBlockDeclaration':
						var styleBlock = declarations.a.a;
						return _List_fromArray(
							[
								$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
								A2($rtfeldman$elm_css$Css$Structure$withPropertyAppended, property, styleBlock))
							]);
					case 'MediaRule':
						var _v1 = declarations.a;
						var mediaQueries = _v1.a;
						var styleBlocks = _v1.b;
						return _List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Css$Structure$MediaRule,
								mediaQueries,
								A2(
									$rtfeldman$elm_css$Css$Structure$mapLast,
									$rtfeldman$elm_css$Css$Structure$withPropertyAppended(property),
									styleBlocks))
							]);
					default:
						return declarations;
				}
			} else {
				var first = declarations.a;
				var rest = declarations.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Structure$appendProperty, property, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendToLastSelector = F2(
	function (f, styleBlock) {
		if (!styleBlock.b.b) {
			var only = styleBlock.a;
			var properties = styleBlock.c;
			return _List_fromArray(
				[
					A3($rtfeldman$elm_css$Css$Structure$StyleBlock, only, _List_Nil, properties),
					A3(
					$rtfeldman$elm_css$Css$Structure$StyleBlock,
					f(only),
					_List_Nil,
					_List_Nil)
				]);
		} else {
			var first = styleBlock.a;
			var rest = styleBlock.b;
			var properties = styleBlock.c;
			var newRest = A2($elm$core$List$map, f, rest);
			var newFirst = f(first);
			return _List_fromArray(
				[
					A3($rtfeldman$elm_css$Css$Structure$StyleBlock, first, rest, properties),
					A3($rtfeldman$elm_css$Css$Structure$StyleBlock, newFirst, newRest, _List_Nil)
				]);
		}
	});
var $rtfeldman$elm_css$Css$Structure$applyPseudoElement = F2(
	function (pseudo, _v0) {
		var sequence = _v0.a;
		var selectors = _v0.b;
		return A3(
			$rtfeldman$elm_css$Css$Structure$Selector,
			sequence,
			selectors,
			$elm$core$Maybe$Just(pseudo));
	});
var $rtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector = F2(
	function (pseudo, styleBlock) {
		return A2(
			$rtfeldman$elm_css$Css$Structure$appendToLastSelector,
			$rtfeldman$elm_css$Css$Structure$applyPseudoElement(pseudo),
			styleBlock);
	});
var $rtfeldman$elm_css$Css$Structure$CustomSelector = F2(
	function (a, b) {
		return {$: 'CustomSelector', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$TypeSelectorSequence = F2(
	function (a, b) {
		return {$: 'TypeSelectorSequence', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence = function (a) {
	return {$: 'UniversalSelectorSequence', a: a};
};
var $rtfeldman$elm_css$Css$Structure$appendRepeatable = F2(
	function (selector, sequence) {
		switch (sequence.$) {
			case 'TypeSelectorSequence':
				var typeSelector = sequence.a;
				var list = sequence.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$TypeSelectorSequence,
					typeSelector,
					_Utils_ap(
						list,
						_List_fromArray(
							[selector])));
			case 'UniversalSelectorSequence':
				var list = sequence.a;
				return $rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(
					_Utils_ap(
						list,
						_List_fromArray(
							[selector])));
			default:
				var str = sequence.a;
				var list = sequence.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$CustomSelector,
					str,
					_Utils_ap(
						list,
						_List_fromArray(
							[selector])));
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator = F2(
	function (selector, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			if (!list.b.b) {
				var _v1 = list.a;
				var combinator = _v1.a;
				var sequence = _v1.b;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						combinator,
						A2($rtfeldman$elm_css$Css$Structure$appendRepeatable, selector, sequence))
					]);
			} else {
				var first = list.a;
				var rest = list.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, selector, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendRepeatableSelector = F2(
	function (repeatableSimpleSelector, selector) {
		if (!selector.b.b) {
			var sequence = selector.a;
			var pseudoElement = selector.c;
			return A3(
				$rtfeldman$elm_css$Css$Structure$Selector,
				A2($rtfeldman$elm_css$Css$Structure$appendRepeatable, repeatableSimpleSelector, sequence),
				_List_Nil,
				pseudoElement);
		} else {
			var firstSelector = selector.a;
			var tuples = selector.b;
			var pseudoElement = selector.c;
			return A3(
				$rtfeldman$elm_css$Css$Structure$Selector,
				firstSelector,
				A2($rtfeldman$elm_css$Css$Structure$appendRepeatableWithCombinator, repeatableSimpleSelector, tuples),
				pseudoElement);
		}
	});
var $rtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector = F2(
	function (selector, styleBlock) {
		return A2(
			$rtfeldman$elm_css$Css$Structure$appendToLastSelector,
			$rtfeldman$elm_css$Css$Structure$appendRepeatableSelector(selector),
			styleBlock);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors = function (declarations) {
	collectSelectors:
	while (true) {
		if (!declarations.b) {
			return _List_Nil;
		} else {
			if (declarations.a.$ === 'StyleBlockDeclaration') {
				var _v1 = declarations.a.a;
				var firstSelector = _v1.a;
				var otherSelectors = _v1.b;
				var rest = declarations.b;
				return _Utils_ap(
					A2($elm$core$List$cons, firstSelector, otherSelectors),
					$rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(rest));
			} else {
				var rest = declarations.b;
				var $temp$declarations = rest;
				declarations = $temp$declarations;
				continue collectSelectors;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Structure$DocumentRule = F5(
	function (a, b, c, d, e) {
		return {$: 'DocumentRule', a: a, b: b, c: c, d: d, e: e};
	});
var $rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock = F2(
	function (update, declarations) {
		_v0$12:
		while (true) {
			if (!declarations.b) {
				return declarations;
			} else {
				if (!declarations.b.b) {
					switch (declarations.a.$) {
						case 'StyleBlockDeclaration':
							var styleBlock = declarations.a.a;
							return A2(
								$elm$core$List$map,
								$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration,
								update(styleBlock));
						case 'MediaRule':
							if (declarations.a.b.b) {
								if (!declarations.a.b.b.b) {
									var _v1 = declarations.a;
									var mediaQueries = _v1.a;
									var _v2 = _v1.b;
									var styleBlock = _v2.a;
									return _List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Css$Structure$MediaRule,
											mediaQueries,
											update(styleBlock))
										]);
								} else {
									var _v3 = declarations.a;
									var mediaQueries = _v3.a;
									var _v4 = _v3.b;
									var first = _v4.a;
									var rest = _v4.b;
									var _v5 = A2(
										$rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock,
										update,
										_List_fromArray(
											[
												A2($rtfeldman$elm_css$Css$Structure$MediaRule, mediaQueries, rest)
											]));
									if ((_v5.b && (_v5.a.$ === 'MediaRule')) && (!_v5.b.b)) {
										var _v6 = _v5.a;
										var newMediaQueries = _v6.a;
										var newStyleBlocks = _v6.b;
										return _List_fromArray(
											[
												A2(
												$rtfeldman$elm_css$Css$Structure$MediaRule,
												newMediaQueries,
												A2($elm$core$List$cons, first, newStyleBlocks))
											]);
									} else {
										var newDeclarations = _v5;
										return newDeclarations;
									}
								}
							} else {
								break _v0$12;
							}
						case 'SupportsRule':
							var _v7 = declarations.a;
							var str = _v7.a;
							var nestedDeclarations = _v7.b;
							return _List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Css$Structure$SupportsRule,
									str,
									A2($rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, nestedDeclarations))
								]);
						case 'DocumentRule':
							var _v8 = declarations.a;
							var str1 = _v8.a;
							var str2 = _v8.b;
							var str3 = _v8.c;
							var str4 = _v8.d;
							var styleBlock = _v8.e;
							return A2(
								$elm$core$List$map,
								A4($rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4),
								update(styleBlock));
						case 'PageRule':
							return declarations;
						case 'FontFace':
							return declarations;
						case 'Keyframes':
							return declarations;
						case 'Viewport':
							return declarations;
						case 'CounterStyle':
							return declarations;
						default:
							return declarations;
					}
				} else {
					break _v0$12;
				}
			}
		}
		var first = declarations.a;
		var rest = declarations.b;
		return A2(
			$elm$core$List$cons,
			first,
			A2($rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, update, rest));
	});
var $elm$core$String$cons = _String_cons;
var $robinheghan$murmur3$Murmur3$HashData = F4(
	function (shift, seed, hash, charsProcessed) {
		return {charsProcessed: charsProcessed, hash: hash, seed: seed, shift: shift};
	});
var $robinheghan$murmur3$Murmur3$c1 = 3432918353;
var $robinheghan$murmur3$Murmur3$c2 = 461845907;
var $robinheghan$murmur3$Murmur3$multiplyBy = F2(
	function (b, a) {
		return ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $robinheghan$murmur3$Murmur3$rotlBy = F2(
	function (b, a) {
		return (a << b) | (a >>> (32 - b));
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $robinheghan$murmur3$Murmur3$finalize = function (data) {
	var acc = (!(!data.hash)) ? (data.seed ^ A2(
		$robinheghan$murmur3$Murmur3$multiplyBy,
		$robinheghan$murmur3$Murmur3$c2,
		A2(
			$robinheghan$murmur3$Murmur3$rotlBy,
			15,
			A2($robinheghan$murmur3$Murmur3$multiplyBy, $robinheghan$murmur3$Murmur3$c1, data.hash)))) : data.seed;
	var h0 = acc ^ data.charsProcessed;
	var h1 = A2($robinheghan$murmur3$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));
	var h2 = A2($robinheghan$murmur3$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));
	return (h2 ^ (h2 >>> 16)) >>> 0;
};
var $elm$core$String$foldl = _String_foldl;
var $robinheghan$murmur3$Murmur3$mix = F2(
	function (h1, k1) {
		return A2(
			$robinheghan$murmur3$Murmur3$multiplyBy,
			5,
			A2(
				$robinheghan$murmur3$Murmur3$rotlBy,
				13,
				h1 ^ A2(
					$robinheghan$murmur3$Murmur3$multiplyBy,
					$robinheghan$murmur3$Murmur3$c2,
					A2(
						$robinheghan$murmur3$Murmur3$rotlBy,
						15,
						A2($robinheghan$murmur3$Murmur3$multiplyBy, $robinheghan$murmur3$Murmur3$c1, k1))))) + 3864292196;
	});
var $robinheghan$murmur3$Murmur3$hashFold = F2(
	function (c, data) {
		var res = data.hash | ((255 & $elm$core$Char$toCode(c)) << data.shift);
		var _v0 = data.shift;
		if (_v0 === 24) {
			return {
				charsProcessed: data.charsProcessed + 1,
				hash: 0,
				seed: A2($robinheghan$murmur3$Murmur3$mix, data.seed, res),
				shift: 0
			};
		} else {
			return {charsProcessed: data.charsProcessed + 1, hash: res, seed: data.seed, shift: data.shift + 8};
		}
	});
var $robinheghan$murmur3$Murmur3$hashString = F2(
	function (seed, str) {
		return $robinheghan$murmur3$Murmur3$finalize(
			A3(
				$elm$core$String$foldl,
				$robinheghan$murmur3$Murmur3$hashFold,
				A4($robinheghan$murmur3$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});
var $rtfeldman$elm_css$Hash$initialSeed = 15739;
var $elm$core$String$fromList = _String_fromList;
var $elm$core$Basics$modBy = _Basics_modBy;
var $rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {
	unsafeToDigit:
	while (true) {
		switch (num) {
			case 0:
				return _Utils_chr('0');
			case 1:
				return _Utils_chr('1');
			case 2:
				return _Utils_chr('2');
			case 3:
				return _Utils_chr('3');
			case 4:
				return _Utils_chr('4');
			case 5:
				return _Utils_chr('5');
			case 6:
				return _Utils_chr('6');
			case 7:
				return _Utils_chr('7');
			case 8:
				return _Utils_chr('8');
			case 9:
				return _Utils_chr('9');
			case 10:
				return _Utils_chr('a');
			case 11:
				return _Utils_chr('b');
			case 12:
				return _Utils_chr('c');
			case 13:
				return _Utils_chr('d');
			case 14:
				return _Utils_chr('e');
			case 15:
				return _Utils_chr('f');
			default:
				var $temp$num = num;
				num = $temp$num;
				continue unsafeToDigit;
		}
	}
};
var $rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (num < 16) {
				return A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(num),
					digits);
			} else {
				var $temp$digits = A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(
						A2($elm$core$Basics$modBy, 16, num)),
					digits),
					$temp$num = (num / 16) | 0;
				digits = $temp$digits;
				num = $temp$num;
				continue unsafePositiveToDigits;
			}
		}
	});
var $rtfeldman$elm_hex$Hex$toString = function (num) {
	return $elm$core$String$fromList(
		(num < 0) ? A2(
			$elm$core$List$cons,
			_Utils_chr('-'),
			A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));
};
var $rtfeldman$elm_css$Hash$fromString = function (str) {
	return A2(
		$elm$core$String$cons,
		_Utils_chr('_'),
		$rtfeldman$elm_hex$Hex$toString(
			A2($robinheghan$murmur3$Murmur3$hashString, $rtfeldman$elm_css$Hash$initialSeed, str)));
};
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$last = function (list) {
	last:
	while (true) {
		if (!list.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!list.b.b) {
				var singleton = list.a;
				return $elm$core$Maybe$Just(singleton);
			} else {
				var rest = list.b;
				var $temp$list = rest;
				list = $temp$list;
				continue last;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration = function (declarations) {
	lastDeclaration:
	while (true) {
		if (!declarations.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!declarations.b.b) {
				var x = declarations.a;
				return $elm$core$Maybe$Just(
					_List_fromArray(
						[x]));
			} else {
				var xs = declarations.b;
				var $temp$declarations = xs;
				declarations = $temp$declarations;
				continue lastDeclaration;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$oneOf = function (maybes) {
	oneOf:
	while (true) {
		if (!maybes.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var maybe = maybes.a;
			var rest = maybes.b;
			if (maybe.$ === 'Nothing') {
				var $temp$maybes = rest;
				maybes = $temp$maybes;
				continue oneOf;
			} else {
				return maybe;
			}
		}
	}
};
var $rtfeldman$elm_css$Css$Structure$FontFeatureValues = function (a) {
	return {$: 'FontFeatureValues', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues = function (tuples) {
	var expandTuples = function (tuplesToExpand) {
		if (!tuplesToExpand.b) {
			return _List_Nil;
		} else {
			var properties = tuplesToExpand.a;
			var rest = tuplesToExpand.b;
			return A2(
				$elm$core$List$cons,
				properties,
				expandTuples(rest));
		}
	};
	var newTuples = expandTuples(tuples);
	return _List_fromArray(
		[
			$rtfeldman$elm_css$Css$Structure$FontFeatureValues(newTuples)
		]);
};
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $rtfeldman$elm_css$Css$Structure$styleBlockToMediaRule = F2(
	function (mediaQueries, declaration) {
		if (declaration.$ === 'StyleBlockDeclaration') {
			var styleBlock = declaration.a;
			return A2(
				$rtfeldman$elm_css$Css$Structure$MediaRule,
				mediaQueries,
				_List_fromArray(
					[styleBlock]));
		} else {
			return declaration;
		}
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule = F5(
	function (str1, str2, str3, str4, declaration) {
		if (declaration.$ === 'StyleBlockDeclaration') {
			var structureStyleBlock = declaration.a;
			return A5($rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);
		} else {
			return declaration;
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule = F2(
	function (mediaQueries, declaration) {
		switch (declaration.$) {
			case 'StyleBlockDeclaration':
				var structureStyleBlock = declaration.a;
				return A2(
					$rtfeldman$elm_css$Css$Structure$MediaRule,
					mediaQueries,
					_List_fromArray(
						[structureStyleBlock]));
			case 'MediaRule':
				var newMediaQueries = declaration.a;
				var structureStyleBlocks = declaration.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$MediaRule,
					_Utils_ap(mediaQueries, newMediaQueries),
					structureStyleBlocks);
			case 'SupportsRule':
				var str = declaration.a;
				var declarations = declaration.b;
				return A2(
					$rtfeldman$elm_css$Css$Structure$SupportsRule,
					str,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),
						declarations));
			case 'DocumentRule':
				var str1 = declaration.a;
				var str2 = declaration.b;
				var str3 = declaration.c;
				var str4 = declaration.d;
				var structureStyleBlock = declaration.e;
				return A5($rtfeldman$elm_css$Css$Structure$DocumentRule, str1, str2, str3, str4, structureStyleBlock);
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return declaration;
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet = function (_v0) {
	var declarations = _v0.a;
	return declarations;
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast = F4(
	function (nestedStyles, rest, f, declarations) {
		var withoutParent = function (decls) {
			return A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				$elm$core$List$tail(decls));
		};
		var nextResult = A2(
			$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
			rest,
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));
		var newDeclarations = function () {
			var _v14 = _Utils_Tuple2(
				$elm$core$List$head(nextResult),
				$rtfeldman$elm_css$Css$Preprocess$Resolve$last(declarations));
			if ((_v14.a.$ === 'Just') && (_v14.b.$ === 'Just')) {
				var nextResultParent = _v14.a.a;
				var originalParent = _v14.b.a;
				return _Utils_ap(
					A2(
						$elm$core$List$take,
						$elm$core$List$length(declarations) - 1,
						declarations),
					_List_fromArray(
						[
							(!_Utils_eq(originalParent, nextResultParent)) ? nextResultParent : originalParent
						]));
			} else {
				return declarations;
			}
		}();
		var insertStylesToNestedDecl = function (lastDecl) {
			return $elm$core$List$concat(
				A2(
					$rtfeldman$elm_css$Css$Structure$mapLast,
					$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles(nestedStyles),
					A2(
						$elm$core$List$map,
						$elm$core$List$singleton,
						A2($rtfeldman$elm_css$Css$Structure$concatMapLastStyleBlock, f, lastDecl))));
		};
		var initialResult = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				insertStylesToNestedDecl,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$lastDeclaration(declarations)));
		return _Utils_ap(
			newDeclarations,
			_Utils_ap(
				withoutParent(initialResult),
				withoutParent(nextResult)));
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles = F2(
	function (styles, declarations) {
		if (!styles.b) {
			return declarations;
		} else {
			switch (styles.a.$) {
				case 'AppendProperty':
					var property = styles.a.a;
					var rest = styles.b;
					return A2(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
						rest,
						A2($rtfeldman$elm_css$Css$Structure$appendProperty, property, declarations));
				case 'ExtendSelector':
					var _v4 = styles.a;
					var selector = _v4.a;
					var nestedStyles = _v4.b;
					var rest = styles.b;
					return A4(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,
						nestedStyles,
						rest,
						$rtfeldman$elm_css$Css$Structure$appendRepeatableToLastSelector(selector),
						declarations);
				case 'NestSnippet':
					var _v5 = styles.a;
					var selectorCombinator = _v5.a;
					var snippets = _v5.b;
					var rest = styles.b;
					var chain = F2(
						function (_v9, _v10) {
							var originalSequence = _v9.a;
							var originalTuples = _v9.b;
							var originalPseudoElement = _v9.c;
							var newSequence = _v10.a;
							var newTuples = _v10.b;
							var newPseudoElement = _v10.c;
							return A3(
								$rtfeldman$elm_css$Css$Structure$Selector,
								originalSequence,
								_Utils_ap(
									originalTuples,
									A2(
										$elm$core$List$cons,
										_Utils_Tuple2(selectorCombinator, newSequence),
										newTuples)),
								$rtfeldman$elm_css$Css$Preprocess$Resolve$oneOf(
									_List_fromArray(
										[newPseudoElement, originalPseudoElement])));
						});
					var expandDeclaration = function (declaration) {
						switch (declaration.$) {
							case 'StyleBlockDeclaration':
								var _v7 = declaration.a;
								var firstSelector = _v7.a;
								var otherSelectors = _v7.b;
								var nestedStyles = _v7.c;
								var newSelectors = A2(
									$elm$core$List$concatMap,
									function (originalSelector) {
										return A2(
											$elm$core$List$map,
											chain(originalSelector),
											A2($elm$core$List$cons, firstSelector, otherSelectors));
									},
									$rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations));
								var newDeclarations = function () {
									if (!newSelectors.b) {
										return _List_Nil;
									} else {
										var first = newSelectors.a;
										var remainder = newSelectors.b;
										return _List_fromArray(
											[
												$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
												A3($rtfeldman$elm_css$Css$Structure$StyleBlock, first, remainder, _List_Nil))
											]);
									}
								}();
								return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, nestedStyles, newDeclarations);
							case 'MediaRule':
								var mediaQueries = declaration.a;
								var styleBlocks = declaration.b;
								return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);
							case 'SupportsRule':
								var str = declaration.a;
								var otherSnippets = declaration.b;
								return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, otherSnippets);
							case 'DocumentRule':
								var str1 = declaration.a;
								var str2 = declaration.b;
								var str3 = declaration.c;
								var str4 = declaration.d;
								var styleBlock = declaration.e;
								return A2(
									$elm$core$List$map,
									A4($rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),
									$rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));
							case 'PageRule':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$PageRule(properties)
									]);
							case 'FontFace':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$FontFace(properties)
									]);
							case 'Viewport':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$Viewport(properties)
									]);
							case 'CounterStyle':
								var properties = declaration.a;
								return _List_fromArray(
									[
										$rtfeldman$elm_css$Css$Structure$CounterStyle(properties)
									]);
							default:
								var tuples = declaration.a;
								return $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);
						}
					};
					return $elm$core$List$concat(
						_Utils_ap(
							_List_fromArray(
								[
									A2($rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations)
								]),
							A2(
								$elm$core$List$map,
								expandDeclaration,
								A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets))));
				case 'WithPseudoElement':
					var _v11 = styles.a;
					var pseudoElement = _v11.a;
					var nestedStyles = _v11.b;
					var rest = styles.b;
					return A4(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyNestedStylesToLast,
						nestedStyles,
						rest,
						$rtfeldman$elm_css$Css$Structure$appendPseudoElementToLastSelector(pseudoElement),
						declarations);
				case 'WithKeyframes':
					var str = styles.a.a;
					var rest = styles.b;
					var name = $rtfeldman$elm_css$Hash$fromString(str);
					var newProperty = $rtfeldman$elm_css$Css$Structure$Property('animation-name:' + name);
					var newDeclarations = A2(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
						rest,
						A2($rtfeldman$elm_css$Css$Structure$appendProperty, newProperty, declarations));
					return A2(
						$elm$core$List$append,
						newDeclarations,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Structure$Keyframes(
								{declaration: str, name: name})
							]));
				case 'WithMedia':
					var _v12 = styles.a;
					var mediaQueries = _v12.a;
					var nestedStyles = _v12.b;
					var rest = styles.b;
					var extraDeclarations = function () {
						var _v13 = $rtfeldman$elm_css$Css$Preprocess$Resolve$collectSelectors(declarations);
						if (!_v13.b) {
							return _List_Nil;
						} else {
							var firstSelector = _v13.a;
							var otherSelectors = _v13.b;
							return A2(
								$elm$core$List$map,
								$rtfeldman$elm_css$Css$Structure$styleBlockToMediaRule(mediaQueries),
								A2(
									$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
									nestedStyles,
									$elm$core$List$singleton(
										$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
											A3($rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil)))));
						}
					}();
					return _Utils_ap(
						A2($rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles, rest, declarations),
						extraDeclarations);
				default:
					var otherStyles = styles.a.a;
					var rest = styles.b;
					return A2(
						$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
						_Utils_ap(otherStyles, rest),
						declarations);
			}
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock = function (_v2) {
	var firstSelector = _v2.a;
	var otherSelectors = _v2.b;
	var styles = _v2.c;
	return A2(
		$rtfeldman$elm_css$Css$Preprocess$Resolve$applyStyles,
		styles,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Css$Structure$StyleBlockDeclaration(
				A3($rtfeldman$elm_css$Css$Structure$StyleBlock, firstSelector, otherSelectors, _List_Nil))
			]));
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$extract = function (snippetDeclarations) {
	if (!snippetDeclarations.b) {
		return _List_Nil;
	} else {
		var first = snippetDeclarations.a;
		var rest = snippetDeclarations.b;
		return _Utils_ap(
			$rtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations(first),
			$rtfeldman$elm_css$Css$Preprocess$Resolve$extract(rest));
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule = F2(
	function (mediaQueries, styleBlocks) {
		var handleStyleBlock = function (styleBlock) {
			return A2(
				$elm$core$List$map,
				$rtfeldman$elm_css$Css$Preprocess$Resolve$toMediaRule(mediaQueries),
				$rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));
		};
		return A2($elm$core$List$concatMap, handleStyleBlock, styleBlocks);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule = F2(
	function (str, snippets) {
		var declarations = $rtfeldman$elm_css$Css$Preprocess$Resolve$extract(
			A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));
		return _List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$Structure$SupportsRule, str, declarations)
			]);
	});
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toDeclarations = function (snippetDeclaration) {
	switch (snippetDeclaration.$) {
		case 'StyleBlockDeclaration':
			var styleBlock = snippetDeclaration.a;
			return $rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock);
		case 'MediaRule':
			var mediaQueries = snippetDeclaration.a;
			var styleBlocks = snippetDeclaration.b;
			return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveMediaRule, mediaQueries, styleBlocks);
		case 'SupportsRule':
			var str = snippetDeclaration.a;
			var snippets = snippetDeclaration.b;
			return A2($rtfeldman$elm_css$Css$Preprocess$Resolve$resolveSupportsRule, str, snippets);
		case 'DocumentRule':
			var str1 = snippetDeclaration.a;
			var str2 = snippetDeclaration.b;
			var str3 = snippetDeclaration.c;
			var str4 = snippetDeclaration.d;
			var styleBlock = snippetDeclaration.e;
			return A2(
				$elm$core$List$map,
				A4($rtfeldman$elm_css$Css$Preprocess$Resolve$toDocumentRule, str1, str2, str3, str4),
				$rtfeldman$elm_css$Css$Preprocess$Resolve$expandStyleBlock(styleBlock));
		case 'PageRule':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$PageRule(properties)
				]);
		case 'FontFace':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$FontFace(properties)
				]);
		case 'Viewport':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$Viewport(properties)
				]);
		case 'CounterStyle':
			var properties = snippetDeclaration.a;
			return _List_fromArray(
				[
					$rtfeldman$elm_css$Css$Structure$CounterStyle(properties)
				]);
		default:
			var tuples = snippetDeclaration.a;
			return $rtfeldman$elm_css$Css$Preprocess$Resolve$resolveFontFeatureValues(tuples);
	}
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$toStructure = function (_v0) {
	var charset = _v0.charset;
	var imports = _v0.imports;
	var namespaces = _v0.namespaces;
	var snippets = _v0.snippets;
	var declarations = $rtfeldman$elm_css$Css$Preprocess$Resolve$extract(
		A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets));
	return {charset: charset, declarations: declarations, imports: imports, namespaces: namespaces};
};
var $rtfeldman$elm_css$Css$Preprocess$Resolve$compile = function (sheet) {
	return $rtfeldman$elm_css$Css$Structure$Output$prettyPrint(
		$rtfeldman$elm_css$Css$Structure$compactStylesheet(
			$rtfeldman$elm_css$Css$Preprocess$Resolve$toStructure(sheet)));
};
var $rtfeldman$elm_css$Css$Preprocess$Snippet = function (a) {
	return {$: 'Snippet', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$StyleBlock = F3(
	function (a, b, c) {
		return {$: 'StyleBlock', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration = function (a) {
	return {$: 'StyleBlockDeclaration', a: a};
};
var $rtfeldman$elm_css$VirtualDom$Styled$makeSnippet = F2(
	function (styles, sequence) {
		var selector = A3($rtfeldman$elm_css$Css$Structure$Selector, sequence, _List_Nil, $elm$core$Maybe$Nothing);
		return $rtfeldman$elm_css$Css$Preprocess$Snippet(
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Preprocess$StyleBlockDeclaration(
					A3($rtfeldman$elm_css$Css$Preprocess$StyleBlock, selector, _List_Nil, styles))
				]));
	});
var $rtfeldman$elm_css$Css$Preprocess$stylesheet = function (snippets) {
	return {charset: $elm$core$Maybe$Nothing, imports: _List_Nil, namespaces: _List_Nil, snippets: snippets};
};
var $rtfeldman$elm_css$Css$Structure$ClassSelector = function (a) {
	return {$: 'ClassSelector', a: a};
};
var $rtfeldman$elm_css$VirtualDom$Styled$classnameStandin = '\u0007';
var $rtfeldman$elm_css$VirtualDom$Styled$templateSelector = $rtfeldman$elm_css$Css$Structure$UniversalSelectorSequence(
	_List_fromArray(
		[
			$rtfeldman$elm_css$Css$Structure$ClassSelector($rtfeldman$elm_css$VirtualDom$Styled$classnameStandin)
		]));
var $rtfeldman$elm_css$VirtualDom$Styled$getCssTemplate = function (styles) {
	if (!styles.b) {
		return '';
	} else {
		var otherwise = styles;
		return $rtfeldman$elm_css$Css$Preprocess$Resolve$compile(
			$rtfeldman$elm_css$Css$Preprocess$stylesheet(
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$VirtualDom$Styled$makeSnippet, styles, $rtfeldman$elm_css$VirtualDom$Styled$templateSelector)
					])));
	}
};
var $rtfeldman$elm_css$Html$Styled$Internal$css = function (styles) {
	var cssTemplate = $rtfeldman$elm_css$VirtualDom$Styled$getCssTemplate(styles);
	var classProperty = A2($elm$virtual_dom$VirtualDom$attribute, '', '');
	return A3($rtfeldman$elm_css$VirtualDom$Styled$Attribute, classProperty, true, cssTemplate);
};
var $rtfeldman$elm_css$Html$Styled$Attributes$css = $rtfeldman$elm_css$Html$Styled$Internal$css;
var $rtfeldman$elm_css$Html$Styled$div = $rtfeldman$elm_css$Html$Styled$node('div');
var $rtfeldman$elm_css$Html$Styled$Attributes$href = function (url) {
	return A2($rtfeldman$elm_css$Html$Styled$Attributes$stringProperty, 'href', url);
};
var $rtfeldman$elm_css$Html$Styled$img = $rtfeldman$elm_css$Html$Styled$node('img');
var $rtfeldman$elm_css$Css$Structure$CustomQuery = function (a) {
	return {$: 'CustomQuery', a: a};
};
var $rtfeldman$elm_css$Css$Preprocess$WithMedia = F2(
	function (a, b) {
		return {$: 'WithMedia', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Media$withMediaQuery = function (queries) {
	return $rtfeldman$elm_css$Css$Preprocess$WithMedia(
		A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$CustomQuery, queries));
};
var $author$project$Tailwind$Breakpoints$lg = $rtfeldman$elm_css$Css$Media$withMediaQuery(
	_List_fromArray(
		['(min-width: 1024px)']));
var $rtfeldman$elm_css$Css$Preprocess$ApplyStyles = function (a) {
	return {$: 'ApplyStyles', a: a};
};
var $rtfeldman$elm_css$Css$batch = $rtfeldman$elm_css$Css$Preprocess$ApplyStyles;
var $rtfeldman$elm_css$Css$Preprocess$AppendProperty = function (a) {
	return {$: 'AppendProperty', a: a};
};
var $rtfeldman$elm_css$Css$property = F2(
	function (key, value) {
		return $rtfeldman$elm_css$Css$Preprocess$AppendProperty(
			$rtfeldman$elm_css$Css$Structure$Property(key + (':' + value)));
	});
var $author$project$Tailwind$Utilities$mx_auto = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'margin-left', 'auto'),
			A2($rtfeldman$elm_css$Css$property, 'margin-right', 'auto')
		]));
var $author$project$Tailwind$Utilities$py_3 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-top', '0.75rem'),
			A2($rtfeldman$elm_css$Css$property, 'padding-bottom', '0.75rem')
		]));
var $rtfeldman$elm_css$Html$Styled$Attributes$src = function (url) {
	return A2($rtfeldman$elm_css$Html$Styled$Attributes$stringProperty, 'src', url);
};
var $author$project$Tailwind$Utilities$w_36 = A2($rtfeldman$elm_css$Css$property, 'width', '9rem');
var $author$project$Tailwind$Utilities$w_44 = A2($rtfeldman$elm_css$Css$property, 'width', '11rem');
var $author$project$View$Misc$contact = A2(
	$rtfeldman$elm_css$Html$Styled$div,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_List_fromArray(
				[
					$author$project$Tailwind$Breakpoints$lg(
					_List_fromArray(
						[$author$project$Tailwind$Utilities$w_44])),
					$author$project$Tailwind$Utilities$w_36,
					$author$project$Tailwind$Utilities$py_3,
					$author$project$Tailwind$Utilities$mx_auto
				]))
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Html$Styled$a,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$href('/contact')
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src('/ressurser/takontakt.png'),
							$rtfeldman$elm_css$Html$Styled$Attributes$alt('Ta kontakt')
						]),
					_List_Nil)
				]))
		]));
var $author$project$Tailwind$Utilities$flex = A2($rtfeldman$elm_css$Css$property, 'display', 'flex');
var $author$project$Tailwind$Utilities$flex_col = A2($rtfeldman$elm_css$Css$property, 'flex-direction', 'column');
var $author$project$Tailwind$Breakpoints$md = $rtfeldman$elm_css$Css$Media$withMediaQuery(
	_List_fromArray(
		['(min-width: 768px)']));
var $author$project$Tailwind$Utilities$px_24 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-left', '6rem'),
			A2($rtfeldman$elm_css$Css$property, 'padding-right', '6rem')
		]));
var $author$project$View$Misc$container = function (child) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$div,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$author$project$Tailwind$Breakpoints$md(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$px_24])),
						$author$project$Tailwind$Utilities$flex,
						$author$project$Tailwind$Utilities$flex_col
					]))
			]),
		child);
};
var $dillonkearns$elm_markdown$Markdown$Parser$problemToString = function (problem) {
	switch (problem.$) {
		case 'Expecting':
			var string = problem.a;
			return 'Expecting ' + string;
		case 'ExpectingInt':
			return 'Expecting int';
		case 'ExpectingHex':
			return 'Expecting hex';
		case 'ExpectingOctal':
			return 'Expecting octal';
		case 'ExpectingBinary':
			return 'Expecting binary';
		case 'ExpectingFloat':
			return 'Expecting float';
		case 'ExpectingNumber':
			return 'Expecting number';
		case 'ExpectingVariable':
			return 'Expecting variable';
		case 'ExpectingSymbol':
			var string = problem.a;
			return 'Expecting symbol ' + string;
		case 'ExpectingKeyword':
			var string = problem.a;
			return 'Expecting keyword ' + string;
		case 'ExpectingEnd':
			return 'Expecting keyword end';
		case 'UnexpectedChar':
			return 'Unexpected char';
		case 'Problem':
			var problemDescription = problem.a;
			return problemDescription;
		default:
			return 'Bad repeat';
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString = function (deadEnd) {
	return 'Problem at row ' + ($elm$core$String$fromInt(deadEnd.row) + ('\n' + $dillonkearns$elm_markdown$Markdown$Parser$problemToString(deadEnd.problem)));
};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $jorgengranseth$elm_string_format$String$Format$regex = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$fromString,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never));
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $jorgengranseth$elm_string_format$String$Format$namedValue = F2(
	function (name, val) {
		var placeholder = $jorgengranseth$elm_string_format$String$Format$regex('{{\\s*' + (name + '\\s*}}'));
		return A2(
			$elm$regex$Regex$replace,
			placeholder,
			function (_v0) {
				return val;
			});
	});
var $author$project$Page$About$eventTypeIcon = function (eventType) {
	var imgSource = A3($jorgengranseth$elm_string_format$String$Format$namedValue, 'eventType', eventType, '/ressurser/{{ eventType }}.svg');
	return A2(
		$rtfeldman$elm_css$Html$Styled$img,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$src(imgSource),
				$rtfeldman$elm_css$Html$Styled$Attributes$alt(eventType)
			]),
		_List_Nil);
};
var $author$project$Tailwind$Utilities$flex_row = A2($rtfeldman$elm_css$Css$property, 'flex-direction', 'row');
var $author$project$Tailwind$Utilities$flex_wrap = A2($rtfeldman$elm_css$Css$property, 'flex-wrap', 'wrap');
var $rtfeldman$elm_css$Css$prop1 = F2(
	function (key, arg) {
		return A2($rtfeldman$elm_css$Css$property, key, arg.value);
	});
var $rtfeldman$elm_css$Css$stringsToValue = function (list) {
	return $elm$core$List$isEmpty(list) ? {value: 'none'} : {
		value: A2($elm$core$String$join, ', ', list)
	};
};
var $rtfeldman$elm_css$Css$fontFamilies = A2(
	$elm$core$Basics$composeL,
	$rtfeldman$elm_css$Css$prop1('font-family'),
	$rtfeldman$elm_css$Css$stringsToValue);
var $rtfeldman$elm_css$Html$Styled$h1 = $rtfeldman$elm_css$Html$Styled$node('h1');
var $author$project$Tailwind$Utilities$pt_10 = A2($rtfeldman$elm_css$Css$property, 'padding-top', '2.5rem');
var $author$project$Tailwind$Utilities$pt_12 = A2($rtfeldman$elm_css$Css$property, 'padding-top', '3rem');
var $author$project$Tailwind$Utilities$py_6 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-top', '1.5rem'),
			A2($rtfeldman$elm_css$Css$property, 'padding-bottom', '1.5rem')
		]));
var $rtfeldman$elm_css$VirtualDom$Styled$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $rtfeldman$elm_css$VirtualDom$Styled$text = function (str) {
	return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
		$elm$virtual_dom$VirtualDom$text(str));
};
var $rtfeldman$elm_css$Html$Styled$text = $rtfeldman$elm_css$VirtualDom$Styled$text;
var $author$project$Tailwind$Utilities$text_6xl = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'font-size', '3.75rem'),
			A2($rtfeldman$elm_css$Css$property, 'line-height', '1')
		]));
var $author$project$Tailwind$Utilities$text_8xl = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'font-size', '6rem'),
			A2($rtfeldman$elm_css$Css$property, 'line-height', '1')
		]));
var $author$project$Tailwind$Utilities$text_brown = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(183, 168, 162, var(--tw-text-opacity))')
		]));
var $author$project$Tailwind$Utilities$text_center = A2($rtfeldman$elm_css$Css$property, 'text-align', 'center');
var $author$project$Tailwind$Utilities$text_left = A2($rtfeldman$elm_css$Css$property, 'text-align', 'left');
var $author$project$Tailwind$Breakpoints$xl = $rtfeldman$elm_css$Css$Media$withMediaQuery(
	_List_fromArray(
		['(min-width: 1280px)']));
var $author$project$View$Misc$headline = function (content) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$h1,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$author$project$Tailwind$Breakpoints$xl(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$pt_12])),
						$author$project$Tailwind$Breakpoints$lg(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$pt_12])),
						$author$project$Tailwind$Breakpoints$md(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$text_left, $author$project$Tailwind$Utilities$text_8xl])),
						$author$project$Tailwind$Utilities$text_center,
						$author$project$Tailwind$Utilities$pt_10,
						$author$project$Tailwind$Utilities$text_6xl,
						$author$project$Tailwind$Utilities$py_6,
						$rtfeldman$elm_css$Css$fontFamilies(
						_List_fromArray(
							['luxus-brut', 'cursive'])),
						$author$project$Tailwind$Utilities$text_brown
					]))
			]),
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$text(content)
			]));
};
var $author$project$View$html = F2(
	function (title, body) {
		return {body: body, title: 'Aspargesgården | ' + title};
	});
var $author$project$Tailwind$Utilities$justify_center = A2($rtfeldman$elm_css$Css$property, 'justify-content', 'center');
var $author$project$Tailwind$Utilities$neg_mt_12 = A2($rtfeldman$elm_css$Css$property, 'margin-top', '-3rem');
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine = {$: 'BlankLine'};
var $dillonkearns$elm_markdown$Markdown$Block$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeSpan = function (a) {
	return {$: 'CodeSpan', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CompletedTask = {$: 'CompletedTask'};
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Emphasis = function (a) {
	return {$: 'Emphasis', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Emphasis = F2(
	function (a, b) {
		return {$: 'Emphasis', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock = {$: 'EmptyBlock'};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Block$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Html = function (a) {
	return {$: 'Html', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock = function (a) {
	return {$: 'HtmlBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlComment = function (a) {
	return {$: 'HtmlComment', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration = F2(
	function (a, b) {
		return {$: 'HtmlDeclaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlElement = F3(
	function (a, b, c) {
		return {$: 'HtmlElement', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask = {$: 'IncompleteTask'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock = function (a) {
	return {$: 'IndentedCodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem = function (a) {
	return {$: 'InlineProblem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$ListItem = F2(
	function (a, b) {
		return {$: 'ListItem', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$NoTask = {$: 'NoTask'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph = function (a) {
	return {$: 'OpenBlockOrParagraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$OrderedList = F3(
	function (a, b, c) {
		return {$: 'OrderedList', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock = F6(
	function (a, b, c, d, e, f) {
		return {$: 'OrderedListBlock', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Paragraph = function (a) {
	return {$: 'Paragraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock = function (a) {
	return {$: 'ParsedBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote = function (a) {
	return {$: 'ParsedBlockQuote', a: a};
};
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strong = function (a) {
	return {$: 'Strong', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Table = function (a) {
	return {$: 'Table', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Table$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow = F2(
	function (a, b) {
		return {$: 'TableDelimiterRow', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak = {$: 'ThematicBreak'};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$UnorderedList = F2(
	function (a, b) {
		return {$: 'UnorderedList', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock = F4(
	function (a, b, c, d) {
		return {$: 'UnorderedListBlock', a: a, b: b, c: c, d: d};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines = function (a) {
	return {$: 'UnparsedInlines', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$addReference = F2(
	function (state, linkRef) {
		return {
			linkReferenceDefinitions: A2($elm$core$List$cons, linkRef, state.linkReferenceDefinitions),
			rawBlocks: state.rawBlocks
		};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Parser$Token$carriageReturn = A2(
	$elm$parser$Parser$Advanced$Token,
	'\u000D',
	$elm$parser$Parser$Expecting('a carriage return'));
var $dillonkearns$elm_markdown$Parser$Token$newline = A2(
	$elm$parser$Parser$Advanced$Token,
	'\n',
	$elm$parser$Parser$Expecting('a newline'));
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$Whitespace$lineEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$carriageReturn),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					])))
		]));
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $dillonkearns$elm_markdown$Markdown$Parser$blankLine = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine;
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$dillonkearns$elm_markdown$Whitespace$lineEnd));
var $dillonkearns$elm_markdown$Parser$Token$space = A2(
	$elm$parser$Parser$Advanced$Token,
	' ',
	$elm$parser$Parser$Expecting('a space'));
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts = _List_fromArray(
	[
		$elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			'>',
			$elm$parser$Parser$Expecting('>'))),
		A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'>',
						$elm$parser$Parser$Expecting(' >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						' >',
						$elm$parser$Parser$Expecting('  >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'  >',
						$elm$parser$Parser$Expecting('   >')))
				])))
	]);
var $dillonkearns$elm_markdown$Whitespace$isLineEnd = function (_char) {
	switch (_char.valueOf()) {
		case '\n':
			return true;
		case '\u000D':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd = $elm$parser$Parser$Advanced$chompWhile(
	A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd));
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $dillonkearns$elm_markdown$Helpers$endOfFile = $elm$parser$Parser$Advanced$end(
	$elm$parser$Parser$Expecting('the end of the input'));
var $dillonkearns$elm_markdown$Helpers$lineEndOrEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$dillonkearns$elm_markdown$Whitespace$lineEnd, $dillonkearns$elm_markdown$Helpers$endOfFile]));
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuote = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote),
			$elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString = function (deadEnds) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, deadEnds));
};
var $dillonkearns$elm_markdown$Markdown$Parser$endWithOpenBlockOrParagraph = function (block) {
	endWithOpenBlockOrParagraph:
	while (true) {
		switch (block.$) {
			case 'OpenBlockOrParagraph':
				var str = block.a.a;
				return !A2($elm$core$String$endsWith, str, '\n');
			case 'ParsedBlockQuote':
				var blocks = block.a;
				if (blocks.b) {
					var last = blocks.a;
					var $temp$block = last;
					block = $temp$block;
					continue endWithOpenBlockOrParagraph;
				} else {
					return false;
				}
			case 'OrderedListBlock':
				var blockslist = block.e;
				if (blockslist.b) {
					var blocks = blockslist.a;
					if (blocks.b) {
						var last = blocks.a;
						var $temp$block = last;
						block = $temp$block;
						continue endWithOpenBlockOrParagraph;
					} else {
						return false;
					}
				} else {
					return false;
				}
			case 'Heading':
				return true;
			default:
				return false;
		}
	}
};
var $dillonkearns$elm_markdown$HtmlParser$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$HtmlParser$Text = function (a) {
	return {$: 'Text', a: a};
};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter = $elm$parser$Parser$Expecting('at least 1 tag name character');
var $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return false;
		case '\u000D':
			return false;
		case '\n':
			return false;
		case '\t':
			return false;
		case '/':
			return false;
		case '<':
			return false;
		case '>':
			return false;
		case '\"':
			return false;
		case '\'':
			return false;
		case '=':
			return false;
		default:
			return true;
	}
};
var $elm$core$String$toLower = _String_toLower;
var $dillonkearns$elm_markdown$HtmlParser$tagName = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (name, _v0) {
			return $elm$core$String$toLower(name);
		}),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter, $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter),
		$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$tagNameCharacter)));
var $dillonkearns$elm_markdown$HtmlParser$attributeName = $dillonkearns$elm_markdown$HtmlParser$tagName;
var $dillonkearns$elm_markdown$HtmlParser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $dillonkearns$elm_markdown$HtmlParser$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'amp',
			_Utils_chr('&')),
			_Utils_Tuple2(
			'lt',
			_Utils_chr('<')),
			_Utils_Tuple2(
			'gt',
			_Utils_chr('>')),
			_Utils_Tuple2(
			'apos',
			_Utils_chr('\'')),
			_Utils_Tuple2(
			'quot',
			_Utils_chr('\"'))
		]));
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Basics$pow = _Basics_pow;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $dillonkearns$elm_markdown$HtmlParser$decodeEscape = function (s) {
	return A2($elm$core$String$startsWith, '#x', s) ? A2(
		$elm$core$Result$mapError,
		$elm$parser$Parser$Problem,
		A2(
			$elm$core$Result$map,
			$elm$core$Char$fromCode,
			$rtfeldman$elm_hex$Hex$fromString(
				A2($elm$core$String$dropLeft, 2, s)))) : (A2($elm$core$String$startsWith, '#', s) ? A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('Invalid escaped character: ' + s),
		A2(
			$elm$core$Maybe$map,
			$elm$core$Char$fromCode,
			$elm$core$String$toInt(
				A2($elm$core$String$dropLeft, 1, s)))) : A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('No entity named \"&' + (s + ';\" found.')),
		A2($elm$core$Dict$get, s, $dillonkearns$elm_markdown$HtmlParser$entities)));
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $dillonkearns$elm_markdown$HtmlParser$escapedChar = function (end_) {
	var process = function (entityStr) {
		var _v0 = $dillonkearns$elm_markdown$HtmlParser$decodeEscape(entityStr);
		if (_v0.$ === 'Ok') {
			var c = _v0.a;
			return $elm$parser$Parser$Advanced$succeed(c);
		} else {
			var e = _v0.a;
			return $elm$parser$Parser$Advanced$problem(e);
		}
	};
	var isEntityChar = function (c) {
		return (!_Utils_eq(c, end_)) && (!_Utils_eq(
			c,
			_Utils_chr(';')));
	};
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('&')),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$andThen,
				process,
				$elm$parser$Parser$Advanced$getChompedString(
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							isEntityChar,
							$elm$parser$Parser$Expecting('an entity character')),
						$elm$parser$Parser$Advanced$chompWhile(isEntityChar)))),
			$dillonkearns$elm_markdown$HtmlParser$symbol(';')));
};
var $dillonkearns$elm_markdown$HtmlParser$textStringStep = F3(
	function (closingChar, predicate, accum) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (soFar) {
				return $elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$map,
							function (escaped) {
								return $elm$parser$Parser$Advanced$Loop(
									_Utils_ap(
										accum,
										_Utils_ap(
											soFar,
											$elm$core$String$fromChar(escaped))));
							},
							$dillonkearns$elm_markdown$HtmlParser$escapedChar(closingChar)),
							$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(
								_Utils_ap(accum, soFar)))
						]));
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile(predicate)));
	});
var $dillonkearns$elm_markdown$HtmlParser$textString = function (closingChar) {
	var predicate = function (c) {
		return (!_Utils_eq(c, closingChar)) && (!_Utils_eq(
			c,
			_Utils_chr('&')));
	};
	return A2(
		$elm$parser$Parser$Advanced$loop,
		'',
		A2($dillonkearns$elm_markdown$HtmlParser$textStringStep, closingChar, predicate));
};
var $dillonkearns$elm_markdown$HtmlParser$attributeValue = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\"')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"'))),
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\'')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')))
		]));
var $dillonkearns$elm_markdown$HtmlParser$keepOldest = F2(
	function (_new, mValue) {
		if (mValue.$ === 'Just') {
			var v = mValue.a;
			return $elm$core$Maybe$Just(v);
		} else {
			return $elm$core$Maybe$Just(_new);
		}
	});
var $dillonkearns$elm_markdown$HtmlParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\u000D':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$whiteSpace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace);
var $dillonkearns$elm_markdown$HtmlParser$attributesStep = function (attrs) {
	var process = F2(
		function (name, value) {
			return $elm$parser$Parser$Advanced$Loop(
				A3(
					$elm$core$Dict$update,
					$elm$core$String$toLower(name),
					$dillonkearns$elm_markdown$HtmlParser$keepOldest(value),
					attrs));
		});
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(process),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeName, $dillonkearns$elm_markdown$HtmlParser$whiteSpace),
							$dillonkearns$elm_markdown$HtmlParser$symbol('=')),
						$dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeValue, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				$elm$parser$Parser$Advanced$succeed(
				$elm$parser$Parser$Advanced$Done(attrs))
			]));
};
var $dillonkearns$elm_markdown$HtmlParser$attributes = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$Dict$foldl,
		F3(
			function (key, value, accum) {
				return A2(
					$elm$core$List$cons,
					{name: key, value: value},
					accum);
			}),
		_List_Nil),
	A2($elm$parser$Parser$Advanced$loop, $elm$core$Dict$empty, $dillonkearns$elm_markdown$HtmlParser$attributesStep));
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = A5(_Parser_findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v0.a;
			var newRow = _v0.b;
			var newCol = _v0.c;
			var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.src) : newOffset;
			return A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, adjustedOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: adjustedOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$HtmlParser$cdata = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<![CDATA[')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr(']]>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol(']]>')));
var $dillonkearns$elm_markdown$HtmlParser$childrenStep = F2(
	function (options, accum) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (f) {
				return f(accum);
			},
			$elm$parser$Parser$Advanced$oneOf(options));
	});
var $dillonkearns$elm_markdown$HtmlParser$fail = function (str) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(str));
};
var $dillonkearns$elm_markdown$HtmlParser$closingTag = function (startTagName) {
	var closingTagName = A2(
		$elm$parser$Parser$Advanced$andThen,
		function (endTagName) {
			return _Utils_eq(startTagName, endTagName) ? $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0) : $dillonkearns$elm_markdown$HtmlParser$fail('tag name mismatch: ' + (startTagName + (' and ' + endTagName)));
		},
		$dillonkearns$elm_markdown$HtmlParser$tagName);
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$HtmlParser$symbol('</'),
					$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
				closingTagName),
			$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>'));
};
var $dillonkearns$elm_markdown$HtmlParser$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $dillonkearns$elm_markdown$HtmlParser$comment = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Comment),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('<!--'))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('-->')),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('-->'))));
var $dillonkearns$elm_markdown$HtmlParser$Declaration = F2(
	function (a, b) {
		return {$: 'Declaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter = $elm$parser$Parser$Expecting('at least 1 uppercase character');
var $dillonkearns$elm_markdown$HtmlParser$allUppercase = $elm$parser$Parser$Advanced$getChompedString(
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isUpper, $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter),
		$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isUpper)));
var $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$HtmlParser$isWhitespace,
		$elm$parser$Parser$Expecting('at least one whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace));
var $dillonkearns$elm_markdown$HtmlParser$docType = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Declaration),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<!')),
		A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$allUppercase, $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>')));
var $dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$processingInstruction = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<?')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('?>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('?>')));
var $dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar = function (c) {
	switch (c.valueOf()) {
		case '<':
			return false;
		case '&':
			return false;
		default:
			return true;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions = _List_fromArray(
	[
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$chompIf,
				$dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar,
				$elm$parser$Parser$Expecting('is not & or <')),
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar))),
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v1) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		$dillonkearns$elm_markdown$HtmlParser$escapedChar(
			_Utils_chr('<'))),
		$elm$parser$Parser$Advanced$succeed(
		$elm$parser$Parser$Advanced$Done(_Utils_Tuple0))
	]);
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep = function (_v0) {
	return $elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions);
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeString = $elm$parser$Parser$Advanced$getChompedString(
	A2($elm$parser$Parser$Advanced$loop, _Utils_Tuple0, $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep));
var $dillonkearns$elm_markdown$HtmlParser$children = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$dillonkearns$elm_markdown$HtmlParser$childrenStep(
			$dillonkearns$elm_markdown$HtmlParser$childrenStepOptions(startTagName)));
};
var $dillonkearns$elm_markdown$HtmlParser$childrenStepOptions = function (startTagName) {
	return _List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_v1, accum) {
					return $elm$parser$Parser$Advanced$Done(
						$elm$core$List$reverse(accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)),
			A2(
			$elm$parser$Parser$Advanced$andThen,
			function (text) {
				return $elm$core$String$isEmpty(text) ? A2(
					$elm$parser$Parser$Advanced$map,
					F2(
						function (_v2, accum) {
							return $elm$parser$Parser$Advanced$Done(
								$elm$core$List$reverse(accum));
						}),
					$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)) : $elm$parser$Parser$Advanced$succeed(
					function (accum) {
						return $elm$parser$Parser$Advanced$Loop(
							A2(
								$elm$core$List$cons,
								$dillonkearns$elm_markdown$HtmlParser$Text(text),
								accum));
					});
			},
			$dillonkearns$elm_markdown$HtmlParser$textNodeString),
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_new, accum) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($elm$core$List$cons, _new, accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$cyclic$html())
		]);
};
var $dillonkearns$elm_markdown$HtmlParser$elementContinuation = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$HtmlParser$Element(startTagName)),
				$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
			A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributes, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return _List_Nil;
					},
					$dillonkearns$elm_markdown$HtmlParser$symbol('/>')),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$HtmlParser$symbol('>')),
					$dillonkearns$elm_markdown$HtmlParser$children(startTagName))
				])));
};
function $dillonkearns$elm_markdown$HtmlParser$cyclic$html() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$HtmlParser$Cdata, $dillonkearns$elm_markdown$HtmlParser$cdata),
				$dillonkearns$elm_markdown$HtmlParser$processingInstruction,
				$dillonkearns$elm_markdown$HtmlParser$comment,
				$dillonkearns$elm_markdown$HtmlParser$docType,
				$dillonkearns$elm_markdown$HtmlParser$cyclic$element()
			]));
}
function $dillonkearns$elm_markdown$HtmlParser$cyclic$element() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<')),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$HtmlParser$elementContinuation, $dillonkearns$elm_markdown$HtmlParser$tagName));
}
try {
	var $dillonkearns$elm_markdown$HtmlParser$html = $dillonkearns$elm_markdown$HtmlParser$cyclic$html();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$html = function () {
		return $dillonkearns$elm_markdown$HtmlParser$html;
	};
	var $dillonkearns$elm_markdown$HtmlParser$element = $dillonkearns$elm_markdown$HtmlParser$cyclic$element();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$element = function () {
		return $dillonkearns$elm_markdown$HtmlParser$element;
	};
} catch ($) {
	throw 'Some top-level definitions from `HtmlParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    children\n  │     ↓\n  │    childrenStepOptions\n  │     ↓\n  │    html\n  │     ↓\n  │    element\n  │     ↓\n  │    elementContinuation\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $dillonkearns$elm_markdown$Parser$Token$tab = A2(
	$elm$parser$Parser$Advanced$Token,
	'\t',
	$elm$parser$Parser$Expecting('a tab'));
var $dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$backtrackable(
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'   ',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							' \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'  \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock),
		$dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$Helpers$isEven = function (_int) {
	return !A2($elm$core$Basics$modBy, 2, _int);
};
var $dillonkearns$elm_markdown$Markdown$Block$Loose = {$: 'Loose'};
var $dillonkearns$elm_markdown$Markdown$Block$Tight = {$: 'Tight'};
var $dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay = function (isTight) {
	return isTight ? $dillonkearns$elm_markdown$Markdown$Block$Tight : $dillonkearns$elm_markdown$Markdown$Block$Loose;
};
var $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith = F3(
	function (joinWith, string1, string2) {
		var _v0 = _Utils_Tuple2(string1, string2);
		if (_v0.a === '') {
			return string2;
		} else {
			if (_v0.b === '') {
				return string1;
			} else {
				return _Utils_ap(
					string1,
					_Utils_ap(joinWith, string2));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll = F2(
	function (string1, string2) {
		return string1 + ('\n' + string2);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (rawLine, _v0) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
				$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
		}),
	$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser = A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$OrderedList$ListItem = F4(
	function (order, intended, marker, body) {
		return {body: body, intended: intended, marker: marker, order: order};
	});
var $elm$parser$Parser$Advanced$getCol = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.col, s);
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, '');
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore = function (condition) {
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$chompIf,
			condition,
			$elm$parser$Parser$Problem('Expected one or more character')),
		$elm$parser$Parser$Advanced$chompWhile(condition));
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$OrderedList$Dot = {$: 'Dot'};
var $dillonkearns$elm_markdown$Markdown$OrderedList$Paren = {$: 'Paren'};
var $dillonkearns$elm_markdown$Parser$Token$closingParen = A2(
	$elm$parser$Parser$Advanced$Token,
	')',
	$elm$parser$Parser$Expecting('a `)`'));
var $dillonkearns$elm_markdown$Parser$Token$dot = A2(
	$elm$parser$Parser$Advanced$Token,
	'.',
	$elm$parser$Parser$Expecting('a `.`'));
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$OrderedList$Dot),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$dot)),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$OrderedList$Paren),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$closingParen))
		]));
var $dillonkearns$elm_markdown$Parser$Extra$positiveInteger = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($elm$core$Char$isDigit));
var $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (parsed) {
		return (parsed <= 999999999) ? $elm$parser$Parser$Advanced$succeed(parsed) : $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Starting numbers must be nine digits or less.'));
	},
	$dillonkearns$elm_markdown$Parser$Extra$positiveInteger);
var $dillonkearns$elm_markdown$Whitespace$space = $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$space);
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $dillonkearns$elm_markdown$Parser$Extra$upTo = F2(
	function (n, parser) {
		var _v0 = A2($elm$core$List$repeat, n, parser);
		if (!_v0.b) {
			return $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0);
		} else {
			var firstParser = _v0.a;
			var remainingParsers = _v0.b;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (p, parsers) {
						return $elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									A2($elm$parser$Parser$Advanced$ignorer, p, parsers),
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]));
					}),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							firstParser,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						])),
				remainingParsers);
		}
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1 = function (parsed) {
	if (parsed === 1) {
		return $elm$parser$Parser$Advanced$succeed(parsed);
	} else {
		return $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Lists inside a paragraph or after a paragraph without a blank line must start with 1'));
	}
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser = function (previousWasBody) {
	return previousWasBody ? A2(
		$elm$parser$Parser$Advanced$andThen,
		$dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
			$dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits)) : A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
		$dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits);
};
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$parser = function (previousWasBody) {
	var parseSubsequentItem = F5(
		function (start, order, marker, mid, _v0) {
			var end = _v0.a;
			var body = _v0.b;
			return ((end - mid) <= 4) ? A4($dillonkearns$elm_markdown$Markdown$OrderedList$ListItem, order, end - start, marker, body) : A4(
				$dillonkearns$elm_markdown$Markdown$OrderedList$ListItem,
				order,
				(mid - start) + 1,
				marker,
				_Utils_ap(
					A2($elm$core$String$repeat, (end - mid) - 1, ' '),
					body));
		});
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(parseSubsequentItem),
						$elm$parser$Parser$Advanced$getCol),
					$elm$parser$Parser$Advanced$backtrackable(
						$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser(previousWasBody))),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser])));
};
var $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (item) {
			return A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, true, item.intended, item.marker, item.order, _List_Nil, item.body);
		},
		$dillonkearns$elm_markdown$Markdown$OrderedList$parser(previousWasBody));
};
var $dillonkearns$elm_markdown$Markdown$Inline$CodeInline = function (a) {
	return {$: 'CodeInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline = function (_v0) {
	var match = _v0.a;
	var _v1 = match.type_;
	switch (_v1.$) {
		case 'NormalType':
			return $dillonkearns$elm_markdown$Markdown$Inline$Text(match.text);
		case 'HardLineBreakType':
			return $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak;
		case 'CodeType':
			return $dillonkearns$elm_markdown$Markdown$Inline$CodeInline(match.text);
		case 'AutolinkType':
			var _v2 = _v1.a;
			var text = _v2.a;
			var url = _v2.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				$elm$core$Maybe$Nothing,
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Markdown$Inline$Text(text)
					]));
		case 'LinkType':
			var _v3 = _v1.a;
			var url = _v3.a;
			var maybeTitle = _v3.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'ImageType':
			var _v4 = _v1.a;
			var url = _v4.a;
			var maybeTitle = _v4.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Image,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'HtmlType':
			var model = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline(model);
		case 'EmphasisType':
			var length = _v1.a;
			return A2(
				$dillonkearns$elm_markdown$Markdown$Inline$Emphasis,
				length,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		default:
			return $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough(
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines = function (matches) {
	return A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline, matches);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Match = function (a) {
	return {$: 'Match', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: childMatch.end - parentMatch.textStart, matches: childMatch.matches, start: childMatch.start - parentMatch.textStart, text: childMatch.text, textEnd: childMatch.textEnd - parentMatch.textStart, textStart: childMatch.textStart - parentMatch.textStart, type_: childMatch.type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$addChild = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: parentMatch.end,
				matches: A2(
					$elm$core$List$cons,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, parentMatch, childMatch),
					parentMatch.matches),
				start: parentMatch.start,
				text: parentMatch.text,
				textEnd: parentMatch.textEnd,
				textStart: parentMatch.textStart,
				type_: parentMatch.type_
			});
	});
var $elm$core$List$sortBy = _List_sortBy;
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren = function (_v4) {
	var match = _v4.a;
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: match.end,
			matches: $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(match.matches),
			start: match.start,
			text: match.text,
			textEnd: match.textEnd,
			textStart: match.textStart,
			type_: match.type_
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches = function (matches) {
	var _v2 = A2(
		$elm$core$List$sortBy,
		function (_v3) {
			var match = _v3.a;
			return match.start;
		},
		matches);
	if (!_v2.b) {
		return _List_Nil;
	} else {
		var first = _v2.a;
		var rest = _v2.b;
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp, rest, first, _List_Nil);
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp = F3(
	function (remaining, _v0, matchesTail) {
		organizeMatchesHelp:
		while (true) {
			var prevMatch = _v0.a;
			if (!remaining.b) {
				return A2(
					$elm$core$List$cons,
					$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
						$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
					matchesTail);
			} else {
				var match = remaining.a.a;
				var rest = remaining.b;
				if (_Utils_cmp(prevMatch.end, match.start) < 1) {
					var $temp$remaining = rest,
						$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
						$temp$matchesTail = A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
							$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
						matchesTail);
					remaining = $temp$remaining;
					_v0 = $temp$_v0;
					matchesTail = $temp$matchesTail;
					continue organizeMatchesHelp;
				} else {
					if ((_Utils_cmp(prevMatch.start, match.start) < 0) && (_Utils_cmp(prevMatch.end, match.end) > 0)) {
						var $temp$remaining = rest,
							$temp$_v0 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$addChild, prevMatch, match),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					} else {
						var $temp$remaining = rest,
							$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					}
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType = {$: 'NormalType'};
var $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand = function (string) {
	return A2($elm$core$String$contains, '&', string);
};
var $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#([0-9]{1,8});'));
var $dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode = function (_int) {
	var remain_ = A2($elm$core$Basics$modBy, 16, _int);
	var remain = A2($elm$core$Basics$modBy, 131070, _int);
	return (_int >= 131070) && ((((0 <= remain) && (remain <= 15)) || ((65536 <= remain) && (remain <= 65551))) && ((remain_ === 14) || (remain_ === 15)));
};
var $dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode = function (_int) {
	return (_int === 9) || ((_int === 10) || ((_int === 13) || ((_int === 133) || (((32 <= _int) && (_int <= 126)) || (((160 <= _int) && (_int <= 55295)) || (((57344 <= _int) && (_int <= 64975)) || (((65008 <= _int) && (_int <= 65533)) || ((65536 <= _int) && (_int <= 1114109)))))))));
};
var $dillonkearns$elm_markdown$Markdown$Entity$validUnicode = function (_int) {
	return ($dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode(_int) && (!$dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode(_int))) ? $elm$core$String$fromChar(
		$elm$core$Char$fromCode(_int)) : $elm$core$String$fromChar(
		$elm$core$Char$fromCode(65533));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = $elm$core$String$toInt(first);
		if (_v1.$ === 'Just') {
			var v = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(v);
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal);
var $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&([0-9a-zA-Z]+);'));
var $dillonkearns$elm_markdown$Markdown$Entity$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('quot', 34),
			_Utils_Tuple2('amp', 38),
			_Utils_Tuple2('apos', 39),
			_Utils_Tuple2('lt', 60),
			_Utils_Tuple2('gt', 62),
			_Utils_Tuple2('nbsp', 160),
			_Utils_Tuple2('iexcl', 161),
			_Utils_Tuple2('cent', 162),
			_Utils_Tuple2('pound', 163),
			_Utils_Tuple2('curren', 164),
			_Utils_Tuple2('yen', 165),
			_Utils_Tuple2('brvbar', 166),
			_Utils_Tuple2('sect', 167),
			_Utils_Tuple2('uml', 168),
			_Utils_Tuple2('copy', 169),
			_Utils_Tuple2('ordf', 170),
			_Utils_Tuple2('laquo', 171),
			_Utils_Tuple2('not', 172),
			_Utils_Tuple2('shy', 173),
			_Utils_Tuple2('reg', 174),
			_Utils_Tuple2('macr', 175),
			_Utils_Tuple2('deg', 176),
			_Utils_Tuple2('plusmn', 177),
			_Utils_Tuple2('sup2', 178),
			_Utils_Tuple2('sup3', 179),
			_Utils_Tuple2('acute', 180),
			_Utils_Tuple2('micro', 181),
			_Utils_Tuple2('para', 182),
			_Utils_Tuple2('middot', 183),
			_Utils_Tuple2('cedil', 184),
			_Utils_Tuple2('sup1', 185),
			_Utils_Tuple2('ordm', 186),
			_Utils_Tuple2('raquo', 187),
			_Utils_Tuple2('frac14', 188),
			_Utils_Tuple2('frac12', 189),
			_Utils_Tuple2('frac34', 190),
			_Utils_Tuple2('iquest', 191),
			_Utils_Tuple2('Agrave', 192),
			_Utils_Tuple2('Aacute', 193),
			_Utils_Tuple2('Acirc', 194),
			_Utils_Tuple2('Atilde', 195),
			_Utils_Tuple2('Auml', 196),
			_Utils_Tuple2('Aring', 197),
			_Utils_Tuple2('AElig', 198),
			_Utils_Tuple2('Ccedil', 199),
			_Utils_Tuple2('Egrave', 200),
			_Utils_Tuple2('Eacute', 201),
			_Utils_Tuple2('Ecirc', 202),
			_Utils_Tuple2('Euml', 203),
			_Utils_Tuple2('Igrave', 204),
			_Utils_Tuple2('Iacute', 205),
			_Utils_Tuple2('Icirc', 206),
			_Utils_Tuple2('Iuml', 207),
			_Utils_Tuple2('ETH', 208),
			_Utils_Tuple2('Ntilde', 209),
			_Utils_Tuple2('Ograve', 210),
			_Utils_Tuple2('Oacute', 211),
			_Utils_Tuple2('Ocirc', 212),
			_Utils_Tuple2('Otilde', 213),
			_Utils_Tuple2('Ouml', 214),
			_Utils_Tuple2('times', 215),
			_Utils_Tuple2('Oslash', 216),
			_Utils_Tuple2('Ugrave', 217),
			_Utils_Tuple2('Uacute', 218),
			_Utils_Tuple2('Ucirc', 219),
			_Utils_Tuple2('Uuml', 220),
			_Utils_Tuple2('Yacute', 221),
			_Utils_Tuple2('THORN', 222),
			_Utils_Tuple2('szlig', 223),
			_Utils_Tuple2('agrave', 224),
			_Utils_Tuple2('aacute', 225),
			_Utils_Tuple2('acirc', 226),
			_Utils_Tuple2('atilde', 227),
			_Utils_Tuple2('auml', 228),
			_Utils_Tuple2('aring', 229),
			_Utils_Tuple2('aelig', 230),
			_Utils_Tuple2('ccedil', 231),
			_Utils_Tuple2('egrave', 232),
			_Utils_Tuple2('eacute', 233),
			_Utils_Tuple2('ecirc', 234),
			_Utils_Tuple2('euml', 235),
			_Utils_Tuple2('igrave', 236),
			_Utils_Tuple2('iacute', 237),
			_Utils_Tuple2('icirc', 238),
			_Utils_Tuple2('iuml', 239),
			_Utils_Tuple2('eth', 240),
			_Utils_Tuple2('ntilde', 241),
			_Utils_Tuple2('ograve', 242),
			_Utils_Tuple2('oacute', 243),
			_Utils_Tuple2('ocirc', 244),
			_Utils_Tuple2('otilde', 245),
			_Utils_Tuple2('ouml', 246),
			_Utils_Tuple2('divide', 247),
			_Utils_Tuple2('oslash', 248),
			_Utils_Tuple2('ugrave', 249),
			_Utils_Tuple2('uacute', 250),
			_Utils_Tuple2('ucirc', 251),
			_Utils_Tuple2('uuml', 252),
			_Utils_Tuple2('yacute', 253),
			_Utils_Tuple2('thorn', 254),
			_Utils_Tuple2('yuml', 255),
			_Utils_Tuple2('OElig', 338),
			_Utils_Tuple2('oelig', 339),
			_Utils_Tuple2('Scaron', 352),
			_Utils_Tuple2('scaron', 353),
			_Utils_Tuple2('Yuml', 376),
			_Utils_Tuple2('fnof', 402),
			_Utils_Tuple2('circ', 710),
			_Utils_Tuple2('tilde', 732),
			_Utils_Tuple2('Alpha', 913),
			_Utils_Tuple2('Beta', 914),
			_Utils_Tuple2('Gamma', 915),
			_Utils_Tuple2('Delta', 916),
			_Utils_Tuple2('Epsilon', 917),
			_Utils_Tuple2('Zeta', 918),
			_Utils_Tuple2('Eta', 919),
			_Utils_Tuple2('Theta', 920),
			_Utils_Tuple2('Iota', 921),
			_Utils_Tuple2('Kappa', 922),
			_Utils_Tuple2('Lambda', 923),
			_Utils_Tuple2('Mu', 924),
			_Utils_Tuple2('Nu', 925),
			_Utils_Tuple2('Xi', 926),
			_Utils_Tuple2('Omicron', 927),
			_Utils_Tuple2('Pi', 928),
			_Utils_Tuple2('Rho', 929),
			_Utils_Tuple2('Sigma', 931),
			_Utils_Tuple2('Tau', 932),
			_Utils_Tuple2('Upsilon', 933),
			_Utils_Tuple2('Phi', 934),
			_Utils_Tuple2('Chi', 935),
			_Utils_Tuple2('Psi', 936),
			_Utils_Tuple2('Omega', 937),
			_Utils_Tuple2('alpha', 945),
			_Utils_Tuple2('beta', 946),
			_Utils_Tuple2('gamma', 947),
			_Utils_Tuple2('delta', 948),
			_Utils_Tuple2('epsilon', 949),
			_Utils_Tuple2('zeta', 950),
			_Utils_Tuple2('eta', 951),
			_Utils_Tuple2('theta', 952),
			_Utils_Tuple2('iota', 953),
			_Utils_Tuple2('kappa', 954),
			_Utils_Tuple2('lambda', 955),
			_Utils_Tuple2('mu', 956),
			_Utils_Tuple2('nu', 957),
			_Utils_Tuple2('xi', 958),
			_Utils_Tuple2('omicron', 959),
			_Utils_Tuple2('pi', 960),
			_Utils_Tuple2('rho', 961),
			_Utils_Tuple2('sigmaf', 962),
			_Utils_Tuple2('sigma', 963),
			_Utils_Tuple2('tau', 964),
			_Utils_Tuple2('upsilon', 965),
			_Utils_Tuple2('phi', 966),
			_Utils_Tuple2('chi', 967),
			_Utils_Tuple2('psi', 968),
			_Utils_Tuple2('omega', 969),
			_Utils_Tuple2('thetasym', 977),
			_Utils_Tuple2('upsih', 978),
			_Utils_Tuple2('piv', 982),
			_Utils_Tuple2('ensp', 8194),
			_Utils_Tuple2('emsp', 8195),
			_Utils_Tuple2('thinsp', 8201),
			_Utils_Tuple2('zwnj', 8204),
			_Utils_Tuple2('zwj', 8205),
			_Utils_Tuple2('lrm', 8206),
			_Utils_Tuple2('rlm', 8207),
			_Utils_Tuple2('ndash', 8211),
			_Utils_Tuple2('mdash', 8212),
			_Utils_Tuple2('lsquo', 8216),
			_Utils_Tuple2('rsquo', 8217),
			_Utils_Tuple2('sbquo', 8218),
			_Utils_Tuple2('ldquo', 8220),
			_Utils_Tuple2('rdquo', 8221),
			_Utils_Tuple2('bdquo', 8222),
			_Utils_Tuple2('dagger', 8224),
			_Utils_Tuple2('Dagger', 8225),
			_Utils_Tuple2('bull', 8226),
			_Utils_Tuple2('hellip', 8230),
			_Utils_Tuple2('permil', 8240),
			_Utils_Tuple2('prime', 8242),
			_Utils_Tuple2('Prime', 8243),
			_Utils_Tuple2('lsaquo', 8249),
			_Utils_Tuple2('rsaquo', 8250),
			_Utils_Tuple2('oline', 8254),
			_Utils_Tuple2('frasl', 8260),
			_Utils_Tuple2('euro', 8364),
			_Utils_Tuple2('image', 8465),
			_Utils_Tuple2('weierp', 8472),
			_Utils_Tuple2('real', 8476),
			_Utils_Tuple2('trade', 8482),
			_Utils_Tuple2('alefsym', 8501),
			_Utils_Tuple2('larr', 8592),
			_Utils_Tuple2('uarr', 8593),
			_Utils_Tuple2('rarr', 8594),
			_Utils_Tuple2('darr', 8595),
			_Utils_Tuple2('harr', 8596),
			_Utils_Tuple2('crarr', 8629),
			_Utils_Tuple2('lArr', 8656),
			_Utils_Tuple2('uArr', 8657),
			_Utils_Tuple2('rArr', 8658),
			_Utils_Tuple2('dArr', 8659),
			_Utils_Tuple2('hArr', 8660),
			_Utils_Tuple2('forall', 8704),
			_Utils_Tuple2('part', 8706),
			_Utils_Tuple2('exist', 8707),
			_Utils_Tuple2('empty', 8709),
			_Utils_Tuple2('nabla', 8711),
			_Utils_Tuple2('isin', 8712),
			_Utils_Tuple2('notin', 8713),
			_Utils_Tuple2('ni', 8715),
			_Utils_Tuple2('prod', 8719),
			_Utils_Tuple2('sum', 8721),
			_Utils_Tuple2('minus', 8722),
			_Utils_Tuple2('lowast', 8727),
			_Utils_Tuple2('radic', 8730),
			_Utils_Tuple2('prop', 8733),
			_Utils_Tuple2('infin', 8734),
			_Utils_Tuple2('ang', 8736),
			_Utils_Tuple2('and', 8743),
			_Utils_Tuple2('or', 8744),
			_Utils_Tuple2('cap', 8745),
			_Utils_Tuple2('cup', 8746),
			_Utils_Tuple2('int', 8747),
			_Utils_Tuple2('there4', 8756),
			_Utils_Tuple2('sim', 8764),
			_Utils_Tuple2('cong', 8773),
			_Utils_Tuple2('asymp', 8776),
			_Utils_Tuple2('ne', 8800),
			_Utils_Tuple2('equiv', 8801),
			_Utils_Tuple2('le', 8804),
			_Utils_Tuple2('ge', 8805),
			_Utils_Tuple2('sub', 8834),
			_Utils_Tuple2('sup', 8835),
			_Utils_Tuple2('nsub', 8836),
			_Utils_Tuple2('sube', 8838),
			_Utils_Tuple2('supe', 8839),
			_Utils_Tuple2('oplus', 8853),
			_Utils_Tuple2('otimes', 8855),
			_Utils_Tuple2('perp', 8869),
			_Utils_Tuple2('sdot', 8901),
			_Utils_Tuple2('lceil', 8968),
			_Utils_Tuple2('rceil', 8969),
			_Utils_Tuple2('lfloor', 8970),
			_Utils_Tuple2('rfloor', 8971),
			_Utils_Tuple2('lang', 9001),
			_Utils_Tuple2('rang', 9002),
			_Utils_Tuple2('loz', 9674),
			_Utils_Tuple2('spades', 9824),
			_Utils_Tuple2('clubs', 9827),
			_Utils_Tuple2('hearts', 9829),
			_Utils_Tuple2('diams', 9830)
		]));
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = A2($elm$core$Dict$get, first, $dillonkearns$elm_markdown$Markdown$Entity$entities);
		if (_v1.$ === 'Just') {
			var code = _v1.a;
			return $elm$core$String$fromChar(
				$elm$core$Char$fromCode(code));
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntities = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity);
var $dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\+)([!\"#$%&\\\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-])'));
var $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable = A2(
	$elm$regex$Regex$replace,
	$dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex,
	function (regexMatch) {
		var _v0 = regexMatch.submatches;
		if (((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
			var backslashes = _v0.a.a;
			var _v1 = _v0.b;
			var escapedStr = _v1.a.a;
			return _Utils_ap(
				A2(
					$elm$core$String$repeat,
					($elm$core$String$length(backslashes) / 2) | 0,
					'\\'),
				escapedStr);
		} else {
			return regexMatch.match;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#[Xx]([0-9a-fA-F]{1,8});'));
var $dillonkearns$elm_markdown$Markdown$Entity$hexToInt = function (string) {
	var folder = F2(
		function (hexDigit, _int) {
			return ((_int * 16) + A2(
				$elm$core$Basics$modBy,
				39,
				$elm$core$Char$toCode(hexDigit))) - 9;
		});
	return A3(
		$elm$core$String$foldl,
		folder,
		0,
		$elm$core$String$toLower(string));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(
			$dillonkearns$elm_markdown$Markdown$Entity$hexToInt(first));
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal);
var $dillonkearns$elm_markdown$Markdown$Helpers$formatStr = function (str) {
	var withEscapes = $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable(str);
	return $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand(withEscapes) ? $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals(
		$dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals(
			$dillonkearns$elm_markdown$Markdown$Entity$replaceEntities(withEscapes))) : withEscapes;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch = function (text) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: 0,
			matches: _List_Nil,
			start: 0,
			text: $dillonkearns$elm_markdown$Markdown$Helpers$formatStr(text),
			textEnd: 0,
			textStart: 0,
			type_: $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch = F3(
	function (rawText, _v2, parsedMatches) {
		var matchModel = _v2.a;
		var updtMatch = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: matchModel.end,
				matches: A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches, matchModel.text, _List_Nil, matchModel.matches),
				start: matchModel.start,
				text: matchModel.text,
				textEnd: matchModel.textEnd,
				textStart: matchModel.textStart,
				type_: matchModel.type_
			});
		if (!parsedMatches.b) {
			var finalStr = A2($elm$core$String$dropLeft, matchModel.end, rawText);
			return $elm$core$String$isEmpty(finalStr) ? _List_fromArray(
				[updtMatch]) : _List_fromArray(
				[
					updtMatch,
					$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(finalStr)
				]);
		} else {
			var matchHead = parsedMatches.a.a;
			var _v4 = matchHead.type_;
			if (_v4.$ === 'NormalType') {
				return A2($elm$core$List$cons, updtMatch, parsedMatches);
			} else {
				return _Utils_eq(matchModel.end, matchHead.start) ? A2($elm$core$List$cons, updtMatch, parsedMatches) : ((_Utils_cmp(matchModel.end, matchHead.start) < 0) ? A2(
					$elm$core$List$cons,
					updtMatch,
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A3($elm$core$String$slice, matchModel.end, matchHead.start, rawText)),
						parsedMatches)) : parsedMatches);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches = F3(
	function (rawText, parsedMatches, matches) {
		parseTextMatches:
		while (true) {
			if (!matches.b) {
				if (!parsedMatches.b) {
					return $elm$core$String$isEmpty(rawText) ? _List_Nil : _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(rawText)
						]);
				} else {
					var matchModel = parsedMatches.a.a;
					return (matchModel.start > 0) ? A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A2($elm$core$String$left, matchModel.start, rawText)),
						parsedMatches) : parsedMatches;
				}
			} else {
				var match = matches.a;
				var matchesTail = matches.b;
				var $temp$rawText = rawText,
					$temp$parsedMatches = A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch, rawText, match, parsedMatches),
					$temp$matches = matchesTail;
				rawText = $temp$rawText;
				parsedMatches = $temp$parsedMatches;
				matches = $temp$matches;
				continue parseTextMatches;
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens = F3(
	function (tokensL, tokensR, countL) {
		cleanAngleBracketTokens:
		while (true) {
			if (!tokensR.b) {
				return _List_Nil;
			} else {
				var hd1 = tokensR.a;
				var rest1 = tokensR.b;
				if (!tokensL.b) {
					if (countL > 1) {
						var $temp$tokensL = tokensL,
							$temp$tokensR = rest1,
							$temp$countL = countL - 1;
						tokensL = $temp$tokensL;
						tokensR = $temp$tokensR;
						countL = $temp$countL;
						continue cleanAngleBracketTokens;
					} else {
						if (countL === 1) {
							return A2(
								$elm$core$List$cons,
								hd1,
								A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, tokensL, rest1, countL - 1));
						} else {
							var $temp$tokensL = tokensL,
								$temp$tokensR = rest1,
								$temp$countL = 0;
							tokensL = $temp$tokensL;
							tokensR = $temp$tokensR;
							countL = $temp$countL;
							continue cleanAngleBracketTokens;
						}
					}
				} else {
					var hd = tokensL.a;
					var rest = tokensL.b;
					if (_Utils_cmp(hd.index, hd1.index) < 0) {
						if (!countL) {
							return A2(
								$elm$core$List$cons,
								hd,
								A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, rest, tokensR, countL + 1));
						} else {
							var $temp$tokensL = rest,
								$temp$tokensR = tokensR,
								$temp$countL = countL + 1;
							tokensL = $temp$tokensL;
							tokensR = $temp$tokensR;
							countL = $temp$countL;
							continue cleanAngleBracketTokens;
						}
					} else {
						if (countL > 1) {
							var $temp$tokensL = tokensL,
								$temp$tokensR = rest1,
								$temp$countL = countL - 1;
							tokensL = $temp$tokensL;
							tokensR = $temp$tokensR;
							countL = $temp$countL;
							continue cleanAngleBracketTokens;
						} else {
							if (countL === 1) {
								return A2(
									$elm$core$List$cons,
									hd1,
									A3($dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens, tokensL, rest1, countL - 1));
							} else {
								var $temp$tokensL = tokensL,
									$temp$tokensR = rest1,
									$temp$countL = 0;
								tokensL = $temp$tokensL;
								tokensR = $temp$tokensR;
								countL = $temp$countL;
								continue cleanAngleBracketTokens;
							}
						}
					}
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\<)'));
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen = {$: 'AngleBracketOpen'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\>)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose = function (a) {
	return {$: 'AngleBracketClose', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Escaped = {$: 'Escaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped = {$: 'NotEscaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: 1,
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^*])?(\\*+)([^*])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken = F2(
	function (a, b) {
		return {$: 'EmphasisToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation = function (c) {
	switch (c.valueOf()) {
		case '!':
			return true;
		case '\"':
			return true;
		case '#':
			return true;
		case '%':
			return true;
		case '&':
			return true;
		case '\'':
			return true;
		case '(':
			return true;
		case ')':
			return true;
		case '*':
			return true;
		case ',':
			return true;
		case '-':
			return true;
		case '.':
			return true;
		case '/':
			return true;
		case ':':
			return true;
		case ';':
			return true;
		case '?':
			return true;
		case '@':
			return true;
		case '[':
			return true;
		case ']':
			return true;
		case '_':
			return true;
		case '{':
			return true;
		case '}':
			return true;
		case '~':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\u000C':
			return true;
		case '\n':
			return true;
		case '\u000D':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u00A0':
			return true;
		case '\u2028':
			return true;
		case '\u2029':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank = function (mstring) {
	if (mstring.$ === 'Just') {
		var string = mstring.a;
		return ($elm$core$String$isEmpty(string) || $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace(string)) ? 0 : ($dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation(string) ? 1 : 2);
	} else {
		return 0;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken = F3(
	function (_char, rawText, regMatch) {
		var _v0 = regMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) && _v0.b.b.b.b) {
			var maybeBackslashes = _v0.a;
			var _v1 = _v0.b;
			var maybeLeftFringe = _v1.a;
			var _v2 = _v1.b;
			var delimiter = _v2.a.a;
			var _v3 = _v2.b;
			var maybeRightFringe = _v3.a;
			var rFringeRank = $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(maybeRightFringe);
			var leftFringeLength = function () {
				if (maybeLeftFringe.$ === 'Just') {
					var left = maybeLeftFringe.a;
					return $elm$core$String$length(left);
				} else {
					return 0;
				}
			}();
			var mLeftFringe = ((!(!regMatch.index)) && (!leftFringeLength)) ? $elm$core$Maybe$Just(
				A3($elm$core$String$slice, regMatch.index - 1, regMatch.index, rawText)) : maybeLeftFringe;
			var backslashesLength = function () {
				if (maybeBackslashes.$ === 'Just') {
					var backslashes = maybeBackslashes.a;
					return $elm$core$String$length(backslashes);
				} else {
					return 0;
				}
			}();
			var isEscaped = ((!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) && (!leftFringeLength)) || function () {
				if ((mLeftFringe.$ === 'Just') && (mLeftFringe.a === '\\')) {
					return true;
				} else {
					return false;
				}
			}();
			var delimiterLength = isEscaped ? ($elm$core$String$length(delimiter) - 1) : $elm$core$String$length(delimiter);
			var lFringeRank = isEscaped ? 1 : $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(mLeftFringe);
			if ((delimiterLength <= 0) || (_Utils_eq(
				_char,
				_Utils_chr('_')) && ((lFringeRank === 2) && (rFringeRank === 2)))) {
				return $elm$core$Maybe$Nothing;
			} else {
				var index = ((regMatch.index + backslashesLength) + leftFringeLength) + (isEscaped ? 1 : 0);
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: delimiterLength,
						meaning: A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken,
							_char,
							{leftFringeRank: lFringeRank, rightFringeRank: rFringeRank})
					});
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('*'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\`+)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken = function (a) {
	return {$: 'CodeToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backtick = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: $elm$core$String$length(backtick),
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( {2,}))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken = {$: 'HardLineBreakToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return (!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) ? $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Nothing;
			} else {
				if (_v0.b.b && (_v0.b.a.$ === 'Just')) {
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
					{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken});
			} else {
				if (_v0.b.b) {
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak = false;
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( *))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens = function (str) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak ? A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex, str)) : A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\])'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose = {$: 'SquareBracketClose'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\!)?(\\[)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$Active = {$: 'Active'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken = {$: 'ImageOpenToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken = function (a) {
	return {$: 'LinkOpenToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var maybeImageOpen = _v1.a;
		var _v2 = _v1.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var isEscaped = !$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength);
		var index = isEscaped ? ((regMatch.index + backslashesLength) + 1) : (regMatch.index + backslashesLength);
		if (isEscaped) {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{index: index, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken});
			} else {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			}
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken = function (a) {
	return {$: 'StrikethroughToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var tilde = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var _v2 = $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped)) : _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped));
		var length = _v2.a;
		var meaning = _v2.b;
		return $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: length, meaning: meaning});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(~{2,})([^~])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^_])?(\\_+)([^_])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('_'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex = F2(
	function (left, right) {
		if (left.b) {
			var lfirst = left.a;
			var lrest = left.b;
			if (right.b) {
				var rfirst = right.a;
				var rrest = right.b;
				return (_Utils_cmp(lfirst.index, rfirst.index) < 0) ? A2(
					$elm$core$List$cons,
					lfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, lrest, right)) : A2(
					$elm$core$List$cons,
					rfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, left, rrest));
			} else {
				return left;
			}
		} else {
			return right;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize = function (rawText) {
	return A2(
		$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
		A3(
			$dillonkearns$elm_markdown$Markdown$InlineParser$cleanAngleBracketTokens,
			A2(
				$elm$core$List$sortBy,
				function ($) {
					return $.index;
				},
				$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens(rawText)),
			A2(
				$elm$core$List$sortBy,
				function ($) {
					return $.index;
				},
				$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens(rawText)),
			0),
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
			$dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens(rawText),
			A2(
				$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
				$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens(rawText),
				A2(
					$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
					$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens(rawText),
					A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
						$dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens(rawText),
						A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
							$dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens(rawText),
							A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
								$dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens(rawText),
								$dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens(rawText))))))));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType = {$: 'CodeType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType = function (a) {
	return {$: 'EmphasisType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType = function (a) {
	return {$: 'HtmlType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType = function (a) {
	return {$: 'ImageType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Inactive = {$: 'Inactive'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType = function (a) {
	return {$: 'LinkType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType = {$: 'StrikethroughType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType = function (a) {
	return {$: 'AutolinkType', a: a};
};
var $elm$regex$Regex$contains = _Regex_contains;
var $dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('%(?:3B|2C|2F|3F|3A|40|26|3D|2B|24|23|25)'));
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl = A2(
	$elm$core$Basics$composeR,
	$elm$url$Url$percentEncode,
	A2(
		$elm$regex$Regex$replace,
		$dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex,
		function (match) {
			return A2(
				$elm$core$Maybe$withDefault,
				match.match,
				$elm$url$Url$percentDecode(match.match));
		}));
var $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([A-Za-z][A-Za-z0-9.+\\-]{1,31}:[^<>\\x00-\\x20]*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex = '[^\\[\\]\\\\]*(?:\\\\.[^\\[\\]\\\\]*)*';
var $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\[\\s*(' + ($dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex + ')\\s*\\]')));
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces = function (original) {
	return original;
};
var $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel = A2($elm$core$Basics$composeR, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $elm$core$String$toLower);
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle = F2(
	function (rawUrl, maybeTitle) {
		return _Utils_Tuple2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(
				$dillonkearns$elm_markdown$Markdown$Helpers$formatStr(rawUrl)),
			A2($elm$core$Maybe$map, $dillonkearns$elm_markdown$Markdown$Helpers$formatStr, maybeTitle));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch = F3(
	function (matchModel, references, maybeRegexMatch) {
		var refLabel = function (str) {
			return $elm$core$String$isEmpty(str) ? matchModel.text : str;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				matchModel.text,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					A2(
						$elm$core$Maybe$andThen,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.submatches;
							},
							$elm$core$List$head),
						maybeRegexMatch))));
		var _v0 = A2(
			$elm$core$Dict$get,
			$dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel(refLabel),
			references);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v1 = _v0.a;
			var rawUrl = _v1.a;
			var maybeTitle = _v1.b;
			var type_ = function () {
				var _v3 = matchModel.type_;
				if (_v3.$ === 'ImageType') {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				} else {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				}
			}();
			var regexMatchLength = function () {
				if (maybeRegexMatch.$ === 'Just') {
					var match = maybeRegexMatch.a.match;
					return $elm$core$String$length(match);
				} else {
					return 0;
				}
			}();
			return $elm$core$Maybe$Just(
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{end: matchModel.end + regexMatchLength, type_: type_})));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences = F3(
	function (remainText, _v0, references) {
		var tempMatch = _v0.a;
		var matches = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex, remainText);
		return A3(
			$dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch,
			tempMatch,
			references,
			$elm$core$List$head(matches));
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars = '\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars = ' \\t\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex = '(?:<([^<>' + ($dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars + (']*)>|([^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + ('\\(\\)\\\\]*(?:\\\\.[^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + '\\(\\)\\\\]*)*))')))));
var $dillonkearns$elm_markdown$Markdown$Helpers$titleRegex = '(?:[' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + (']+' + ('(?:\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|' + ('\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|' + '\\(([^\\)\\\\]*(?:\\\\.[^\\)\\\\]*)*)\\)))?'))));
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\(\\s*' + ($dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex + ($dillonkearns$elm_markdown$Markdown$Helpers$titleRegex + '\\s*\\)'))));
var $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust = function (maybes) {
	var process = F2(
		function (a, maybeFound) {
			if (maybeFound.$ === 'Just') {
				var found = maybeFound.a;
				return $elm$core$Maybe$Just(found);
			} else {
				return a;
			}
		});
	return A3($elm$core$List$foldl, process, $elm$core$Maybe$Nothing, maybes);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch = F2(
	function (matchModel, regexMatch) {
		var _v0 = regexMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
			var maybeRawUrlAngleBrackets = _v0.a;
			var _v1 = _v0.b;
			var maybeRawUrlWithoutBrackets = _v1.a;
			var _v2 = _v1.b;
			var maybeTitleSingleQuotes = _v2.a;
			var _v3 = _v2.b;
			var maybeTitleDoubleQuotes = _v3.a;
			var _v4 = _v3.b;
			var maybeTitleParenthesis = _v4.a;
			var maybeTitle = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis]));
			var toMatch = function (rawUrl) {
				return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{
							end: matchModel.end + $elm$core$String$length(regexMatch.match),
							type_: function () {
								var _v5 = matchModel.type_;
								if (_v5.$ === 'ImageType') {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType;
								} else {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType;
								}
							}()(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle))
						}));
			};
			var maybeRawUrl = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
			return $elm$core$Maybe$Just(
				toMatch(
					A2($elm$core$Maybe$withDefault, '', maybeRawUrl)));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType = F3(
	function (remainText, _v0, refs) {
		var tempMatch = _v0.a;
		var _v1 = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex, remainText);
		if (_v1.b) {
			var first = _v1.a;
			var _v2 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch, tempMatch, first);
			if (_v2.$ === 'Just') {
				var match = _v2.a;
				return $elm$core$Maybe$Just(match);
			} else {
				return A3(
					$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
					remainText,
					$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
					refs);
			}
		} else {
			return A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
				remainText,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
				refs);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping = F2(
	function (_v0, remainMatches) {
		var match = _v0.a;
		var overlappingMatches = $elm$core$List$filter(
			function (_v1) {
				var testMatch = _v1.a;
				return (_Utils_cmp(match.end, testMatch.start) > 0) && (_Utils_cmp(match.end, testMatch.end) < 0);
			});
		return ($elm$core$List$isEmpty(remainMatches) || $elm$core$List$isEmpty(
			overlappingMatches(remainMatches))) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$List$cons,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
				remainMatches)) : $elm$core$Maybe$Nothing;
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							'mailto:' + $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp = F3(
	function (innerTokens, isToken, tokens) {
		findTokenHelp:
		while (true) {
			if (!tokens.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var nextToken = tokens.a;
				var remainingTokens = tokens.b;
				if (isToken(nextToken)) {
					return $elm$core$Maybe$Just(
						_Utils_Tuple3(
							nextToken,
							$elm$core$List$reverse(innerTokens),
							remainingTokens));
				} else {
					var $temp$innerTokens = A2($elm$core$List$cons, nextToken, innerTokens),
						$temp$isToken = isToken,
						$temp$tokens = remainingTokens;
					innerTokens = $temp$innerTokens;
					isToken = $temp$isToken;
					tokens = $temp$tokens;
					continue findTokenHelp;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findToken = F2(
	function (isToken, tokens) {
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp, _List_Nil, isToken, tokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken = F2(
	function (a, b) {
		return {$: 'HtmlToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening = {$: 'NotOpening'};
var $elm$parser$Parser$Advanced$getOffset = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.offset, s);
	});
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken = F2(
	function (rawText, _v0) {
		var match = _v0.a;
		var consumedCharacters = A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (startOffset, htmlTag, endOffset) {
								return {htmlTag: htmlTag, length: endOffset - startOffset};
							})),
					$elm$parser$Parser$Advanced$getOffset),
				$dillonkearns$elm_markdown$HtmlParser$html),
			$elm$parser$Parser$Advanced$getOffset);
		var parsed = A2(
			$elm$parser$Parser$Advanced$run,
			consumedCharacters,
			A2($elm$core$String$dropLeft, match.start, rawText));
		if (parsed.$ === 'Ok') {
			var htmlTag = parsed.a.htmlTag;
			var length = parsed.a.length;
			var htmlToken = A2($dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken, $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening, htmlTag);
			return $elm$core$Maybe$Just(
				{index: match.start, length: length, meaning: htmlToken});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$ifError = F2(
	function (_function, result) {
		if (result.$ === 'Ok') {
			return result;
		} else {
			var err = result.a;
			return _function(err);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'CodeToken') {
			if (_v0.a.$ === 'Escaped') {
				var _v1 = _v0.a;
				return _Utils_eq(openToken.length - 1, closeToken.length);
			} else {
				var _v2 = _v0.a;
				return _Utils_eq(openToken.length, closeToken.length);
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken = function (token) {
	var _v0 = token.meaning;
	switch (_v0.$) {
		case 'LinkOpenToken':
			return true;
		case 'ImageOpenToken':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'EmphasisToken') {
			var openChar = _v0.a;
			var open = _v0.b;
			var _v1 = closeToken.meaning;
			if (_v1.$ === 'EmphasisToken') {
				var closeChar = _v1.a;
				var close = _v1.b;
				return _Utils_eq(openChar, closeChar) ? ((_Utils_eq(open.leftFringeRank, open.rightFringeRank) || _Utils_eq(close.leftFringeRank, close.rightFringeRank)) ? ((!(!A2($elm$core$Basics$modBy, 3, closeToken.length + openToken.length))) || ((!A2($elm$core$Basics$modBy, 3, closeToken.length)) && (!A2($elm$core$Basics$modBy, 3, openToken.length)))) : true) : false;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = function () {
			var _v1 = openToken.meaning;
			if (_v1.$ === 'StrikethroughToken') {
				if (_v1.a.$ === 'Escaped') {
					var _v2 = _v1.a;
					return _Utils_Tuple2(true, openToken.length - 1);
				} else {
					var _v3 = _v1.a;
					return _Utils_Tuple2(true, openToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var openTokenIsStrikethrough = _v0.a;
		var openTokenLength = _v0.b;
		var _v4 = function () {
			var _v5 = closeToken.meaning;
			if (_v5.$ === 'StrikethroughToken') {
				if (_v5.a.$ === 'Escaped') {
					var _v6 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length - 1);
				} else {
					var _v7 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var closeTokenIsStrikethrough = _v4.a;
		var closeTokenLength = _v4.b;
		return closeTokenIsStrikethrough && (openTokenIsStrikethrough && _Utils_eq(closeTokenLength, openTokenLength));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType = {$: 'HardLineBreakType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch = F2(
	function (token, type_) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: token.index + token.length, matches: _List_Nil, start: token.index, text: '', textEnd: 0, textStart: 0, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM = F2(
	function (remaining, matches) {
		lineBreakTTM:
		while (true) {
			if (!remaining.b) {
				return matches;
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v1 = token.meaning;
				if (_v1.$ === 'HardLineBreakToken') {
					var $temp$remaining = tokensTail,
						$temp$matches = A2(
						$elm$core$List$cons,
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch, token, $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType),
						matches);
					remaining = $temp$remaining;
					matches = $temp$matches;
					continue lineBreakTTM;
				} else {
					var $temp$remaining = tokensTail,
						$temp$matches = matches;
					remaining = $temp$remaining;
					matches = $temp$matches;
					continue lineBreakTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens = F2(
	function (_v0, tokensTail) {
		var match = _v0.a;
		return A2(
			$elm$core$List$filter,
			function (token) {
				return _Utils_cmp(token.index, match.end) > -1;
			},
			tokensTail);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch = F6(
	function (closeToken, escaped, matches, references, rawText, _v44) {
		var openToken = _v44.a;
		var remainTokens = _v44.c;
		var result = A2(
			$dillonkearns$elm_markdown$Markdown$Helpers$ifError,
			$dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch,
			$dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch(
				A7(
					$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
					references,
					rawText,
					function (s) {
						return s;
					},
					$dillonkearns$elm_markdown$Markdown$InlineParser$CodeType,
					openToken,
					closeToken,
					_List_Nil)));
		if (result.$ === 'Err') {
			var tempMatch = result.a;
			if (escaped.$ === 'NotEscaped') {
				var _v47 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken, rawText, tempMatch);
				if (_v47.$ === 'Just') {
					var newToken = _v47.a;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, newToken, remainTokens),
							matches));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			var newMatch = result.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					remainTokens,
					A2($elm$core$List$cons, newMatch, matches)));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		codeAutolinkTypeHtmlTagTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v36 = token.meaning;
				switch (_v36.$) {
					case 'CodeToken':
						var _v37 = A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
							$dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair(token),
							tokens);
						if (_v37.$ === 'Just') {
							var code = _v37.a;
							var _v38 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch, token, matches, references, rawText, code);
							var newTokens = _v38.a;
							var newMatches = _v38.b;
							var $temp$remaining = tokensTail,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					case 'AngleBracketClose':
						var isEscaped = _v36.a;
						var isAngleBracketOpen = function (_v43) {
							var meaning = _v43.meaning;
							if (meaning.$ === 'AngleBracketOpen') {
								return true;
							} else {
								return false;
							}
						};
						var _v39 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, isAngleBracketOpen, tokens);
						if (_v39.$ === 'Just') {
							var found = _v39.a;
							var _v40 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch, token, isEscaped, matches, references, rawText, found);
							if (_v40.$ === 'Just') {
								var _v41 = _v40.a;
								var newTokens = _v41.a;
								var newMatches = _v41.b;
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									newTokens),
									$temp$matches = newMatches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
								tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					default:
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue codeAutolinkTypeHtmlTagTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch = F5(
	function (closeToken, matches, references, rawText, _v32) {
		var openToken = _v32.a;
		var remainTokens = _v32.c;
		var updatedOpenToken = function () {
			var _v33 = openToken.meaning;
			if ((_v33.$ === 'CodeToken') && (_v33.a.$ === 'Escaped')) {
				var _v34 = _v33.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		emphasisTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v27 = token.meaning;
				if (_v27.$ === 'EmphasisToken') {
					var _char = _v27.a;
					var leftFringeRank = _v27.b.leftFringeRank;
					var rightFringeRank = _v27.b.rightFringeRank;
					if (_Utils_eq(leftFringeRank, rightFringeRank)) {
						if ((!(!rightFringeRank)) && ((!_Utils_eq(
							_char,
							_Utils_chr('_'))) || (rightFringeRank === 1))) {
							var _v28 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v28.$ === 'Just') {
								var found = _v28.a;
								var _v29 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v29.a;
								var match = _v29.b;
								var newTokens = _v29.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2($elm$core$List$cons, token, tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						}
					} else {
						if (_Utils_cmp(leftFringeRank, rightFringeRank) < 0) {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						} else {
							var _v30 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v30.$ === 'Just') {
								var found = _v30.a;
								var _v31 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v31.a;
								var match = _v31.b;
								var newTokens = _v31.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = tokens,
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue emphasisTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch = F5(
	function (references, rawText, closeToken, tokensTail, _v25) {
		var openToken = _v25.a;
		var innerTokens = _v25.b;
		var remainTokens = _v25.c;
		var remainLength = openToken.length - closeToken.length;
		var updt = (!remainLength) ? {closeToken: closeToken, openToken: openToken, remainTokens: remainTokens, tokensTail: tokensTail} : ((remainLength > 0) ? {
			closeToken: closeToken,
			openToken: _Utils_update(
				openToken,
				{index: openToken.index + remainLength, length: closeToken.length}),
			remainTokens: A2(
				$elm$core$List$cons,
				_Utils_update(
					openToken,
					{length: remainLength}),
				remainTokens),
			tokensTail: tokensTail
		} : {
			closeToken: _Utils_update(
				closeToken,
				{length: openToken.length}),
			openToken: openToken,
			remainTokens: remainTokens,
			tokensTail: A2(
				$elm$core$List$cons,
				_Utils_update(
					closeToken,
					{index: closeToken.index + openToken.length, length: -remainLength}),
				tokensTail)
		});
		var match = A7(
			$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
			references,
			rawText,
			function (s) {
				return s;
			},
			$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType(updt.openToken.length),
			updt.openToken,
			updt.closeToken,
			$elm$core$List$reverse(innerTokens));
		return _Utils_Tuple3(updt.tokensTail, match, updt.remainTokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		htmlElementTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v23 = token.meaning;
				if (_v23.$ === 'HtmlToken') {
					var isOpen = _v23.a;
					var htmlModel = _v23.b;
					var $temp$remaining = tokensTail,
						$temp$tokens = tokens,
						$temp$matches = A2(
						$elm$core$List$cons,
						A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch,
							token,
							$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)),
						matches),
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue htmlElementTTM;
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue htmlElementTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		linkImageTypeTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v18 = token.meaning;
				if (_v18.$ === 'SquareBracketClose') {
					var _v19 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken, tokens);
					if (_v19.$ === 'Just') {
						var found = _v19.a;
						var _v20 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch, token, tokensTail, matches, references, rawText, found);
						if (_v20.$ === 'Just') {
							var _v21 = _v20.a;
							var x = _v21.a;
							var newMatches = _v21.b;
							var newTokens = _v21.c;
							var $temp$remaining = x,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						}
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue linkImageTypeTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue linkImageTypeTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch = F6(
	function (closeToken, tokensTail, oldMatches, references, rawText, _v8) {
		var openToken = _v8.a;
		var innerTokens = _v8.b;
		var remainTokens = _v8.c;
		var removeOpenToken = _Utils_Tuple3(
			tokensTail,
			oldMatches,
			_Utils_ap(innerTokens, remainTokens));
		var remainText = A2($elm$core$String$dropLeft, closeToken.index + 1, rawText);
		var inactivateLinkOpenToken = function (token) {
			var _v16 = token.meaning;
			if (_v16.$ === 'LinkOpenToken') {
				return _Utils_update(
					token,
					{
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Inactive)
					});
			} else {
				return token;
			}
		};
		var findTempMatch = function (isLinkType) {
			return A7(
				$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
				references,
				rawText,
				function (s) {
					return s;
				},
				isLinkType ? $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)) : $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)),
				openToken,
				closeToken,
				$elm$core$List$reverse(innerTokens));
		};
		var _v9 = openToken.meaning;
		switch (_v9.$) {
			case 'ImageOpenToken':
				var tempMatch = findTempMatch(false);
				var _v10 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
				if (_v10.$ === 'Nothing') {
					return $elm$core$Maybe$Just(removeOpenToken);
				} else {
					var match = _v10.a;
					var _v11 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
					if (_v11.$ === 'Just') {
						var matches = _v11.a;
						return $elm$core$Maybe$Just(
							_Utils_Tuple3(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
								matches,
								remainTokens));
					} else {
						return $elm$core$Maybe$Just(removeOpenToken);
					}
				}
			case 'LinkOpenToken':
				if (_v9.a.$ === 'Active') {
					var _v12 = _v9.a;
					var tempMatch = findTempMatch(true);
					var _v13 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
					if (_v13.$ === 'Nothing') {
						return $elm$core$Maybe$Just(removeOpenToken);
					} else {
						var match = _v13.a;
						var _v14 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
						if (_v14.$ === 'Just') {
							var matches = _v14.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple3(
									A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
									matches,
									A2($elm$core$List$map, inactivateLinkOpenToken, remainTokens)));
						} else {
							return $elm$core$Maybe$Just(removeOpenToken);
						}
					}
				} else {
					var _v15 = _v9.a;
					return $elm$core$Maybe$Just(removeOpenToken);
				}
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		strikethroughTTM:
		while (true) {
			if (!remaining.b) {
				return A2(
					$dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM,
					$elm$core$List$reverse(tokens),
					matches);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v5 = token.meaning;
				if (_v5.$ === 'StrikethroughToken') {
					var _v6 = A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
						$dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair(token),
						tokens);
					if (_v6.$ === 'Just') {
						var content = _v6.a;
						var _v7 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch, token, matches, references, rawText, content);
						var newTokens = _v7.a;
						var newMatches = _v7.b;
						var $temp$remaining = tokensTail,
							$temp$tokens = newTokens,
							$temp$matches = newMatches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue strikethroughTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch = F5(
	function (closeToken, matches, references, rawText, _v1) {
		var openToken = _v1.a;
		var remainTokens = _v1.c;
		var updatedOpenToken = function () {
			var _v2 = openToken.meaning;
			if ((_v2.$ === 'StrikethroughToken') && (_v2.a.$ === 'Escaped')) {
				var _v3 = _v2.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch = F7(
	function (references, rawText, processText, type_, openToken, closeToken, innerTokens) {
		var textStart = openToken.index + openToken.length;
		var textEnd = closeToken.index;
		var text = processText(
			A3($elm$core$String$slice, textStart, textEnd, rawText));
		var start = openToken.index;
		var end = closeToken.index + closeToken.length;
		var match = {end: end, matches: _List_Nil, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_};
		var matches = A2(
			$elm$core$List$map,
			function (_v0) {
				var matchModel = _v0.a;
				return A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, match, matchModel);
			},
			A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, innerTokens, _List_Nil, references, rawText));
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: end, matches: matches, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches = F4(
	function (tokens, matches, references, rawText) {
		return A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM, tokens, _List_Nil, matches, references, rawText);
	});
var $elm$core$String$trim = _String_trim;
var $dillonkearns$elm_markdown$Markdown$InlineParser$parse = F2(
	function (refs, rawText_) {
		var rawText = $elm$core$String$trim(rawText_);
		var tokens = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize(rawText);
		return $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(
			A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches,
				rawText,
				_List_Nil,
				$dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(
					A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, tokens, _List_Nil, refs, rawText))));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				' ',
				$elm$parser$Parser$Expecting(' '))),
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				'>',
				$elm$parser$Parser$Expecting('>'))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Char$isAlpha,
					$elm$parser$Parser$Expecting('Alpha')),
				$elm$parser$Parser$Advanced$chompWhile(
					function (c) {
						return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
							c,
							_Utils_chr('-'));
					})),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							':',
							$elm$parser$Parser$Expecting(':'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'@',
							$elm$parser$Parser$Expecting('@'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'\\',
							$elm$parser$Parser$Expecting('\\'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'+',
							$elm$parser$Parser$Expecting('+'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'.',
							$elm$parser$Parser$Expecting('.')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock = $elm$parser$Parser$Advanced$backtrackable(
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (rawLine, _v0) {
				return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
			}),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'<',
							$elm$parser$Parser$Expecting('<'))),
					$dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag),
				$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
var $dillonkearns$elm_markdown$Markdown$Table$TableHeader = function (a) {
	return {$: 'TableHeader', a: a};
};
var $dillonkearns$elm_markdown$Parser$Token$parseString = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$Expecting(str)));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper = function (_v0) {
	var curr = _v0.a;
	var acc = _v0.b;
	var _return = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Done(acc),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Done(
					A2($elm$core$List$cons, cell, acc));
			},
			curr));
	var finishCell = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2($elm$core$Maybe$Nothing, acc)),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Loop(
					_Utils_Tuple2(
						$elm$core$Maybe$Nothing,
						A2($elm$core$List$cons, cell, acc)));
			},
			curr));
	var addToCurrent = function (c) {
		return _Utils_ap(
			A2($elm$core$Maybe$withDefault, '', curr),
			c);
	};
	var continueCell = function (c) {
		return $elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2(
				$elm$core$Maybe$Just(
					addToCurrent(c)),
				acc));
	};
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('|\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v3) {
					return _return;
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('\\'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(finishCell)),
				$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (_char, _v4) {
						return continueCell(_char);
					}),
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Basics$always(true),
					$elm$parser$Parser$Problem('No character found')))
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCells = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$List$foldl,
		F2(
			function (cell, acc) {
				return A2(
					$elm$core$List$cons,
					$elm$core$String$trim(cell),
					acc);
			}),
		_List_Nil),
	A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil),
		$dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper));
var $dillonkearns$elm_markdown$Markdown$TableParser$rowParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	$dillonkearns$elm_markdown$Markdown$TableParser$parseCells);
var $dillonkearns$elm_markdown$Markdown$TableParser$parseHeader = F2(
	function (_v0, headersRow) {
		var columnAlignments = _v0.b;
		var headersWithAlignment = function (headers) {
			return A3(
				$elm$core$List$map2,
				F2(
					function (headerCell, alignment) {
						return {alignment: alignment, label: headerCell};
					}),
				headers,
				columnAlignments);
		};
		var combineHeaderAndDelimiter = function (headers) {
			return _Utils_eq(
				$elm$core$List$length(headers),
				$elm$core$List$length(columnAlignments)) ? $elm$core$Result$Ok(
				$dillonkearns$elm_markdown$Markdown$Table$TableHeader(
					headersWithAlignment(headers))) : $elm$core$Result$Err(
				'Tables must have the same number of header columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(headers)) + (') as delimiter columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(columnAlignments)) + ')'))));
		};
		var _v1 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$TableParser$rowParser, headersRow);
		if (_v1.$ === 'Ok') {
			var headers = _v1.a;
			return combineHeaderAndDelimiter(headers);
		} else {
			return $elm$core$Result$Err('Unable to parse previous line as a table header');
		}
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock = F2(
	function (language, body) {
		return {body: body, language: language};
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$infoString = function (fenceCharacter) {
	var toInfoString = F2(
		function (str, _v2) {
			var _v1 = $elm$core$String$trim(str);
			if (_v1 === '') {
				return $elm$core$Maybe$Nothing;
			} else {
				var trimmed = _v1;
				return $elm$core$Maybe$Just(trimmed);
			}
		});
	var _v0 = fenceCharacter.kind;
	if (_v0.$ === 'Backtick') {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return (!_Utils_eq(
						c,
						_Utils_chr('`'))) && (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c));
				}));
	} else {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd)));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick = {$: 'Backtick'};
var $dillonkearns$elm_markdown$Parser$Token$backtick = A2(
	$elm$parser$Parser$Advanced$Token,
	'`',
	$elm$parser$Parser$Expecting('a \'`\''));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick = {
	_char: _Utils_chr('`'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick,
	token: $dillonkearns$elm_markdown$Parser$Token$backtick
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation = function (_int) {
	switch (_int) {
		case 1:
			return $elm$parser$Parser$Advanced$succeed(0);
		case 2:
			return $elm$parser$Parser$Advanced$succeed(1);
		case 3:
			return $elm$parser$Parser$Advanced$succeed(2);
		case 4:
			return $elm$parser$Parser$Advanced$succeed(3);
		default:
			return $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Expecting('Fenced code blocks should be indented no more than 3 spaces'));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast = F2(
	function (minLength, fenceCharacter) {
		var builtTokens = A3(
			$elm$core$List$foldl,
			F2(
				function (t, p) {
					return A2($elm$parser$Parser$Advanced$ignorer, p, t);
				}),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
			A2(
				$elm$core$List$repeat,
				minLength,
				$elm$parser$Parser$Advanced$token(fenceCharacter.token)));
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			F2(
				function (str, _v0) {
					return _Utils_Tuple2(
						fenceCharacter,
						$elm$core$String$length(str));
				}),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				builtTokens,
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(fenceCharacter._char))));
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde = {$: 'Tilde'};
var $dillonkearns$elm_markdown$Parser$Token$tilde = A2(
	$elm$parser$Parser$Advanced$Token,
	'~',
	$elm$parser$Parser$Expecting('a `~`'));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde = {
	_char: _Utils_chr('~'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde,
	token: $dillonkearns$elm_markdown$Parser$Token$tilde
};
var $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$Whitespace$space,
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Whitespace$space,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					]))),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
		]));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (indent, _v0) {
						var character = _v0.a;
						var length = _v0.b;
						return {character: character, indented: indent, length: length};
					})),
			$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation, $elm$parser$Parser$Advanced$getCol)),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick),
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde)
			])));
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $dillonkearns$elm_markdown$Whitespace$isSpace = $elm$core$Basics$eq(
	_Utils_chr(' '));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence = F2(
	function (minLength, fenceCharacter) {
		return A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
						$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, minLength, fenceCharacter)),
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpace)),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine = function (indented) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($dillonkearns$elm_markdown$Parser$Extra$upTo, indented, $dillonkearns$elm_markdown$Whitespace$space)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getOffset, $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
};
var $elm$parser$Parser$Advanced$getSource = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.src, s);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp = function (_v0) {
	var fence = _v0.a;
	var body = _v0.b;
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(body)),
				$elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd)),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (lineEnd, _v1) {
						return $elm$parser$Parser$Advanced$Loop(
							_Utils_Tuple2(
								fence,
								_Utils_ap(body, lineEnd)));
					}),
				$dillonkearns$elm_markdown$Whitespace$lineEnd),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$elm$parser$Parser$Advanced$Done(body)),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence, fence.length, fence.character))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(
							F3(
								function (start, end, source) {
									return $elm$parser$Parser$Advanced$Loop(
										_Utils_Tuple2(
											fence,
											_Utils_ap(
												body,
												A3($elm$core$String$slice, start, end, source))));
								})),
						$dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine(fence.indented)),
					$elm$parser$Parser$Advanced$getOffset),
				$elm$parser$Parser$Advanced$getSource)
			]));
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock = function (fence) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2(fence, ''),
		$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp);
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$parser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (fence) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$CodeBlock$infoString(fence.character),
					$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)),
			$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock(fence));
	},
	$dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence);
var $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes = function (headingString) {
	dropTrailingHashes:
	while (true) {
		if (A2($elm$core$String$endsWith, '#', headingString)) {
			var $temp$headingString = A2($elm$core$String$dropRight, 1, headingString);
			headingString = $temp$headingString;
			continue dropTrailingHashes;
		} else {
			return headingString;
		}
	}
};
var $elm$core$String$trimRight = _String_trimRight;
var $dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence = function (headingString) {
	var droppedTrailingHashesString = $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(headingString);
	return (A2($elm$core$String$endsWith, ' ', droppedTrailingHashesString) || $elm$core$String$isEmpty(droppedTrailingHashesString)) ? $elm$core$String$trimRight(droppedTrailingHashesString) : headingString;
};
var $dillonkearns$elm_markdown$Parser$Token$hash = A2(
	$elm$parser$Parser$Advanced$Token,
	'#',
	$elm$parser$Parser$Expecting('a `#`'));
var $dillonkearns$elm_markdown$Markdown$Heading$isHash = function (c) {
	if ('#' === c.valueOf()) {
		return true;
	} else {
		return false;
	}
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return _Utils_eq(
			c,
			_Utils_chr(' ')) || (_Utils_eq(
			c,
			_Utils_chr('\n')) || _Utils_eq(
			c,
			_Utils_chr('\r')));
	});
var $dillonkearns$elm_markdown$Markdown$Heading$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Heading),
				A2(
					$elm$parser$Parser$Advanced$andThen,
					function (startingSpaces) {
						var startSpace = $elm$core$String$length(startingSpaces);
						return (startSpace >= 4) ? $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Expecting('heading with < 4 spaces in front')) : $elm$parser$Parser$Advanced$succeed(startSpace);
					},
					$elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$spaces))),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$hash)),
		A2(
			$elm$parser$Parser$Advanced$andThen,
			function (additionalHashes) {
				var level = $elm$core$String$length(additionalHashes) + 1;
				return (level >= 7) ? $elm$parser$Parser$Advanced$problem(
					$elm$parser$Parser$Expecting('heading with < 7 #\'s')) : $elm$parser$Parser$Advanced$succeed(level);
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Markdown$Heading$isHash)))),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines('')),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$newline)),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab)
							]))),
				A2(
					$elm$parser$Parser$Advanced$mapChompedString,
					F2(
						function (headingText, _v0) {
							return $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
								$dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence(
									$elm$core$String$trim(headingText)));
						}),
					$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd))
			])));
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$Parser$Token$greaterThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'>',
	$elm$parser$Parser$Expecting('a `>`'));
var $elm$parser$Parser$Advanced$Located = F3(
	function (row, col, context) {
		return {col: col, context: context, row: row};
	});
var $elm$parser$Parser$Advanced$changeContext = F2(
	function (newContext, s) {
		return {col: s.col, context: newContext, indent: s.indent, offset: s.offset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$inContext = F2(
	function (context, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(
					A2(
						$elm$parser$Parser$Advanced$changeContext,
						A2(
							$elm$core$List$cons,
							A3($elm$parser$Parser$Advanced$Located, s0.row, s0.col, context),
							s0.context),
						s0));
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						a,
						A2($elm$parser$Parser$Advanced$changeContext, s0.context, s1));
				} else {
					var step = _v1;
					return step;
				}
			});
	});
var $dillonkearns$elm_markdown$Whitespace$isWhitespace = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u000C':
			return true;
		case '\u000D':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Parser$Token$lessThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'<',
	$elm$parser$Parser$Expecting('a `<`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link destination',
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$url$Url$percentEncode),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$lessThan)),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$greaterThan)),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$greaterThan))),
				$elm$parser$Parser$Advanced$getChompedString(
				$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isWhitespace)))
			])));
var $dillonkearns$elm_markdown$Parser$Token$closingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	']',
	$elm$parser$Parser$Expecting('a `]`'));
var $dillonkearns$elm_markdown$Parser$Token$openingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	'[',
	$elm$parser$Parser$Expecting('a `[`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel),
		$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$openingSquareBracket)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$closingSquareBracket)),
		$elm$parser$Parser$Advanced$symbol(
			A2(
				$elm$parser$Parser$Advanced$Token,
				']:',
				$elm$parser$Parser$Expecting(']:')))));
var $dillonkearns$elm_markdown$Parser$Token$doubleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\"',
	$elm$parser$Parser$Expecting('a double quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine = function (str) {
	return A2($elm$core$String$contains, '\n\n', str) ? $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Expecting('no blank line')) : $elm$parser$Parser$Advanced$succeed(str);
};
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$chompWhile(
		function (c) {
			return (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c)) && $dillonkearns$elm_markdown$Whitespace$isWhitespace(c);
		}),
	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Whitespace$requiredWhitespace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$Whitespace$isWhitespace,
		$elm$parser$Parser$Expecting('Required whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isWhitespace));
var $dillonkearns$elm_markdown$Parser$Token$singleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\'',
	$elm$parser$Parser$Expecting('a single quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser = function () {
	var inSingleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$singleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	var inDoubleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$doubleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'title',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$backtrackable(
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
							$dillonkearns$elm_markdown$Whitespace$requiredWhitespace),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									inDoubleQuotes,
									inSingleQuotes,
									$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
								])))),
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing),
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline)
				])));
}();
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link reference definition',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (label, destination, title) {
								return _Utils_Tuple2(
									label,
									{destination: destination, title: title});
							})),
					$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser,
							$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									$dillonkearns$elm_markdown$Whitespace$lineEnd,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]))),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser),
		$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser));
var $dillonkearns$elm_markdown$ThematicBreak$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$ThematicBreak$whitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$ThematicBreak$withChar = function (tchar) {
	var token = $dillonkearns$elm_markdown$Parser$Token$parseString(
		$elm$core$String$fromChar(tchar));
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$ThematicBreak$ThematicBreak),
								token),
							$dillonkearns$elm_markdown$ThematicBreak$whitespace),
						token),
					$dillonkearns$elm_markdown$ThematicBreak$whitespace),
				token),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return _Utils_eq(c, tchar) || $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab(c);
				})),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
};
var $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('-')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('*')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('_'))
		]));
var $dillonkearns$elm_markdown$ThematicBreak$parser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$Whitespace$space),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Whitespace$space,
								$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
							]))),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak
		]));
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne = {$: 'LevelOne'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo = {$: 'LevelTwo'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine = F2(
	function (a, b) {
		return {$: 'SetextLine', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Parser$Token$equals = A2(
	$elm$parser$Parser$Advanced$Token,
	'=',
	$elm$parser$Parser$Expecting('a `=`'));
var $dillonkearns$elm_markdown$Parser$Token$minus = A2(
	$elm$parser$Parser$Advanced$Token,
	'-',
	$elm$parser$Parser$Expecting('a `-`'));
var $dillonkearns$elm_markdown$Markdown$Parser$setextLineParser = function () {
	var setextLevel = F3(
		function (level, levelToken, levelChar) {
			return A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(level),
					$elm$parser$Parser$Advanced$token(levelToken)),
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(levelChar)));
		});
	return A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (raw, level) {
				return A2($dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine, level, raw);
			}),
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne,
								$dillonkearns$elm_markdown$Parser$Token$equals,
								_Utils_chr('=')),
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo,
								$dillonkearns$elm_markdown$Parser$Token$minus,
								_Utils_chr('-'))
							])),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
				$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
}();
var $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter = function (a) {
	return {$: 'TableDelimiter', a: a};
};
var $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$Parser$Extra$maybeChomp = function (condition) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$chompIf,
				condition,
				$elm$parser$Parser$Problem('Character not found')),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst = function (columns) {
	return $elm$core$List$isEmpty(columns) ? $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			])) : $dillonkearns$elm_markdown$Parser$Token$parseString('|');
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp = function (revDelimiterColumns) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
					},
					$dillonkearns$elm_markdown$Parser$Token$parseString('|\n'))),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(revDelimiterColumns)),
						$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
					$elm$parser$Parser$Advanced$end(
						$elm$parser$Parser$Expecting('end')))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							function (column) {
								return $elm$parser$Parser$Advanced$Loop(
									A2($elm$core$List$cons, column, revDelimiterColumns));
							}),
						$dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst(revDelimiterColumns)),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
									$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
										function (c) {
											return _Utils_eq(
												c,
												_Utils_chr(':'));
										})),
								$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr('-'));
									})),
							$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
								function (c) {
									return _Utils_eq(
										c,
										_Utils_chr(':'));
								}))),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace))
			]));
};
var $dillonkearns$elm_markdown$Markdown$Block$AlignCenter = {$: 'AlignCenter'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignLeft = {$: 'AlignLeft'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignRight = {$: 'AlignRight'};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment = function (cell) {
	var _v0 = _Utils_Tuple2(
		A2($elm$core$String$startsWith, ':', cell),
		A2($elm$core$String$endsWith, ':', cell));
	if (_v0.a) {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignCenter);
		} else {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignLeft);
		}
	} else {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignRight);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (delimiterRow) {
		var trimmed = delimiterRow.a.trimmed;
		var headers = delimiterRow.b;
		return $elm$core$List$isEmpty(headers) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Expecting('Must have at least one column in delimiter row.')) : ((($elm$core$List$length(headers) === 1) && (!(A2($elm$core$String$startsWith, '|', trimmed) && A2($elm$core$String$endsWith, '|', trimmed)))) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Tables with a single column must have pipes at the start and end of the delimiter row to avoid ambiguity.')) : $elm$parser$Parser$Advanced$succeed(delimiterRow));
	},
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (delimiterText, revDelimiterColumns) {
				return A2(
					$dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow,
					{
						raw: delimiterText,
						trimmed: $elm$core$String$trim(delimiterText)
					},
					A2(
						$elm$core$List$map,
						$dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment,
						$elm$core$List$reverse(revDelimiterColumns)));
			}),
		A2($elm$parser$Parser$Advanced$loop, _List_Nil, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp)));
var $dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph = A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser);
var $dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength = F2(
	function (expectedLength, row) {
		var rowLength = $elm$core$List$length(row);
		var _v0 = A2($elm$core$Basics$compare, expectedLength, rowLength);
		switch (_v0.$) {
			case 'LT':
				return A2($elm$core$List$take, expectedLength, row);
			case 'EQ':
				return row;
			default:
				return _Utils_ap(
					row,
					A2($elm$core$List$repeat, expectedLength - rowLength, ''));
		}
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser = function (expectedRowLength) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (row) {
			return ($elm$core$List$isEmpty(row) || A2($elm$core$List$all, $elm$core$String$isEmpty, row)) ? $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Problem('A line must have at least one column')) : $elm$parser$Parser$Advanced$succeed(
				A2($dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength, expectedRowLength, row));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$rowParser);
};
var $dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted = function (_v0) {
	var headers = _v0.a;
	var body = _v0.b;
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (row) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$Table(
				A2(
					$dillonkearns$elm_markdown$Markdown$Table$Table,
					headers,
					_Utils_ap(
						body,
						_List_fromArray(
							[row]))));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser(
			$elm$core$List$length(headers)));
};
var $dillonkearns$elm_markdown$Markdown$Block$H1 = {$: 'H1'};
var $dillonkearns$elm_markdown$Markdown$Block$H2 = {$: 'H2'};
var $dillonkearns$elm_markdown$Markdown$Block$H3 = {$: 'H3'};
var $dillonkearns$elm_markdown$Markdown$Block$H4 = {$: 'H4'};
var $dillonkearns$elm_markdown$Markdown$Block$H5 = {$: 'H5'};
var $dillonkearns$elm_markdown$Markdown$Block$H6 = {$: 'H6'};
var $dillonkearns$elm_markdown$Markdown$Parser$toHeading = function (level) {
	switch (level) {
		case 1:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H1);
		case 2:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H2);
		case 3:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H3);
		case 4:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H4);
		case 5:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H5);
		case 6:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H6);
		default:
			return $elm$core$Result$Err(
				$elm$parser$Parser$Expecting(
					'A heading with 1 to 6 #\'s, but found ' + $elm$core$String$fromInt(level)));
	}
};
var $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem = {$: 'EmptyItem'};
var $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem = function (a) {
	return {$: 'PlainItem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$ListItem$TaskItem = F2(
	function (a, b) {
		return {$: 'TaskItem', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem = F4(
	function (markerStartPos, listMarker, markerEndPos, _v0) {
		var bodyStartPos = _v0.a;
		var item = _v0.b;
		var spaceNum = bodyStartPos - markerEndPos;
		if (spaceNum <= 4) {
			return _Utils_Tuple3(listMarker, bodyStartPos - markerStartPos, item);
		} else {
			var intendedCodeItem = function () {
				switch (item.$) {
					case 'TaskItem':
						var completion = item.a;
						var string = item.b;
						return A2(
							$dillonkearns$elm_markdown$Markdown$ListItem$TaskItem,
							completion,
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					case 'PlainItem':
						var string = item.a;
						return $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem(
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					default:
						return $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem;
				}
			}();
			return _Utils_Tuple3(listMarker, (markerEndPos - markerStartPos) + 1, intendedCodeItem);
		}
	});
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem);
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$ListItem$Complete = {$: 'Complete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$Incomplete = {$: 'Incomplete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[x] ',
					$elm$parser$Parser$ExpectingSymbol('[x] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[X] ',
					$elm$parser$Parser$ExpectingSymbol('[X] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Incomplete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[ ] ',
					$elm$parser$Parser$ExpectingSymbol('[ ] '))))
		]));
var $dillonkearns$elm_markdown$Markdown$ListItem$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$TaskItem),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser,
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$PlainItem)
			])),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	$dillonkearns$elm_markdown$Markdown$ListItem$parser);
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk = {$: 'Asterisk'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Minus = {$: 'Minus'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Plus = {$: 'Plus'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Minus),
				A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'-',
					$elm$parser$Parser$ExpectingSymbol('-')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Plus),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'+',
					$elm$parser$Parser$ExpectingSymbol('+')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'*',
					$elm$parser$Parser$ExpectingSymbol('*'))))
		]));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$parser = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem),
					$elm$parser$Parser$Advanced$getCol),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser])));
};
var $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock = function (previousWasBody) {
	var parseListItem = F2(
		function (listmarker, unparsedListItem) {
			switch (unparsedListItem.$) {
				case 'TaskItem':
					var completion = unparsedListItem.a;
					var body = unparsedListItem.b;
					return {
						body: body,
						marker: listmarker,
						task: $elm$core$Maybe$Just(
							function () {
								if (completion.$ === 'Complete') {
									return true;
								} else {
									return false;
								}
							}())
					};
				case 'PlainItem':
					var body = unparsedListItem.a;
					return {body: body, marker: listmarker, task: $elm$core$Maybe$Nothing};
				default:
					return {body: '', marker: listmarker, task: $elm$core$Maybe$Nothing};
			}
		});
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			var listmarker = _v0.a;
			var intended = _v0.b;
			var unparsedListItem = _v0.c;
			return A4(
				$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
				true,
				intended,
				_List_Nil,
				A2(parseListItem, listmarker, unparsedListItem));
		},
		$dillonkearns$elm_markdown$Markdown$UnorderedList$parser(previousWasBody));
};
var $dillonkearns$elm_markdown$Markdown$Parser$childToBlocks = F2(
	function (node, blocks) {
		switch (node.$) {
			case 'Element':
				var tag = node.a;
				var attributes = node.b;
				var children = node.c;
				var _v106 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
				if (_v106.$ === 'Ok') {
					var childrenAsBlocks = _v106.a;
					var block = $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, childrenAsBlocks));
					return $elm$core$Result$Ok(
						A2($elm$core$List$cons, block, blocks));
				} else {
					var err = _v106.a;
					return $elm$core$Result$Err(err);
				}
			case 'Text':
				var innerText = node.a;
				var _v107 = $dillonkearns$elm_markdown$Markdown$Parser$parse(innerText);
				if (_v107.$ === 'Ok') {
					var value = _v107.a;
					return $elm$core$Result$Ok(
						_Utils_ap(
							$elm$core$List$reverse(value),
							blocks));
				} else {
					var error = _v107.a;
					return $elm$core$Result$Err(
						$elm$parser$Parser$Expecting(
							A2(
								$elm$core$String$join,
								'\n',
								A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, error))));
				}
			case 'Comment':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)),
						blocks));
			case 'Cdata':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)),
						blocks));
			case 'ProcessingInstruction':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)),
						blocks));
			default:
				var declarationType = node.a;
				var content = node.b;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)),
						blocks));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$completeBlocks = function (state) {
	var _v91 = state.rawBlocks;
	_v91$5:
	while (true) {
		if (_v91.b) {
			switch (_v91.a.$) {
				case 'BlockQuote':
					var body2 = _v91.a.a;
					var rest = _v91.b;
					var _v92 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						body2);
					if (_v92.$ === 'Ok') {
						var value = _v92.a;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.rawBlocks),
									rest)
							});
					} else {
						var error = _v92.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(error)));
					}
				case 'UnorderedListBlock':
					var _v93 = _v91.a;
					var tight = _v93.a;
					var intended = _v93.b;
					var closeListItems = _v93.c;
					var openListItem = _v93.d;
					var rest = _v91.b;
					var _v94 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem.body);
					if (_v94.$ === 'Ok') {
						var value = _v94.a;
						var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									A4(
										$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
										tight2,
										intended,
										A2(
											$elm$core$List$cons,
											{body: value.rawBlocks, task: openListItem.task},
											closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v94.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
					}
				case 'OrderedListBlock':
					var _v99 = _v91.a;
					var tight = _v99.a;
					var intended = _v99.b;
					var marker = _v99.c;
					var order = _v99.d;
					var closeListItems = _v99.e;
					var openListItem = _v99.f;
					var rest = _v91.b;
					var _v100 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem);
					if (_v100.$ === 'Ok') {
						var value = _v100.a;
						var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									A6(
										$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
										tight2,
										intended,
										marker,
										order,
										A2($elm$core$List$cons, value.rawBlocks, closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v100.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
					}
				case 'BlankLine':
					if (_v91.b.b) {
						switch (_v91.b.a.$) {
							case 'UnorderedListBlock':
								var _v95 = _v91.a;
								var _v96 = _v91.b;
								var _v97 = _v96.a;
								var tight = _v97.a;
								var intended = _v97.b;
								var closeListItems = _v97.c;
								var openListItem = _v97.d;
								var rest = _v96.b;
								var _v98 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem.body);
								if (_v98.$ === 'Ok') {
									var value = _v98.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												A4(
													$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
													tight2,
													intended,
													A2(
														$elm$core$List$cons,
														{body: value.rawBlocks, task: openListItem.task},
														closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v98.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							case 'OrderedListBlock':
								var _v101 = _v91.a;
								var _v102 = _v91.b;
								var _v103 = _v102.a;
								var tight = _v103.a;
								var intended = _v103.b;
								var marker = _v103.c;
								var order = _v103.d;
								var closeListItems = _v103.e;
								var openListItem = _v103.f;
								var rest = _v102.b;
								var _v104 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem);
								if (_v104.$ === 'Ok') {
									var value = _v104.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												A6(
													$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
													tight2,
													intended,
													marker,
													order,
													A2($elm$core$List$cons, value.rawBlocks, closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v104.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							default:
								break _v91$5;
						}
					} else {
						break _v91$5;
					}
				default:
					break _v91$5;
			}
		} else {
			break _v91$5;
		}
	}
	return $elm$parser$Parser$Advanced$succeed(state);
};
var $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks = F2(
	function (state, newRawBlock) {
		var _v41 = _Utils_Tuple2(newRawBlock, state.rawBlocks);
		_v41$13:
		while (true) {
			if (_v41.b.b) {
				switch (_v41.b.a.$) {
					case 'CodeBlock':
						if (_v41.a.$ === 'CodeBlock') {
							var block1 = _v41.a.a;
							var _v42 = _v41.b;
							var block2 = _v42.a.a;
							var rest = _v42.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									linkReferenceDefinitions: state.linkReferenceDefinitions,
									rawBlocks: A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock(
											{
												body: A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2.body, block1.body),
												language: $elm$core$Maybe$Nothing
											}),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 'IndentedCodeBlock':
						switch (_v41.a.$) {
							case 'IndentedCodeBlock':
								var block1 = _v41.a.a;
								var _v43 = _v41.b;
								var block2 = _v43.a.a;
								var rest = _v43.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2, block1)),
											rest)
									});
							case 'BlankLine':
								var _v44 = _v41.a;
								var _v45 = _v41.b;
								var block = _v45.a.a;
								var rest = _v45.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block, '\n')),
											rest)
									});
							default:
								break _v41$13;
						}
					case 'BlockQuote':
						var _v46 = _v41.b;
						var body2 = _v46.a.a;
						var rest = _v46.b;
						switch (newRawBlock.$) {
							case 'BlockQuote':
								var body1 = newRawBlock.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, body2, body1)),
											rest)
									});
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								var _v48 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									body2);
								if (_v48.$ === 'Ok') {
									var value = _v48.a;
									var _v49 = value.rawBlocks;
									if (_v49.b) {
										var last = _v49.a;
										if ($dillonkearns$elm_markdown$Markdown$Parser$endWithOpenBlockOrParagraph(last) && (!A2($elm$core$String$endsWith, '\n', body2))) {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: state.linkReferenceDefinitions,
													rawBlocks: A2(
														$elm$core$List$cons,
														$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
															A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, body2, body1)),
														rest)
												});
										} else {
											var _v50 = A2(
												$elm$parser$Parser$Advanced$run,
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
												body2);
											if (_v50.$ === 'Ok') {
												var value1 = _v50.a;
												return $elm$parser$Parser$Advanced$succeed(
													{
														linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
														rawBlocks: A2(
															$elm$core$List$cons,
															newRawBlock,
															A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.rawBlocks),
																rest))
													});
											} else {
												var e1 = _v50.a;
												return $elm$parser$Parser$Advanced$problem(
													$elm$parser$Parser$Problem(
														$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
											}
										}
									} else {
										var _v51 = A2(
											$elm$parser$Parser$Advanced$run,
											$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
											body2);
										if (_v51.$ === 'Ok') {
											var value1 = _v51.a;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.rawBlocks),
															rest))
												});
										} else {
											var e1 = _v51.a;
											return $elm$parser$Parser$Advanced$problem(
												$elm$parser$Parser$Problem(
													$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
										}
									}
								} else {
									var e = _v48.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							case 'IndentedCodeBlock':
								var body1 = newRawBlock.a;
								var _v52 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									body2);
								if (_v52.$ === 'Ok') {
									var value = _v52.a;
									var _v53 = value.rawBlocks;
									if (_v53.b && (_v53.a.$ === 'OpenBlockOrParagraph')) {
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: state.linkReferenceDefinitions,
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
														A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, ' ', body2, body1)),
													rest)
											});
									} else {
										var _v54 = A2(
											$elm$parser$Parser$Advanced$run,
											$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
											body2);
										if (_v54.$ === 'Ok') {
											var value1 = _v54.a;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value1.rawBlocks),
															rest))
												});
										} else {
											var e1 = _v54.a;
											return $elm$parser$Parser$Advanced$problem(
												$elm$parser$Parser$Problem(
													$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e1)));
										}
									}
								} else {
									var e = _v52.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							default:
								var _v55 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									body2);
								if (_v55.$ === 'Ok') {
									var value = _v55.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.rawBlocks),
													rest))
										});
								} else {
									var e = _v55.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'UnorderedListBlock':
						var _v56 = _v41.b;
						var _v57 = _v56.a;
						var tight = _v57.a;
						var intended1 = _v57.b;
						var closeListItems2 = _v57.c;
						var openListItem2 = _v57.d;
						var rest = _v56.b;
						switch (newRawBlock.$) {
							case 'UnorderedListBlock':
								var intended2 = newRawBlock.b;
								var openListItem1 = newRawBlock.d;
								if (_Utils_eq(openListItem2.marker, openListItem1.marker)) {
									var _v59 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v59.$ === 'Ok') {
										var value = _v59.a;
										return A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														false,
														intended2,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem1),
													rest)
											}) : $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended2,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v59.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v60 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v60.$ === 'Ok') {
										var value = _v60.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															tight2,
															intended1,
															A2(
																$elm$core$List$cons,
																{body: value.rawBlocks, task: openListItem2.task},
																closeListItems2),
															openListItem1),
														rest))
											});
									} else {
										var e = _v60.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											A4(
												$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
												tight,
												intended1,
												closeListItems2,
												_Utils_update(
													openListItem2,
													{
														body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem2.body, body1)
													})),
											rest)
									});
							default:
								var _v61 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2.body);
								if (_v61.$ === 'Ok') {
									var value = _v61.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight2,
														intended1,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v61.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'OrderedListBlock':
						var _v62 = _v41.b;
						var _v63 = _v62.a;
						var tight = _v63.a;
						var intended1 = _v63.b;
						var marker = _v63.c;
						var order = _v63.d;
						var closeListItems2 = _v63.e;
						var openListItem2 = _v63.f;
						var rest = _v62.b;
						switch (newRawBlock.$) {
							case 'OrderedListBlock':
								var intended2 = newRawBlock.b;
								var marker2 = newRawBlock.c;
								var openListItem1 = newRawBlock.f;
								if (_Utils_eq(marker, marker2)) {
									var _v65 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v65.$ === 'Ok') {
										var value = _v65.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A6(
														$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended2,
														marker,
														order,
														A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v65.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v66 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v66.$ === 'Ok') {
										var value = _v66.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A6(
															$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
															tight2,
															intended1,
															marker,
															order,
															A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
															openListItem2),
														rest))
											});
									} else {
										var e = _v66.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended1, marker, order, closeListItems2, openListItem2 + ('\n' + body1)),
											rest)
									});
							default:
								var _v67 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2);
								if (_v67.$ === 'Ok') {
									var value = _v67.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A6(
														$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended1,
														marker,
														order,
														A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v67.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'OpenBlockOrParagraph':
						switch (_v41.a.$) {
							case 'OpenBlockOrParagraph':
								var body1 = _v41.a.a.a;
								var _v68 = _v41.b;
								var body2 = _v68.a.a.a;
								var rest = _v68.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
												$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
													A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', body2, body1))),
											rest)
									});
							case 'SetextLine':
								if (_v41.a.a.$ === 'LevelOne') {
									var _v69 = _v41.a;
									var _v70 = _v69.a;
									var _v71 = _v41.b;
									var unparsedInlines = _v71.a.a;
									var rest = _v71.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 1, unparsedInlines),
												rest)
										});
								} else {
									var _v72 = _v41.a;
									var _v73 = _v72.a;
									var _v74 = _v41.b;
									var unparsedInlines = _v74.a.a;
									var rest = _v74.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 2, unparsedInlines),
												rest)
										});
								}
							case 'TableDelimiter':
								var _v75 = _v41.a.a;
								var text = _v75.a;
								var alignments = _v75.b;
								var _v76 = _v41.b;
								var rawHeaders = _v76.a.a.a;
								var rest = _v76.b;
								var _v77 = A2(
									$dillonkearns$elm_markdown$Markdown$TableParser$parseHeader,
									A2($dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow, text, alignments),
									rawHeaders);
								if (_v77.$ === 'Ok') {
									var headers = _v77.a.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$Table(
													A2($dillonkearns$elm_markdown$Markdown$Table$Table, headers, _List_Nil)),
												rest)
										});
								} else {
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
													$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
														A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', rawHeaders, text.raw))),
												rest)
										});
								}
							default:
								break _v41$13;
						}
					case 'Table':
						if (_v41.a.$ === 'Table') {
							var updatedTable = _v41.a.a;
							var _v78 = _v41.b;
							var rest = _v78.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									linkReferenceDefinitions: state.linkReferenceDefinitions,
									rawBlocks: A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$Table(updatedTable),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 'BlankLine':
						if (_v41.b.b.b) {
							switch (_v41.b.b.a.$) {
								case 'OrderedListBlock':
									var _v79 = _v41.b;
									var _v80 = _v79.a;
									var _v81 = _v79.b;
									var _v82 = _v81.a;
									var tight = _v82.a;
									var intended1 = _v82.b;
									var marker = _v82.c;
									var order = _v82.d;
									var closeListItems2 = _v82.e;
									var openListItem2 = _v82.f;
									var rest = _v81.b;
									var _v83 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v83.$ === 'Ok') {
										var value = _v83.a;
										if (newRawBlock.$ === 'OrderedListBlock') {
											var intended2 = newRawBlock.b;
											var openListItem = newRawBlock.f;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														A6(
															$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
															false,
															intended2,
															marker,
															order,
															A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A6(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
																	tight,
																	intended1,
																	marker,
																	order,
																	A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v83.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								case 'UnorderedListBlock':
									var _v85 = _v41.b;
									var _v86 = _v85.a;
									var _v87 = _v85.b;
									var _v88 = _v87.a;
									var tight = _v88.a;
									var intended1 = _v88.b;
									var closeListItems2 = _v88.c;
									var openListItem2 = _v88.d;
									var rest = _v87.b;
									var _v89 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v89.$ === 'Ok') {
										var value = _v89.a;
										if (newRawBlock.$ === 'UnorderedListBlock') {
											var openListItem = newRawBlock.d;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															false,
															intended1,
															A2(
																$elm$core$List$cons,
																{body: value.rawBlocks, task: openListItem2.task},
																closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A4(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended1,
																	A2(
																		$elm$core$List$cons,
																		{body: value.rawBlocks, task: openListItem2.task},
																		closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v89.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								default:
									break _v41$13;
							}
						} else {
							break _v41$13;
						}
					default:
						break _v41$13;
				}
			} else {
				break _v41$13;
			}
		}
		return $elm$parser$Parser$Advanced$succeed(
			{
				linkReferenceDefinitions: state.linkReferenceDefinitions,
				rawBlocks: A2($elm$core$List$cons, newRawBlock, state.rawBlocks)
			});
	});
var $dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper = F2(
	function (referencesDict, _v36) {
		var unparsedInlines = _v36.a;
		var mappedReferencesDict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapSecond(
					function (_v37) {
						var destination = _v37.destination;
						var title = _v37.title;
						return _Utils_Tuple2(destination, title);
					}),
				referencesDict));
		return A2(
			$elm$core$List$map,
			$dillonkearns$elm_markdown$Markdown$Parser$mapInline,
			A2($dillonkearns$elm_markdown$Markdown$InlineParser$parse, mappedReferencesDict, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$mapInline = function (inline) {
	switch (inline.$) {
		case 'Text':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Text(string);
		case 'HardLineBreak':
			return $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak;
		case 'CodeInline':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$CodeSpan(string);
		case 'Link':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Link,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'Image':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Image,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'HtmlInline':
			var node = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlInline(
				$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(node));
		case 'Emphasis':
			var level = inline.a;
			var inlines = inline.b;
			switch (level) {
				case 1:
					return $dillonkearns$elm_markdown$Markdown$Block$Emphasis(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				case 2:
					return $dillonkearns$elm_markdown$Markdown$Block$Strong(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				default:
					return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(level) ? $dillonkearns$elm_markdown$Markdown$Block$Strong(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Markdown$Parser$mapInline(
								A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 2, inlines))
							])) : $dillonkearns$elm_markdown$Markdown$Block$Emphasis(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Markdown$Parser$mapInline(
								A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 1, inlines))
							]));
			}
		default:
			var inlines = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Strikethrough(
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock = function (node) {
	switch (node.$) {
		case 'Text':
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment('TODO this never happens, but use types to drop this case.');
		case 'Element':
			var tag = node.a;
			var attributes = node.b;
			var children = node.c;
			var parseChild = function (child) {
				if (child.$ === 'Text') {
					var text = child.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks(text);
				} else {
					return _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(child))
						]);
				}
			};
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$HtmlElement,
				tag,
				attributes,
				A2($elm$core$List$concatMap, parseChild, children));
		case 'Comment':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string);
		case 'Cdata':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Cdata(string);
		case 'ProcessingInstruction':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string);
		default:
			var declarationType = node.a;
			var content = node.b;
			return A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content);
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks = function (children) {
	return A2($dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp, children, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp = F2(
	function (remaining, soFar) {
		nodesToBlocksHelp:
		while (true) {
			if (remaining.b) {
				var node = remaining.a;
				var rest = remaining.b;
				var _v31 = A2($dillonkearns$elm_markdown$Markdown$Parser$childToBlocks, node, soFar);
				if (_v31.$ === 'Ok') {
					var newSoFar = _v31.a;
					var $temp$remaining = rest,
						$temp$soFar = newSoFar;
					remaining = $temp$remaining;
					soFar = $temp$soFar;
					continue nodesToBlocksHelp;
				} else {
					var e = _v31.a;
					return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(
					$elm$core$List$reverse(soFar));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parse = function (input) {
	var _v27 = A2(
		$elm$parser$Parser$Advanced$run,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
			$dillonkearns$elm_markdown$Helpers$endOfFile),
		input);
	if (_v27.$ === 'Err') {
		var e = _v27.a;
		return $elm$core$Result$Err(e);
	} else {
		var v = _v27.a;
		var _v28 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(v);
		if (_v28.$ === 'Err') {
			var e = _v28.a;
			return A2(
				$elm$parser$Parser$Advanced$run,
				$elm$parser$Parser$Advanced$problem(e),
				'');
		} else {
			var blocks = _v28.a;
			var isNotEmptyParagraph = function (block) {
				if ((block.$ === 'Paragraph') && (!block.a.b)) {
					return false;
				} else {
					return true;
				}
			};
			return $elm$core$Result$Ok(
				A2($elm$core$List$filter, isNotEmptyParagraph, blocks));
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines = function (state) {
	return A3($dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp, state, state.rawBlocks, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp = F3(
	function (state, rawBlocks, parsedBlocks) {
		parseAllInlinesHelp:
		while (true) {
			if (rawBlocks.b) {
				var rawBlock = rawBlocks.a;
				var rest = rawBlocks.b;
				var _v26 = A2($dillonkearns$elm_markdown$Markdown$Parser$parseInlines, state.linkReferenceDefinitions, rawBlock);
				switch (_v26.$) {
					case 'ParsedBlock':
						var newParsedBlock = _v26.a;
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = A2($elm$core$List$cons, newParsedBlock, parsedBlocks);
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					case 'EmptyBlock':
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = parsedBlocks;
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					default:
						var e = _v26.a;
						return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(parsedBlocks);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines = F2(
	function (linkReferences, header) {
		return A2(
			$elm$core$List$map,
			function (_v24) {
				var label = _v24.label;
				var alignment = _v24.alignment;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
					linkReferences,
					function (parsedHeaderLabel) {
						return {alignment: alignment, label: parsedHeaderLabel};
					},
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(label));
			},
			header);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseInlines = F2(
	function (linkReferences, rawBlock) {
		switch (rawBlock.$) {
			case 'Heading':
				var level = rawBlock.a;
				var unparsedInlines = rawBlock.b;
				var _v17 = $dillonkearns$elm_markdown$Markdown$Parser$toHeading(level);
				if (_v17.$ === 'Ok') {
					var parsedLevel = _v17.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
						A2(
							$dillonkearns$elm_markdown$Markdown$Block$Heading,
							parsedLevel,
							A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
				} else {
					var e = _v17.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
				}
			case 'OpenBlockOrParagraph':
				var unparsedInlines = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
			case 'Html':
				var html = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(html));
			case 'UnorderedListBlock':
				var tight = rawBlock.a;
				var unparsedItems = rawBlock.c;
				var parseItem = F2(
					function (rawBlockTask, rawBlocks) {
						var blocksTask = function () {
							if (rawBlockTask.$ === 'Just') {
								if (!rawBlockTask.a) {
									return $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask;
								} else {
									return $dillonkearns$elm_markdown$Markdown$Block$CompletedTask;
								}
							} else {
								return $dillonkearns$elm_markdown$Markdown$Block$NoTask;
							}
						}();
						var blocks = function () {
							var _v18 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
								{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
							if (_v18.$ === 'Ok') {
								var parsedBlocks = _v18.a;
								return parsedBlocks;
							} else {
								return _List_Nil;
							}
						}();
						return A2($dillonkearns$elm_markdown$Markdown$Block$ListItem, blocksTask, blocks);
					});
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$UnorderedList,
						$dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight),
						$elm$core$List$reverse(
							A2(
								$elm$core$List$map,
								function (item) {
									return A2(parseItem, item.task, item.body);
								},
								unparsedItems))));
			case 'OrderedListBlock':
				var tight = rawBlock.a;
				var startingIndex = rawBlock.d;
				var unparsedItems = rawBlock.e;
				var parseItem = function (rawBlocks) {
					var _v20 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
						{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
					if (_v20.$ === 'Ok') {
						var parsedBlocks = _v20.a;
						return parsedBlocks;
					} else {
						return _List_Nil;
					}
				};
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A3(
						$dillonkearns$elm_markdown$Markdown$Block$OrderedList,
						$dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight),
						startingIndex,
						$elm$core$List$reverse(
							A2($elm$core$List$map, parseItem, unparsedItems))));
			case 'CodeBlock':
				var codeBlock = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(codeBlock));
			case 'ThematicBreak':
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$ThematicBreak);
			case 'BlankLine':
				return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
			case 'BlockQuote':
				return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
			case 'ParsedBlockQuote':
				var rawBlocks = rawBlock.a;
				var _v21 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
					{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
				if (_v21.$ === 'Ok') {
					var parsedBlocks = _v21.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
						$dillonkearns$elm_markdown$Markdown$Block$BlockQuote(parsedBlocks));
				} else {
					var e = _v21.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
				}
			case 'IndentedCodeBlock':
				var codeBlockBody = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(
						{body: codeBlockBody, language: $elm$core$Maybe$Nothing}));
			case 'Table':
				var _v22 = rawBlock.a;
				var header = _v22.a;
				var rows = _v22.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$Table,
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines, linkReferences, header),
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines, linkReferences, rows)));
			case 'TableDelimiter':
				var _v23 = rawBlock.a;
				var text = _v23.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(text.raw))));
			default:
				var raw = rawBlock.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(raw))));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline = F3(
	function (linkReferences, wrap, unparsedInlines) {
		return wrap(
			A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines = F2(
	function (linkReferences, rows) {
		return A2(
			$elm$core$List$map,
			function (row) {
				return A2(
					$elm$core$List$map,
					function (column) {
						return A3(
							$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
							linkReferences,
							$elm$core$Basics$identity,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(column));
					},
					row);
			},
			rows);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock = function (revStmts) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revStmts);
				},
				$dillonkearns$elm_markdown$Helpers$endOfFile),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (reference) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($dillonkearns$elm_markdown$Markdown$Parser$addReference, revStmts, reference));
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser)),
				function () {
				var _v3 = revStmts.rawBlocks;
				_v3$6:
				while (true) {
					if (_v3.b) {
						switch (_v3.a.$) {
							case 'OpenBlockOrParagraph':
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser()));
							case 'Table':
								var table = _v3.a.a;
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$elm$parser$Parser$Advanced$oneOf(
											_List_fromArray(
												[
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser(),
													$dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted(table)
												]))));
							case 'UnorderedListBlock':
								var _v4 = _v3.a;
								var tight = _v4.a;
								var intended = _v4.b;
								var closeListItems = _v4.c;
								var openListItem = _v4.d;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															tight,
															intended,
															closeListItems,
															_Utils_update(
																openListItem,
																{
																	body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '', openListItem.body, newString)
																})),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended,
														closeListItems,
														_Utils_update(
															openListItem,
															{
																body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem.body, newString)
															})),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v5) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
														$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 'OrderedListBlock':
								var _v10 = _v3.a;
								var tight = _v10.a;
								var intended = _v10.b;
								var marker = _v10.c;
								var order = _v10.d;
								var closeListItems = _v10.e;
								var openListItem = _v10.f;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v11) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
														$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 'BlankLine':
								if (_v3.b.b) {
									switch (_v3.b.a.$) {
										case 'UnorderedListBlock':
											var _v6 = _v3.a;
											var _v7 = _v3.b;
											var _v8 = _v7.a;
											var tight = _v8.a;
											var intended = _v8.b;
											var closeListItems = _v8.c;
											var openListItem = _v8.d;
											var rest = _v7.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A4(
																		$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																		tight,
																		intended,
																		closeListItems,
																		_Utils_update(
																			openListItem,
																			{
																				body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '', openListItem.body, newString)
																			})),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																A4(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended,
																	closeListItems,
																	_Utils_update(
																		openListItem,
																		{
																			body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem.body, newString)
																		})),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem.body) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v9) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
																	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										case 'OrderedListBlock':
											var _v12 = _v3.a;
											var _v13 = _v3.b;
											var _v14 = _v13.a;
											var tight = _v14.a;
											var intended = _v14.b;
											var marker = _v14.c;
											var order = _v14.d;
											var closeListItems = _v14.e;
											var openListItem = _v14.f;
											var rest = _v13.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v15) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
																	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										default:
											break _v3$6;
									}
								} else {
									break _v3$6;
								}
							default:
								break _v3$6;
						}
					} else {
						break _v3$6;
					}
				}
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (block) {
						return $elm$parser$Parser$Advanced$Loop(block);
					},
					A2(
						$elm$parser$Parser$Advanced$andThen,
						$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()));
			}(),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (block) {
					return $elm$parser$Parser$Advanced$Loop(block);
				},
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
					$dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser))
			]));
};
var $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks = function (textNodeValue) {
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		$dillonkearns$elm_markdown$Markdown$Parser$parse(textNodeValue));
};
var $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode = function (xmlNode) {
	switch (xmlNode.$) {
		case 'Text':
			var innerText = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(innerText)));
		case 'Element':
			var tag = xmlNode.a;
			var attributes = xmlNode.b;
			var children = xmlNode.c;
			var _v1 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
			if (_v1.$ === 'Ok') {
				var parsedChildren = _v1.a;
				return $elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, parsedChildren)));
			} else {
				var err = _v1.a;
				return $elm$parser$Parser$Advanced$problem(err);
			}
		case 'Comment':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)));
		case 'Cdata':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)));
		case 'ProcessingInstruction':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)));
		default:
			var declarationType = xmlNode.a;
			var content = xmlNode.b;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)));
	}
};
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser() {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		$dillonkearns$elm_markdown$Markdown$Parser$completeBlocks,
		A2(
			$elm$parser$Parser$Advanced$loop,
			{linkReferenceDefinitions: _List_Nil, rawBlocks: _List_Nil},
			$dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock,
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v40) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$setextLineParser),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v39) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(true),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(true),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser(),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph)
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v38) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser() {
	return A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode, $dillonkearns$elm_markdown$HtmlParser$html);
}
try {
	var $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$htmlParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$htmlParser;
	};
} catch ($) {
	throw 'Some top-level definitions from `Markdown.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    childToBlocks\n  │     ↓\n  │    rawBlockParser\n  │     ↓\n  │    completeBlocks\n  │     ↓\n  │    completeOrMergeBlocks\n  │     ↓\n  │    mergeableBlockNotAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    mergeableBlockAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    mergeableBlockAfterList\n  │     ↓\n  │    htmlParser\n  │     ↓\n  │    inlineParseHelper\n  │     ↓\n  │    mapInline\n  │     ↓\n  │    nodeToRawBlock\n  │     ↓\n  │    nodesToBlocks\n  │     ↓\n  │    nodesToBlocksHelp\n  │     ↓\n  │    parse\n  │     ↓\n  │    parseAllInlines\n  │     ↓\n  │    parseAllInlinesHelp\n  │     ↓\n  │    parseHeaderInlines\n  │     ↓\n  │    parseInlines\n  │     ↓\n  │    parseRawInline\n  │     ↓\n  │    parseRowInlines\n  │     ↓\n  │    stepRawBlock\n  │     ↓\n  │    textNodeToBlocks\n  │     ↓\n  │    xmlNodeToHtmlNode\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $author$project$Tailwind$Utilities$px_0 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-left', '0px'),
			A2($rtfeldman$elm_css$Css$property, 'padding-right', '0px')
		]));
var $author$project$Tailwind$Utilities$px_5 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-left', '1.25rem'),
			A2($rtfeldman$elm_css$Css$property, 'padding-right', '1.25rem')
		]));
var $dillonkearns$elm_markdown$Markdown$Renderer$combineResults = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $dillonkearns$elm_markdown$Markdown$Block$foldl = F3(
	function (_function, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var block = list.a;
				var remainingBlocks = list.b;
				switch (block.$) {
					case 'HtmlBlock':
						var html = block.a;
						if (html.$ === 'HtmlElement') {
							var children = html.c;
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = _Utils_ap(children, remainingBlocks);
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						} else {
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = remainingBlocks;
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						}
					case 'UnorderedList':
						var blocks = block.b;
						var childBlocks = A2(
							$elm$core$List$concatMap,
							function (_v3) {
								var children = _v3.b;
								return children;
							},
							blocks);
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(childBlocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'OrderedList':
						var blocks = block.c;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(
							$elm$core$List$concat(blocks),
							remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'BlockQuote':
						var blocks = block.a;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(blocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Heading':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Paragraph':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Table':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'CodeBlock':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					default:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText = function (block) {
	switch (block.$) {
		case 'Paragraph':
			var inlines = block.a;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'HtmlBlock':
			var html = block.a;
			if (html.$ === 'HtmlElement') {
				var blocks = html.c;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Block$foldl,
					F2(
						function (nestedBlock, soFar) {
							return _Utils_ap(
								soFar,
								$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(nestedBlock));
						}),
					'',
					blocks);
			} else {
				return '';
			}
		case 'UnorderedList':
			var items = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (_v4) {
						var blocks = _v4.b;
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 'OrderedList':
			var items = block.c;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (blocks) {
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 'BlockQuote':
			var blocks = block.a;
			return A2(
				$elm$core$String$join,
				'\n',
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
		case 'Heading':
			var inlines = block.b;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'Table':
			var header = block.a;
			var rows = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				$elm$core$List$concat(
					_List_fromArray(
						[
							A2(
							$elm$core$List$map,
							$dillonkearns$elm_markdown$Markdown$Block$extractInlineText,
							A2(
								$elm$core$List$map,
								function ($) {
									return $.label;
								},
								header)),
							$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								$elm$core$List$map($dillonkearns$elm_markdown$Markdown$Block$extractInlineText),
								rows))
						])));
		case 'CodeBlock':
			var body = block.a.body;
			return body;
		default:
			return '';
	}
};
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineText = function (inlines) {
	return A3($elm$core$List$foldl, $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp, '', inlines);
};
var $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp = F2(
	function (inline, text) {
		switch (inline.$) {
			case 'Text':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'HardLineBreak':
				return text + ' ';
			case 'CodeSpan':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'Link':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Image':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'HtmlInline':
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var blocks = html.c;
					return A3(
						$dillonkearns$elm_markdown$Markdown$Block$foldl,
						F2(
							function (block, soFar) {
								return _Utils_ap(
									soFar,
									$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(block));
							}),
						text,
						blocks);
				} else {
					return text;
				}
			case 'Strong':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Emphasis':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			default:
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtml = F5(
	function (tagName, attributes, children, _v0, renderedChildren) {
		var htmlRenderer = _v0.a;
		return A2(
			$elm$core$Result$andThen,
			function (okChildren) {
				return A2(
					$elm$core$Result$map,
					function (myRenderer) {
						return myRenderer(okChildren);
					},
					A3(htmlRenderer, tagName, attributes, children));
			},
			$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(renderedChildren));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$foldThing = F3(
	function (renderer, topLevelInline, soFar) {
		var _v12 = A2($dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline, renderer, topLevelInline);
		if (_v12.$ === 'Just') {
			var inline = _v12.a;
			return A2($elm$core$List$cons, inline, soFar);
		} else {
			return soFar;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper = F2(
	function (renderer, blocks) {
		return A2(
			$elm$core$List$filterMap,
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle(renderer),
			blocks);
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle = function (renderer) {
	return function (block) {
		switch (block.$) {
			case 'Heading':
				var level = block.a;
				var content = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (children) {
							return renderer.heading(
								{
									children: children,
									level: level,
									rawText: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(content)
								});
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'Paragraph':
				var content = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.paragraph,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'HtmlBlock':
				var html = block.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			case 'UnorderedList':
				var tight = block.a;
				var items = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return renderer.unorderedList(
								A2(
									$elm$core$List$map,
									function (_v7) {
										var task = _v7.a;
										var children = _v7.b;
										return A2(
											$dillonkearns$elm_markdown$Markdown$Block$ListItem,
											task,
											$elm$core$List$concat(children));
									},
									listItems));
						},
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (_v4) {
									var task = _v4.a;
									var children = _v4.b;
									return A2(
										$elm$core$Result$map,
										$dillonkearns$elm_markdown$Markdown$Block$ListItem(task),
										$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
											function (blocks) {
												return A2(
													$elm$core$List$filterMap,
													function (listItemBlock) {
														var _v5 = _Utils_Tuple2(tight, listItemBlock);
														if ((_v5.a.$ === 'Tight') && (_v5.b.$ === 'Paragraph')) {
															var _v6 = _v5.a;
															var content = _v5.b.a;
															return $elm$core$Maybe$Just(
																A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content));
														} else {
															return A2(
																$elm$core$Maybe$map,
																$elm$core$Result$map($elm$core$List$singleton),
																A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
														}
													},
													blocks);
											}(children)));
								},
								items))));
			case 'OrderedList':
				var tight = block.a;
				var startingIndex = block.b;
				var items = block.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return A2(
								renderer.orderedList,
								startingIndex,
								A2(
									$elm$core$List$map,
									function (children) {
										return $elm$core$List$concat(children);
									},
									listItems));
						},
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (itemsblocks) {
									return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
										function (blocks) {
											return A2(
												$elm$core$List$filterMap,
												function (listItemBlock) {
													var _v8 = _Utils_Tuple2(tight, listItemBlock);
													if ((_v8.a.$ === 'Tight') && (_v8.b.$ === 'Paragraph')) {
														var _v9 = _v8.a;
														var content = _v8.b.a;
														return $elm$core$Maybe$Just(
															A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content));
													} else {
														return A2(
															$elm$core$Maybe$map,
															$elm$core$Result$map($elm$core$List$singleton),
															A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
													}
												},
												blocks);
										}(itemsblocks));
								},
								items))));
			case 'CodeBlock':
				var codeBlock = block.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeBlock(codeBlock)));
			case 'ThematicBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.thematicBreak));
			case 'BlockQuote':
				var nestedBlocks = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.blockQuote,
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, nestedBlocks))));
			default:
				var header = block.a;
				var rows = block.b;
				var renderedHeaderCells = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2(
						$elm$core$List$map,
						function (_v11) {
							var label = _v11.label;
							var alignment = _v11.alignment;
							return A2(
								$elm$core$Result$map,
								$elm$core$Tuple$pair(alignment),
								A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, label));
						},
						header));
				var renderedHeader = A2(
					$elm$core$Result$map,
					function (listListView) {
						return renderer.tableHeader(
							$elm$core$List$singleton(
								renderer.tableRow(
									A2(
										$elm$core$List$map,
										function (_v10) {
											var maybeAlignment = _v10.a;
											var item = _v10.b;
											return A2(renderer.tableHeaderCell, maybeAlignment, item);
										},
										listListView))));
					},
					renderedHeaderCells);
				var renderedBody = function (r) {
					return $elm$core$List$isEmpty(r) ? _List_Nil : _List_fromArray(
						[
							renderer.tableBody(r)
						]);
				};
				var alignmentForColumn = function (columnIndex) {
					return A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.alignment;
						},
						$elm$core$List$head(
							A2($elm$core$List$drop, columnIndex, header)));
				};
				var renderRow = function (cells) {
					return A2(
						$elm$core$Result$map,
						renderer.tableRow,
						A2(
							$elm$core$Result$map,
							$elm$core$List$indexedMap(
								F2(
									function (index, cell) {
										return A2(
											renderer.tableCell,
											alignmentForColumn(index),
											cell);
									})),
							$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
								A2(
									$elm$core$List$map,
									$dillonkearns$elm_markdown$Markdown$Renderer$renderStyled(renderer),
									cells))));
				};
				var renderedRows = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2($elm$core$List$map, renderRow, rows));
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$Result$map2,
						F2(
							function (h, r) {
								return renderer.table(
									A2(
										$elm$core$List$cons,
										h,
										renderedBody(r)));
							}),
						renderedHeader,
						renderedRows));
		}
	};
};
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode = F4(
	function (renderer, tag, attributes, children) {
		return A5(
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHtml,
			tag,
			attributes,
			children,
			renderer.html,
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, children));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline = F2(
	function (renderer, inline) {
		switch (inline.$) {
			case 'Strong':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strong,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Emphasis':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.emphasis,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Strikethrough':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strikethrough,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Image':
				var src = inline.a;
				var title = inline.b;
				var children = inline.c;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.image(
							{
								alt: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(children),
								src: src,
								title: title
							})));
			case 'Text':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.text(string)));
			case 'CodeSpan':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeSpan(string)));
			case 'Link':
				var destination = inline.a;
				var title = inline.b;
				var inlines = inline.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$andThen,
						function (children) {
							return $elm$core$Result$Ok(
								A2(
									renderer.link,
									{destination: destination, title: title},
									children));
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, inlines)));
			case 'HardLineBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.hardLineBreak));
			default:
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled = F2(
	function (renderer, styledStrings) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A3(
				$elm$core$List$foldr,
				$dillonkearns$elm_markdown$Markdown$Renderer$foldThing(renderer),
				_List_Nil,
				styledStrings));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$render = F2(
	function (renderer, ast) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, ast));
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$align = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('align');
var $rtfeldman$elm_css$Html$Styled$blockquote = $rtfeldman$elm_css$Html$Styled$node('blockquote');
var $rtfeldman$elm_css$Html$Styled$br = $rtfeldman$elm_css$Html$Styled$node('br');
var $elm$json$Json$Encode$bool = _Json_wrap;
var $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$checked = $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty('checked');
var $rtfeldman$elm_css$Html$Styled$code = $rtfeldman$elm_css$Html$Styled$node('code');
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode = function (a) {
	return {$: 'HCode', a: a};
};
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1 = {$: 'Style1'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2 = {$: 'Style2'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3 = {$: 'Style3'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4 = {$: 'Style4'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5 = {$: 'Style5'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6 = {$: 'Style6'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 'String':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2, 'elm-s');
		case 'BasicSymbol':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'elm-bs');
		case 'GroupSymbol':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'elm-gs');
		case 'Capitalized':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6, 'elm-c');
		case 'Keyword':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3, 'elm-k');
		case 'Function':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5, 'elm-f');
		case 'TypeSignature':
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4, 'elm-ts');
		default:
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1, 'elm-n');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine = function (fragments) {
	return {fragments: fragments, highlight: $elm$core$Maybe$Nothing};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak = {$: 'LineBreak'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Comment = {$: 'Comment'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default = {$: 'Default'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment = F2(
	function (toStyle, _v0) {
		var syntax = _v0.a;
		var text = _v0.b;
		switch (syntax.$) {
			case 'Normal':
				return {additionalClass: '', requiredStyle: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, text: text};
			case 'Comment':
				return {additionalClass: '', requiredStyle: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Comment, text: text};
			case 'LineBreak':
				return {additionalClass: '', requiredStyle: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default, text: text};
			default:
				var c = syntax.a;
				var _v2 = toStyle(c);
				var requiredStyle = _v2.a;
				var additionalClass = _v2.b;
				return {additionalClass: additionalClass, requiredStyle: requiredStyle, text: text};
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp = F3(
	function (toStyle, _v0, _v1) {
		var syntax = _v0.a;
		var text = _v0.b;
		var lines = _v1.a;
		var fragments = _v1.b;
		var maybeLastSyntax = _v1.c;
		if (_Utils_eq(syntax, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak)) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(fragments),
					lines),
				_List_fromArray(
					[
						A2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
						toStyle,
						_Utils_Tuple2(syntax, text))
					]),
				$elm$core$Maybe$Nothing);
		} else {
			if (_Utils_eq(
				$elm$core$Maybe$Just(syntax),
				maybeLastSyntax)) {
				if (fragments.b) {
					var headFrag = fragments.a;
					var tailFrags = fragments.b;
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							_Utils_update(
								headFrag,
								{
									text: _Utils_ap(text, headFrag.text)
								}),
							tailFrags),
						maybeLastSyntax);
				} else {
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
								toStyle,
								_Utils_Tuple2(syntax, text)),
							fragments),
						maybeLastSyntax);
				}
			} else {
				return _Utils_Tuple3(
					lines,
					A2(
						$elm$core$List$cons,
						A2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
							toStyle,
							_Utils_Tuple2(syntax, text)),
						fragments),
					$elm$core$Maybe$Just(syntax));
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines = F2(
	function (toStyle, revTokens) {
		return function (_v0) {
			var lines = _v0.a;
			var frags = _v0.b;
			return A2(
				$elm$core$List$cons,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(frags),
				lines);
		}(
			A3(
				$elm$core$List$foldl,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp(toStyle),
				_Utils_Tuple3(_List_Nil, _List_Nil, $elm$core$Maybe$Nothing),
				revTokens));
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment = {$: 'Comment'};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\n'));
};
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile = F2(
	function (isNotRelevant, previousParser) {
		return A2(
			$elm$parser$Parser$ignorer,
			previousParser,
			$elm$parser$Parser$chompWhile(isNotRelevant));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('--'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen = F3(
	function (f, list, plist) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					_Utils_ap(n, list));
			},
			plist);
	});
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen = F3(
	function (f, list, pn) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					A2($elm$core$List$cons, n, list));
			},
			pn);
	});
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable = F2(
	function (options, revAList) {
		var defaultMap = options.defaultMap;
		var isNotRelevant = options.isNotRelevant;
		var end = options.end;
		var innerParsers = options.innerParsers;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							defaultMap(end),
							revAList)),
					$elm$parser$Parser$symbol(end)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable = F3(
	function (nestLevel, options, revAList) {
		var defaultMap = options.defaultMap;
		var isNotRelevant = options.isNotRelevant;
		var start = options.start;
		var end = options.end;
		var innerParsers = options.innerParsers;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return (nestLevel === 1) ? $elm$parser$Parser$succeed(n) : A3($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel - 1, options, n);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								defaultMap(end),
								revAList)),
						$elm$parser$Parser$symbol(end))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel + 1, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$symbol(start))))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp = F2(
	function (options, revAList) {
		var start = options.start;
		var end = options.end;
		var isNotRelevant = options.isNotRelevant;
		var _v0 = _Utils_Tuple2(
			$elm$core$String$uncons(options.start),
			$elm$core$String$uncons(options.end));
		if (_v0.a.$ === 'Nothing') {
			var _v1 = _v0.a;
			return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the start token cannot be an empty string!');
		} else {
			if (_v0.b.$ === 'Nothing') {
				var _v2 = _v0.b;
				return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the end token cannot be an empty string!');
			} else {
				var _v3 = _v0.a.a;
				var startChar = _v3.a;
				var _v4 = _v0.b.a;
				var endChar = _v4.a;
				return options.isNestable ? A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable,
					1,
					_Utils_update(
						options,
						{
							isNotRelevant: function (c) {
								return isNotRelevant(c) && ((!_Utils_eq(c, startChar)) && (!_Utils_eq(c, endChar)));
							}
						}),
					revAList) : A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable,
					_Utils_update(
						options,
						{
							isNotRelevant: function (c) {
								return isNotRelevant(c) && (!_Utils_eq(c, endChar));
							}
						}),
					revAList);
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited = function (options) {
	var start = options.start;
	var isNotRelevant = options.isNotRelevant;
	var defaultMap = options.defaultMap;
	return A2(
		$elm$parser$Parser$andThen,
		function (n) {
			return A2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp,
				options,
				_List_fromArray(
					[n]));
		},
		A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				defaultMap(start)),
			$elm$parser$Parser$symbol(start)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		defaultMap: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		end: '-}',
		innerParsers: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList]),
		isNestable: true,
		isNotRelevant: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		start: '{-'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol = {$: 'BasicSymbol'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C = function (a) {
	return {$: 'C', a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized = {$: 'Capitalized'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$GroupSymbol = {$: 'GroupSymbol'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword = {$: 'Keyword'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal = {$: 'Normal'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Number = {$: 'Number'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile = function (isNotRelevant) {
	return A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(_Utils_Tuple0),
			$elm$parser$Parser$chompIf(isNotRelevant)),
		$elm$parser$Parser$chompWhile(isNotRelevant));
};
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('|'),
			_Utils_chr('.'),
			_Utils_chr('='),
			_Utils_chr('\\'),
			_Utils_chr('/'),
			_Utils_chr('('),
			_Utils_chr(')'),
			_Utils_chr('-'),
			_Utils_chr('>'),
			_Utils_chr('<'),
			_Utils_chr(':'),
			_Utils_chr('+'),
			_Utils_chr('!'),
			_Utils_chr('$'),
			_Utils_chr('%'),
			_Utils_chr('&'),
			_Utils_chr('*')
		]));
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr(','),
			_Utils_chr('['),
			_Utils_chr(']'),
			_Utils_chr('{'),
			_Utils_chr('}')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\"')) || _Utils_eq(
		c,
		_Utils_chr('\''));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr(' ')) || _Utils_eq(
		c,
		_Utils_chr('\t'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isUpper)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function = {$: 'Function'};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('+'),
			_Utils_chr('-'),
			_Utils_chr('/'),
			_Utils_chr('*'),
			_Utils_chr('='),
			_Utils_chr('.'),
			_Utils_chr('$'),
			_Utils_chr('<'),
			_Utils_chr('>'),
			_Utils_chr(':'),
			_Utils_chr('&'),
			_Utils_chr('|'),
			_Utils_chr('^'),
			_Utils_chr('?'),
			_Utils_chr('%'),
			_Utils_chr('#'),
			_Utils_chr('@'),
			_Utils_chr('~'),
			_Utils_chr('!'),
			_Utils_chr(',')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
			b);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(_Utils_Tuple0),
					$elm$parser$Parser$backtrackable(
						$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$backtrackable(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar))),
			$elm$parser$Parser$backtrackable(
				$elm$parser$Parser$symbol(')')))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['as', 'where', 'let', 'in', 'if', 'else', 'then', 'case', 'of', 'type', 'alias']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber = function (c) {
	return $elm$core$Char$isDigit(c) || _Utils_eq(
		c,
		_Utils_chr('.'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber)),
	$elm$parser$Parser$chompWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('-'))),
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isLower)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Number),
					b);
			},
			$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number)),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized),
					'()')),
			$elm$parser$Parser$symbol('()')),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$GroupSymbol),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized),
			A2(
			$elm$parser$Parser$map,
			function (n) {
				return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n) : _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, n);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText)
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$String = {$: 'String'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet = $elm$core$Set$fromList(
	_List_fromArray(
		[
			_Utils_chr('\''),
			_Utils_chr('\"'),
			_Utils_chr('\\'),
			_Utils_chr('n'),
			_Utils_chr('r'),
			_Utils_chr('t'),
			_Utils_chr('b'),
			_Utils_chr('f'),
			_Utils_chr('v')
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('\\'))),
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('\\'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter = {
	defaultMap: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$String),
			b);
	},
	end: '\"',
	innerParsers: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable]),
	isNestable: false,
	isNotRelevant: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	start: '\"'
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{end: '\'', start: '\''}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{end: '\"\"\"', start: '\"\"\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return A2($elm$core$List$cons, n, revTokens);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature = {$: 'TypeSignature'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || (_Utils_eq(
		c,
		_Utils_chr('(')) || (_Utils_eq(
		c,
		_Utils_chr(')')) || (_Utils_eq(
		c,
		_Utils_chr('-')) || _Utils_eq(
		c,
		_Utils_chr(','))))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature),
					'()')),
			$elm$parser$Parser$symbol('()')),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol),
					'->')),
			$elm$parser$Parser$symbol('->')),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
					function (c) {
						return _Utils_eq(
							c,
							_Utils_chr('(')) || (_Utils_eq(
							c,
							_Utils_chr(')')) || (_Utils_eq(
							c,
							_Utils_chr('-')) || _Utils_eq(
							c,
							_Utils_chr(','))));
					}))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature),
					b);
			},
			$elm$parser$Parser$getChompedString(
				A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant,
					$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant)))
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					function (ns) {
						return A2($elm$parser$Parser$loop, ns, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol),
									':'),
								revTokens)),
						$elm$parser$Parser$symbol(':')))),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr('-')) || _Utils_eq(
		c,
		_Utils_chr('{'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar = $elm$parser$Parser$getChompedString(
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar));
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 'ExpectingKeyword', a: a};
};
var $elm$parser$Parser$Advanced$keyword = function (_v0) {
	var kwd = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(kwd);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, kwd, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return (_Utils_eq(newOffset, -1) || (0 <= A3(
				$elm$parser$Parser$Advanced$isSubChar,
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('_'));
				},
				newOffset,
				s.src))) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$keyword = function (kwd) {
	return $elm$parser$Parser$Advanced$keyword(
		A2(
			$elm$parser$Parser$Advanced$Token,
			kwd,
			$elm$parser$Parser$ExpectingKeyword(kwd)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || _Utils_eq(
		c,
		_Utils_chr('('))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || (_Utils_eq(
		c,
		_Utils_chr('(')) || (_Utils_eq(
		c,
		_Utils_chr(')')) || (_Utils_eq(
		c,
		_Utils_chr(',')) || _Utils_eq(
		c,
		_Utils_chr('.')))))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || (_Utils_eq(
		c,
		_Utils_chr('(')) || _Utils_eq(
		c,
		_Utils_chr(')'))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested = function (_v1) {
	var nestLevel = _v1.a;
	var revTokens = _v1.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return _Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens));
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							_Utils_ap(n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel + 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
							revTokens)),
					$elm$parser$Parser$symbol('('))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return (!nestLevel) ? $elm$parser$Parser$Done(ns) : $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel - 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (s) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar))))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr(',')) || _Utils_eq(
											c,
											_Utils_chr('.'));
									}))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature),
									b);
							},
							$elm$parser$Parser$getChompedString(
								A2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant,
									$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
									b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant)))
						]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_Tuple2(0, n),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2($elm$parser$Parser$loop, n, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
									'exposing')),
							$elm$parser$Parser$keyword('exposing')),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
									'as')),
							$elm$parser$Parser$keyword('as')),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant)))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp = F2(
	function (revTokens, str) {
		return (str === 'module') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable = F2(
	function (revTokens, n) {
		return ((n === 'module') || (n === 'import')) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : ((n === 'port') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature)));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_ap(s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							A2($elm$core$List$cons, s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines,
	$elm$core$Result$map($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode));
var $rtfeldman$elm_css$VirtualDom$Styled$unstyledNode = $rtfeldman$elm_css$VirtualDom$Styled$Unstyled;
var $rtfeldman$elm_css$Html$Styled$fromUnstyled = $rtfeldman$elm_css$VirtualDom$Styled$unstyledNode;
var $rtfeldman$elm_css$Html$Styled$pre = $rtfeldman$elm_css$Html$Styled$node('pre');
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add = {$: 'Add'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del = {$: 'Del'};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal = {$: 'Normal'};
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString = function (required) {
	return 'elmsh' + function () {
		switch (required.$) {
			case 'Default':
				return '0';
			case 'Comment':
				return '-comm';
			case 'Style1':
				return '1';
			case 'Style2':
				return '2';
			case 'Style3':
				return '3';
			case 'Style4':
				return '4';
			case 'Style5':
				return '5';
			case 'Style6':
				return '6';
			default:
				return '7';
		}
	}();
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView = function (_v0) {
	var text = _v0.text;
	var requiredStyle = _v0.requiredStyle;
	var additionalClass = _v0.additionalClass;
	return (_Utils_eq(requiredStyle, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default) && $elm$core$String$isEmpty(additionalClass)) ? $elm$html$Html$text(text) : A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString(requiredStyle),
						!_Utils_eq(requiredStyle, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default)),
						_Utils_Tuple2('elmsh-' + additionalClass, additionalClass !== '')
					]))
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(text)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView = F3(
	function (start, index, _v0) {
		var fragments = _v0.fragments;
		var highlight = _v0.highlight;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('elmsh-line', true),
							_Utils_Tuple2(
							'elmsh-hl',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal))),
							_Utils_Tuple2(
							'elmsh-add',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add))),
							_Utils_Tuple2(
							'elmsh-del',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del)))
						])),
					A2(
					$elm$html$Html$Attributes$attribute,
					'data-elmsh-lc',
					$elm$core$String$fromInt(start + index))
				]),
			A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments));
	});
var $elm$html$Html$pre = _VirtualDom_node('pre');
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml = function (lines) {
	return A2(
		$elm$html$Html$code,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elmsh')
			]),
		$elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var highlight = _v0.highlight;
					var fragments = _v0.fragments;
					return _Utils_eq(highlight, $elm$core$Maybe$Nothing) ? A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments) : _List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$classList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'elmsh-hl',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal))),
											_Utils_Tuple2(
											'elmsh-add',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add))),
											_Utils_Tuple2(
											'elmsh-del',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del)))
										]))
								]),
							A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments))
						]);
				},
				lines)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml = F2(
	function (maybeStart, lines) {
		if (maybeStart.$ === 'Nothing') {
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				_List_fromArray(
					[
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml(lines)
					]));
		} else {
			var start = maybeStart.a;
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				$elm$core$List$singleton(
					A2(
						$elm$html$Html$code,
						_List_Nil,
						A2(
							$elm$core$List$indexedMap,
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView(start),
							lines))));
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml = F2(
	function (maybeStart, _v0) {
		var lines = _v0.a;
		return A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml, maybeStart, lines);
	});
var $author$project$TailwindMarkdownRenderer$codeBlock = function (details) {
	return A2(
		$elm$core$Result$withDefault,
		A2(
			$rtfeldman$elm_css$Html$Styled$pre,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$code,
					_List_Nil,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(details.body)
						]))
				])),
		A2(
			$elm$core$Result$map,
			$rtfeldman$elm_css$Html$Styled$fromUnstyled,
			A2(
				$elm$core$Result$map,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
					$elm$core$Maybe$Just(1)),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm(details.body))));
};
var $rtfeldman$elm_css$Css$color = function (c) {
	return A2($rtfeldman$elm_css$Css$property, 'color', c.value);
};
var $rtfeldman$elm_css$Html$Styled$del = $rtfeldman$elm_css$Html$Styled$node('del');
var $rtfeldman$elm_css$Html$Styled$Attributes$disabled = $rtfeldman$elm_css$Html$Styled$Attributes$boolProperty('disabled');
var $rtfeldman$elm_css$Html$Styled$em = $rtfeldman$elm_css$Html$Styled$node('em');
var $author$project$Tailwind$Utilities$font_bold = A2($rtfeldman$elm_css$Css$property, 'font-weight', '700');
var $author$project$Tailwind$Utilities$font_medium = A2($rtfeldman$elm_css$Css$property, 'font-weight', '500');
var $author$project$Tailwind$Utilities$font_semibold = A2($rtfeldman$elm_css$Css$property, 'font-weight', '600');
var $rtfeldman$elm_css$VirtualDom$Styled$attribute = F2(
	function (key, value) {
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$attribute, key, value),
			false,
			'');
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$attribute = $rtfeldman$elm_css$VirtualDom$Styled$attribute;
var $author$project$Tailwind$Utilities$border_b = A2($rtfeldman$elm_css$Css$property, 'border-bottom-width', '1px');
var $rtfeldman$elm_css$Html$Styled$Attributes$class = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('className');
var $rtfeldman$elm_css$Html$Styled$h2 = $rtfeldman$elm_css$Html$Styled$node('h2');
var $rtfeldman$elm_css$Html$Styled$h3 = $rtfeldman$elm_css$Html$Styled$node('h3');
var $rtfeldman$elm_css$Html$Styled$h4 = $rtfeldman$elm_css$Html$Styled$node('h4');
var $rtfeldman$elm_css$Html$Styled$h5 = $rtfeldman$elm_css$Html$Styled$node('h5');
var $rtfeldman$elm_css$Html$Styled$h6 = $rtfeldman$elm_css$Html$Styled$node('h6');
var $rtfeldman$elm_css$Html$Styled$Attributes$id = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('id');
var $rtfeldman$elm_css$Css$makeImportant = function (_v0) {
	var str = _v0.a;
	return A2(
		$elm$core$String$endsWith,
		' !important',
		$elm$core$String$toLower(str)) ? $rtfeldman$elm_css$Css$Structure$Property(str) : $rtfeldman$elm_css$Css$Structure$Property(str + ' !important');
};
var $rtfeldman$elm_css$Css$Preprocess$ExtendSelector = F2(
	function (a, b) {
		return {$: 'ExtendSelector', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Preprocess$mapAllProperties = F2(
	function (update, styles) {
		if (!styles.b) {
			return styles;
		} else {
			if (!styles.b.b) {
				var only = styles.a;
				return _List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$Preprocess$mapProperties, update, only)
					]);
			} else {
				var first = styles.a;
				var rest = styles.b;
				return A2(
					$elm$core$List$cons,
					first,
					A2($rtfeldman$elm_css$Css$Preprocess$mapAllProperties, update, rest));
			}
		}
	});
var $rtfeldman$elm_css$Css$Preprocess$mapProperties = F2(
	function (update, style) {
		switch (style.$) {
			case 'AppendProperty':
				var property = style.a;
				return $rtfeldman$elm_css$Css$Preprocess$AppendProperty(
					update(property));
			case 'ExtendSelector':
				var selector = style.a;
				var styles = style.b;
				return A2(
					$rtfeldman$elm_css$Css$Preprocess$ExtendSelector,
					selector,
					A2($rtfeldman$elm_css$Css$Preprocess$mapAllProperties, update, styles));
			case 'NestSnippet':
				return style;
			case 'WithPseudoElement':
				return style;
			case 'WithMedia':
				return style;
			case 'WithKeyframes':
				return style;
			default:
				var otherStyles = style.a;
				return $rtfeldman$elm_css$Css$Preprocess$ApplyStyles(
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$Css$Preprocess$mapProperties(update),
						otherStyles));
		}
	});
var $rtfeldman$elm_css$Css$important = $rtfeldman$elm_css$Css$Preprocess$mapProperties($rtfeldman$elm_css$Css$makeImportant);
var $author$project$Tailwind$Utilities$mb_4 = A2($rtfeldman$elm_css$Css$property, 'margin-bottom', '1rem');
var $author$project$Tailwind$Utilities$ml_2 = A2($rtfeldman$elm_css$Css$property, 'margin-left', '0.5rem');
var $author$project$Tailwind$Utilities$mt_10 = A2($rtfeldman$elm_css$Css$property, 'margin-top', '2.5rem');
var $author$project$Tailwind$Utilities$mt_2 = A2($rtfeldman$elm_css$Css$property, 'margin-top', '0.5rem');
var $author$project$Tailwind$Utilities$mt_8 = A2($rtfeldman$elm_css$Css$property, 'margin-top', '2rem');
var $author$project$Tailwind$Utilities$no_underline = A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'none');
var $author$project$Tailwind$Utilities$pb_1 = A2($rtfeldman$elm_css$Css$property, 'padding-bottom', '0.25rem');
var $author$project$TailwindMarkdownRenderer$rawTextToId = function (rawText) {
	return $elm$core$String$toLower(
		A2(
			$elm$core$String$join,
			'-',
			A2($elm$core$String$split, ' ', rawText)));
};
var $author$project$Tailwind$Utilities$select_none = A2($rtfeldman$elm_css$Css$property, 'user-select', 'none');
var $rtfeldman$elm_css$Html$Styled$span = $rtfeldman$elm_css$Html$Styled$node('span');
var $author$project$Tailwind$Utilities$text_3xl = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'font-size', '1.875rem'),
			A2($rtfeldman$elm_css$Css$property, 'line-height', '2.25rem')
		]));
var $author$project$Tailwind$Utilities$text_gray_500 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(107, 114, 128, var(--tw-text-opacity))')
		]));
var $author$project$Tailwind$Utilities$text_lg = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'font-size', '1.125rem'),
			A2($rtfeldman$elm_css$Css$property, 'line-height', '1.75rem')
		]));
var $author$project$Tailwind$Utilities$tracking_tight = A2($rtfeldman$elm_css$Css$property, 'letter-spacing', '-0.025em');
var $author$project$TailwindMarkdownRenderer$heading = function (_v0) {
	var level = _v0.level;
	var rawText = _v0.rawText;
	var children = _v0.children;
	switch (level.$) {
		case 'H1':
			return A2(
				$rtfeldman$elm_css$Html$Styled$h1,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$Tailwind$Utilities$text_6xl,
								$author$project$Tailwind$Utilities$font_bold,
								$author$project$Tailwind$Utilities$tracking_tight,
								$author$project$Tailwind$Utilities$mt_2,
								$author$project$Tailwind$Utilities$mb_4,
								$rtfeldman$elm_css$Css$fontFamilies(
								_List_fromArray(
									['luxus-brut', 'cursive'])),
								$author$project$Tailwind$Utilities$text_brown
							]))
					]),
				children);
		case 'H2':
			return A2(
				$rtfeldman$elm_css$Html$Styled$h2,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$id(
						$author$project$TailwindMarkdownRenderer$rawTextToId(rawText)),
						A2(
						$rtfeldman$elm_css$Html$Styled$Attributes$attribute,
						'name',
						$author$project$TailwindMarkdownRenderer$rawTextToId(rawText)),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$text_3xl, $author$project$Tailwind$Utilities$font_semibold, $author$project$Tailwind$Utilities$tracking_tight, $author$project$Tailwind$Utilities$mt_10, $author$project$Tailwind$Utilities$pb_1, $author$project$Tailwind$Utilities$border_b]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$a,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$href(
								'#' + $author$project$TailwindMarkdownRenderer$rawTextToId(rawText)),
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$rtfeldman$elm_css$Css$important($author$project$Tailwind$Utilities$no_underline)
									]))
							]),
						_Utils_ap(
							children,
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$span,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$class('anchor-icon'),
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[$author$project$Tailwind$Utilities$ml_2, $author$project$Tailwind$Utilities$text_gray_500, $author$project$Tailwind$Utilities$select_none]))
										]),
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$text('#')
										]))
								])))
					]));
		default:
			return A2(
				function () {
					switch (level.$) {
						case 'H1':
							return $rtfeldman$elm_css$Html$Styled$h1;
						case 'H2':
							return $rtfeldman$elm_css$Html$Styled$h2;
						case 'H3':
							return $rtfeldman$elm_css$Html$Styled$h3;
						case 'H4':
							return $rtfeldman$elm_css$Html$Styled$h4;
						case 'H5':
							return $rtfeldman$elm_css$Html$Styled$h5;
						default:
							return $rtfeldman$elm_css$Html$Styled$h6;
					}
				}(),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$font_bold, $author$project$Tailwind$Utilities$text_lg, $author$project$Tailwind$Utilities$mt_8, $author$project$Tailwind$Utilities$mb_4]))
					]),
				children);
	}
};
var $rtfeldman$elm_css$Html$Styled$hr = $rtfeldman$elm_css$Html$Styled$node('hr');
var $rtfeldman$elm_css$Html$Styled$input = $rtfeldman$elm_css$Html$Styled$node('input');
var $author$project$Tailwind$Utilities$italic = A2($rtfeldman$elm_css$Css$property, 'font-style', 'italic');
var $rtfeldman$elm_css$Html$Styled$li = $rtfeldman$elm_css$Html$Styled$node('li');
var $rtfeldman$elm_css$Html$Styled$ol = $rtfeldman$elm_css$Html$Styled$node('ol');
var $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer = function (a) {
	return {$: 'HtmlRenderer', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Html$resultOr = F2(
	function (ra, rb) {
		if (ra.$ === 'Err') {
			var singleError = ra.a;
			if (rb.$ === 'Ok') {
				var okValue = rb.a;
				return $elm$core$Result$Ok(okValue);
			} else {
				var errorsSoFar = rb.a;
				return $elm$core$Result$Err(
					A2($elm$core$List$cons, singleError, errorsSoFar));
			}
		} else {
			var okValue = ra.a;
			return $elm$core$Result$Ok(okValue);
		}
	});
var $dillonkearns$elm_markdown$Markdown$Html$attributesToString = function (attributes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var name = _v0.name;
				var value = _v0.value;
				return name + ('=\"' + (value + '\"'));
			},
			attributes));
};
var $dillonkearns$elm_markdown$Markdown$Html$tagToString = F2(
	function (tagName, attributes) {
		return $elm$core$List$isEmpty(attributes) ? ('<' + (tagName + '>')) : ('<' + (tagName + (' ' + ($dillonkearns$elm_markdown$Markdown$Html$attributesToString(attributes) + '>'))));
	});
var $dillonkearns$elm_markdown$Markdown$Html$oneOf = function (decoders) {
	var unwrappedDecoders = A2(
		$elm$core$List$map,
		function (_v4) {
			var rawDecoder = _v4.a;
			return rawDecoder;
		},
		decoders);
	return function (rawDecoder) {
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return A2(
						$elm$core$Result$mapError,
						function (errors) {
							if (!errors.b) {
								return 'Ran into a oneOf with no possibilities!';
							} else {
								if (!errors.b.b) {
									var singleError = errors.a;
									return 'Problem with the given value:\n\n' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\n' + (singleError + '\n')));
								} else {
									return 'oneOf failed parsing this value:\n    ' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\nParsing failed in the following 2 ways:\n\n\n' + (A2(
										$elm$core$String$join,
										'\n\n',
										A2(
											$elm$core$List$indexedMap,
											F2(
												function (index, error) {
													return '(' + ($elm$core$String$fromInt(index + 1) + (') ' + error));
												}),
											errors)) + '\n')));
								}
							}
						},
						A3(rawDecoder, tagName, attributes, innerBlocks));
				}));
	}(
		A3(
			$elm$core$List$foldl,
			F2(
				function (decoder, soFar) {
					return F3(
						function (tagName, attributes, children) {
							return A2(
								$dillonkearns$elm_markdown$Markdown$Html$resultOr,
								A3(decoder, tagName, attributes, children),
								A3(soFar, tagName, attributes, children));
						});
				}),
			F3(
				function (_v0, _v1, _v2) {
					return $elm$core$Result$Err(_List_Nil);
				}),
			unwrappedDecoders));
};
var $rtfeldman$elm_css$Html$Styled$p = $rtfeldman$elm_css$Html$Styled$node('p');
var $author$project$Tailwind$Utilities$pb_3 = A2($rtfeldman$elm_css$Css$property, 'padding-bottom', '0.75rem');
var $rtfeldman$elm_css$Css$Structure$Compatible = {$: 'Compatible'};
var $rtfeldman$elm_css$Css$cssFunction = F2(
	function (funcName, args) {
		return funcName + ('(' + (A2($elm$core$String$join, ',', args) + ')'));
	});
var $rtfeldman$elm_css$Css$rgb = F3(
	function (r, g, b) {
		return {
			alpha: 1,
			blue: b,
			color: $rtfeldman$elm_css$Css$Structure$Compatible,
			green: g,
			red: r,
			value: A2(
				$rtfeldman$elm_css$Css$cssFunction,
				'rgb',
				A2(
					$elm$core$List$map,
					$elm$core$String$fromInt,
					_List_fromArray(
						[r, g, b])))
		};
	});
var $rtfeldman$elm_css$Html$Styled$Attributes$start = function (n) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$Attributes$stringProperty,
		'start',
		$elm$core$String$fromInt(n));
};
var $rtfeldman$elm_css$Html$Styled$strong = $rtfeldman$elm_css$Html$Styled$node('strong');
var $rtfeldman$elm_css$Html$Styled$table = $rtfeldman$elm_css$Html$Styled$node('table');
var $rtfeldman$elm_css$Html$Styled$tbody = $rtfeldman$elm_css$Html$Styled$node('tbody');
var $rtfeldman$elm_css$Html$Styled$td = $rtfeldman$elm_css$Html$Styled$node('td');
var $author$project$Tailwind$Utilities$text_brown_text = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(117, 116, 113, var(--tw-text-opacity))')
		]));
var $rtfeldman$elm_css$Html$Styled$th = $rtfeldman$elm_css$Html$Styled$node('th');
var $rtfeldman$elm_css$Html$Styled$thead = $rtfeldman$elm_css$Html$Styled$node('thead');
var $rtfeldman$elm_css$Html$Styled$tr = $rtfeldman$elm_css$Html$Styled$node('tr');
var $rtfeldman$elm_css$Html$Styled$Attributes$type_ = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('type');
var $rtfeldman$elm_css$Html$Styled$ul = $rtfeldman$elm_css$Html$Styled$node('ul');
var $author$project$Tailwind$Utilities$underline = A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'underline');
var $author$project$TailwindMarkdownRenderer$renderer = {
	blockQuote: $rtfeldman$elm_css$Html$Styled$blockquote(_List_Nil),
	codeBlock: $author$project$TailwindMarkdownRenderer$codeBlock,
	codeSpan: function (content) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$code,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$Tailwind$Utilities$font_semibold,
							$author$project$Tailwind$Utilities$font_medium,
							$rtfeldman$elm_css$Css$important(
							$rtfeldman$elm_css$Css$color(
								A3($rtfeldman$elm_css$Css$rgb, 226, 0, 124)))
						]))
				]),
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$text(content)
				]));
	},
	emphasis: function (content) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$em,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[$author$project$Tailwind$Utilities$italic]))
				]),
			content);
	},
	hardLineBreak: A2($rtfeldman$elm_css$Html$Styled$br, _List_Nil, _List_Nil),
	heading: $author$project$TailwindMarkdownRenderer$heading,
	html: $dillonkearns$elm_markdown$Markdown$Html$oneOf(_List_Nil),
	image: function (image) {
		var _v0 = image.title;
		if (_v0.$ === 'Just') {
			return A2(
				$rtfeldman$elm_css$Html$Styled$img,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$src(image.src),
						$rtfeldman$elm_css$Html$Styled$Attributes$alt(image.alt)
					]),
				_List_Nil);
		} else {
			return A2(
				$rtfeldman$elm_css$Html$Styled$img,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$src(image.src),
						$rtfeldman$elm_css$Html$Styled$Attributes$alt(image.alt)
					]),
				_List_Nil);
		}
	},
	link: F2(
		function (_v1, body) {
			var destination = _v1.destination;
			return A2(
				$rtfeldman$elm_css$Html$Styled$a,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$href(destination),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$underline]))
					]),
				body);
		}),
	orderedList: F2(
		function (startingIndex, items) {
			return A2(
				$rtfeldman$elm_css$Html$Styled$ol,
				function () {
					if (startingIndex === 1) {
						return _List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$start(startingIndex)
							]);
					} else {
						return _List_Nil;
					}
				}(),
				A2(
					$elm$core$List$map,
					function (itemBlocks) {
						return A2($rtfeldman$elm_css$Html$Styled$li, _List_Nil, itemBlocks);
					},
					items));
		}),
	paragraph: $rtfeldman$elm_css$Html$Styled$p(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[$author$project$Tailwind$Utilities$pb_3, $author$project$Tailwind$Utilities$text_brown_text]))
			])),
	strikethrough: function (children) {
		return A2($rtfeldman$elm_css$Html$Styled$del, _List_Nil, children);
	},
	strong: function (content) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$strong,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[$author$project$Tailwind$Utilities$font_bold]))
				]),
			content);
	},
	table: $rtfeldman$elm_css$Html$Styled$table(
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(_List_Nil)
			])),
	tableBody: $rtfeldman$elm_css$Html$Styled$tbody(_List_Nil),
	tableCell: function (maybeAlignment) {
		var attrs = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2(
					$elm$core$Maybe$map,
					$rtfeldman$elm_css$Html$Styled$Attributes$align,
					A2(
						$elm$core$Maybe$map,
						function (alignment) {
							switch (alignment.$) {
								case 'AlignLeft':
									return 'left';
								case 'AlignCenter':
									return 'center';
								default:
									return 'right';
							}
						},
						maybeAlignment))));
		return $rtfeldman$elm_css$Html$Styled$td(attrs);
	},
	tableHeader: $rtfeldman$elm_css$Html$Styled$thead(_List_Nil),
	tableHeaderCell: function (maybeAlignment) {
		var attrs = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$singleton,
				A2(
					$elm$core$Maybe$map,
					$rtfeldman$elm_css$Html$Styled$Attributes$align,
					A2(
						$elm$core$Maybe$map,
						function (alignment) {
							switch (alignment.$) {
								case 'AlignLeft':
									return 'left';
								case 'AlignCenter':
									return 'center';
								default:
									return 'right';
							}
						},
						maybeAlignment))));
		return $rtfeldman$elm_css$Html$Styled$th(attrs);
	},
	tableRow: $rtfeldman$elm_css$Html$Styled$tr(_List_Nil),
	text: $rtfeldman$elm_css$Html$Styled$text,
	thematicBreak: A2($rtfeldman$elm_css$Html$Styled$hr, _List_Nil, _List_Nil),
	unorderedList: function (items) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$ul,
			_List_Nil,
			A2(
				$elm$core$List$map,
				function (item) {
					var task = item.a;
					var children = item.b;
					var checkbox = function () {
						switch (task.$) {
							case 'NoTask':
								return $rtfeldman$elm_css$Html$Styled$text('');
							case 'IncompleteTask':
								return A2(
									$rtfeldman$elm_css$Html$Styled$input,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$disabled(true),
											$rtfeldman$elm_css$Html$Styled$Attributes$checked(false),
											$rtfeldman$elm_css$Html$Styled$Attributes$type_('checkbox')
										]),
									_List_Nil);
							default:
								return A2(
									$rtfeldman$elm_css$Html$Styled$input,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$disabled(true),
											$rtfeldman$elm_css$Html$Styled$Attributes$checked(true),
											$rtfeldman$elm_css$Html$Styled$Attributes$type_('checkbox')
										]),
									_List_Nil);
						}
					}();
					return A2(
						$rtfeldman$elm_css$Html$Styled$li,
						_List_Nil,
						A2($elm$core$List$cons, checkbox, children));
				},
				items));
	}
};
var $author$project$Tailwind$Utilities$w_1over2 = A2($rtfeldman$elm_css$Css$property, 'width', '50%');
var $author$project$Tailwind$Utilities$w_full = A2($rtfeldman$elm_css$Css$property, 'width', '100%');
var $author$project$Page$About$view = F3(
	function (_v0, _v1, _v2) {
		var markdown = '\nAspargesgården byr på sjarmerende og unike lokaler i landlige omgivelser, ved kysten i Vestfold.\n\nVi byr på annerledes og stemningsfylte selskapslokaler, hvor låvebryllup er vår spesialitet. Vi ønsker velkommen til alle typer selskap; bryllup, konfirmasjoner, dåp, minnestunder, bursdager, firmasamlinger, kurs, konserter og konferanser.\n\nLåven og fjøset rommer det dere trenger av moderne teknisk utstyr, samt komfortable fasiliteter og fremkommelighet for alle! Vi har det du trenger til å dekke et vakkert festbord og skape den rette stemning!\n\nHer hos oss kan du velge om du vil gjøre litt- mye- eller ingenting selv!\n\nTa en nærmere kikk på [muligheter om hva vi kan tilby](/facilities) - og skulle du ha spesielle ønsker; ikke nøl med å ta kontakt! La oss skape den perfekte rammen for ditt arrangement!\n\n\n# Vertskapet\n\nI 2014 flyttet vi fra Sandefjord til idylliske Tjølling og Aspargesgården. Tidligere eiere dyrket asparges her, og gjorde om fjøset til selskapslokaler, derav navnet «Aspargesgården».\n\nVi -  min mann Anders og jeg, trengte låven til kurs, møter og lager for vår salgsstyrke og Tupperware produkter.\n\nVi har tre voksne barn, og lille Angel, vår søte Bichon Havanais.\n\nJeg har alltid hatt en drøm om å bo på gård, selv om jeg er en skikkelig «byjente». Elsker gamle hus, historie, interiør, hage og å gjøre det vakkert rundt meg. Anders er «handyman» som restaurerer og bygger, og sammen utvikler vi gården kontinuerlig.\n\nDet er en utrolig glede og skape så mange fantastiske øyeblikk, muligheter og opplevelser.\n\nVi ser frem til å ønske mange flere brudepar, selskap, og alle andre som har lyst til å gjøre noe morsomt her på gården velkommen!\n\nAlt godt, Kristine & Anders\n        ';
		var deadEndsToString = function (deadEnds) {
			return A2(
				$elm$core$String$join,
				'\n',
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, deadEnds));
		};
		var content = A2(
			$elm$core$Result$withDefault,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$text('Kunne ikke laste innhold...')
				]),
			A2(
				$elm$core$Result$andThen,
				function (ast) {
					return A2($dillonkearns$elm_markdown$Markdown$Renderer$render, $author$project$TailwindMarkdownRenderer$renderer, ast);
				},
				A2(
					$elm$core$Result$mapError,
					deadEndsToString,
					$dillonkearns$elm_markdown$Markdown$Parser$parse(markdown))));
		return A2(
			$author$project$View$html,
			'Om gården',
			_List_fromArray(
				[
					$author$project$View$Misc$container(
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									$author$project$View$Misc$headline('Om gården')
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[$author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$flex_row, $author$project$Tailwind$Utilities$flex_wrap]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$author$project$Tailwind$Breakpoints$md(
													_List_fromArray(
														[$author$project$Tailwind$Utilities$w_1over2, $author$project$Tailwind$Utilities$px_0])),
													$author$project$Tailwind$Utilities$w_full,
													$author$project$Tailwind$Utilities$px_5,
													$author$project$Tailwind$Utilities$text_brown_text
												]))
										]),
									_Utils_ap(
										content,
										_List_fromArray(
											[$author$project$View$Misc$contact]))),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$author$project$Tailwind$Breakpoints$md(
													_List_fromArray(
														[$author$project$Tailwind$Utilities$w_1over2, $author$project$Tailwind$Utilities$neg_mt_12])),
													$author$project$Tailwind$Utilities$w_full,
													$author$project$Tailwind$Utilities$flex,
													$author$project$Tailwind$Utilities$flex_row,
													$author$project$Tailwind$Utilities$flex_wrap,
													$author$project$Tailwind$Utilities$justify_center
												]))
										]),
									A2(
										$elm$core$List$map,
										$author$project$Page$About$eventTypeIcon,
										_List_fromArray(
											['bryllup', 'bursdag', 'feiring', 'nyttaar', 'julebord', 'daap', 'konfirmasjon', 'vitnemaal', 'konferanse', 'minnestund'])))
								]))
						]))
				]));
	});
var $author$project$Page$About$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$About$view},
	$author$project$Page$single(
		{data: $author$project$Page$About$data, head: $author$project$Page$About$head}));
var $author$project$Page$Contact$data = $dillonkearns$elm_pages$DataSource$succeed(_Utils_Tuple0);
var $author$project$Page$Contact$head = function (_v0) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summaryLarge(
			_Utils_update(
				$author$project$Site$commonSeo,
				{title: 'Aspargesgården | Kontakt oss'})));
};
var $author$project$Tailwind$Utilities$h_96 = A2($rtfeldman$elm_css$Css$property, 'height', '24rem');
var $rtfeldman$elm_css$Html$Styled$iframe = $rtfeldman$elm_css$Html$Styled$node('iframe');
var $author$project$Tailwind$Utilities$inline_block = A2($rtfeldman$elm_css$Css$property, 'display', 'inline-block');
var $author$project$Tailwind$Utilities$p_2 = A2($rtfeldman$elm_css$Css$property, 'padding', '0.5rem');
var $author$project$Tailwind$Utilities$pl_0 = A2($rtfeldman$elm_css$Css$property, 'padding-left', '0px');
var $author$project$Tailwind$Utilities$pr_2 = A2($rtfeldman$elm_css$Css$property, 'padding-right', '0.5rem');
var $author$project$Tailwind$Utilities$w_12 = A2($rtfeldman$elm_css$Css$property, 'width', '3rem');
var $author$project$Page$Contact$infoBullet = F2(
	function (icon, content) {
		var imgSource = A3($jorgengranseth$elm_string_format$String$Format$namedValue, 'icon', icon, '/ressurser/{{ icon }}.svg');
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$Tailwind$Breakpoints$md(
							_List_fromArray(
								[$author$project$Tailwind$Utilities$pl_0])),
							$author$project$Tailwind$Utilities$p_2
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[$author$project$Tailwind$Utilities$w_12, $author$project$Tailwind$Utilities$pr_2, $author$project$Tailwind$Utilities$inline_block])),
							$rtfeldman$elm_css$Html$Styled$Attributes$src(imgSource),
							$rtfeldman$elm_css$Html$Styled$Attributes$alt(icon)
						]),
					_List_Nil),
					A2(
					$rtfeldman$elm_css$Html$Styled$p,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$author$project$Tailwind$Utilities$inline_block,
									$author$project$Tailwind$Utilities$text_brown,
									$author$project$Tailwind$Utilities$text_lg,
									$rtfeldman$elm_css$Css$fontFamilies(
									_List_fromArray(
										['rift-soft', 'sans-serif']))
								]))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(content)
						]))
				]));
	});
var $author$project$Tailwind$Utilities$pt_2 = A2($rtfeldman$elm_css$Css$property, 'padding-top', '0.5rem');
var $author$project$Tailwind$Utilities$pt_4 = A2($rtfeldman$elm_css$Css$property, 'padding-top', '1rem');
var $author$project$Page$Contact$view = F3(
	function (_v0, _v1, _v2) {
		return A2(
			$author$project$View$html,
			'Kontakt oss',
			_List_fromArray(
				[
					$author$project$View$Misc$container(
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									$author$project$View$Misc$headline('Kontakt oss')
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[$author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$flex_row, $author$project$Tailwind$Utilities$flex_wrap]))
								]),
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$author$project$Tailwind$Breakpoints$md(
													_List_fromArray(
														[$author$project$Tailwind$Utilities$w_1over2])),
													$author$project$Tailwind$Utilities$w_full,
													$author$project$Tailwind$Utilities$flex,
													$author$project$Tailwind$Utilities$flex_col,
													$author$project$Tailwind$Utilities$flex_wrap
												]))
										]),
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Html$Styled$div,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[
															$author$project$Tailwind$Breakpoints$md(
															_List_fromArray(
																[$author$project$Tailwind$Utilities$pt_2]))
														]))
												]),
											_List_fromArray(
												[
													A2($author$project$Page$Contact$infoBullet, 'tlf', '+47 90 91 98 12'),
													A2($author$project$Page$Contact$infoBullet, 'mail', 'kristine (at) aspargesgaarden (dot) no'),
													A2($author$project$Page$Contact$infoBullet, 'location', 'Østbyveien 75, 3280 Tjodalyng')
												]))
										])),
									A2(
									$rtfeldman$elm_css$Html$Styled$div,
									_List_fromArray(
										[
											$rtfeldman$elm_css$Html$Styled$Attributes$css(
											_List_fromArray(
												[
													$author$project$Tailwind$Breakpoints$md(
													_List_fromArray(
														[$author$project$Tailwind$Utilities$w_1over2])),
													$author$project$Tailwind$Utilities$w_full
												]))
										]),
									_List_fromArray(
										[
											A2(
											$rtfeldman$elm_css$Html$Styled$iframe,
											_List_fromArray(
												[
													$rtfeldman$elm_css$Html$Styled$Attributes$css(
													_List_fromArray(
														[$author$project$Tailwind$Utilities$p_2, $author$project$Tailwind$Utilities$pt_4, $author$project$Tailwind$Utilities$h_96, $author$project$Tailwind$Utilities$w_full])),
													$rtfeldman$elm_css$Html$Styled$Attributes$src('https://calendar.google.com/calendar/embed?src=klatrerosen.no_hgf7kiksq8hrmilogq5nd6f4rs%40group.calendar.google.com&ctz=Europe%2FOslo'),
													A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'frameborder', '')
												]),
											_List_Nil)
										]))
								]))
						]))
				]));
	});
var $author$project$Page$Contact$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Contact$view},
	$author$project$Page$single(
		{data: $author$project$Page$Contact$data, head: $author$project$Page$Contact$head}));
var $author$project$Page$Facilities$Section = F2(
	function (metadata, content) {
		return {content: content, metadata: metadata};
	});
var $dillonkearns$elm_pages$DataSource$Internal$Glob$Glob = F3(
	function (a, b, c) {
		return {$: 'Glob', a: a, b: b, c: c};
	});
var $dillonkearns$elm_pages$DataSource$Glob$recursiveWildcardRegex = '(.*?)';
var $dillonkearns$elm_pages$DataSource$Glob$wildcardRegex = '([^/]*?)';
var $dillonkearns$elm_pages$DataSource$Glob$isRecursiveWildcardSlashWildcard = F2(
	function (regex1, regex2) {
		return A2($elm$core$String$endsWith, $dillonkearns$elm_pages$DataSource$Glob$recursiveWildcardRegex + '/', regex2) && A2($elm$core$String$startsWith, $dillonkearns$elm_pages$DataSource$Glob$wildcardRegex, regex1);
	});
var $dillonkearns$elm_pages$DataSource$Glob$combineRegexes = F2(
	function (regex1, regex2) {
		return A2($dillonkearns$elm_pages$DataSource$Glob$isRecursiveWildcardSlashWildcard, regex1, regex2) ? _Utils_ap(
			A2($elm$core$String$dropRight, 1, regex2),
			regex1) : _Utils_ap(regex2, regex1);
	});
var $dillonkearns$elm_pages$DataSource$Glob$capture = F2(
	function (_v0, _v1) {
		var matcherPattern = _v0.a;
		var regex1 = _v0.b;
		var apply1 = _v0.c;
		var pattern = _v1.a;
		var regex2 = _v1.b;
		var apply2 = _v1.c;
		return A3(
			$dillonkearns$elm_pages$DataSource$Internal$Glob$Glob,
			_Utils_ap(pattern, matcherPattern),
			A2($dillonkearns$elm_pages$DataSource$Glob$combineRegexes, regex1, regex2),
			F2(
				function (fullPath, captures) {
					var _v2 = A2(apply1, fullPath, captures);
					var applied1 = _v2.a;
					var captured1 = _v2.b;
					var _v3 = A2(apply2, fullPath, captured1);
					var applied2 = _v3.a;
					var captured2 = _v3.b;
					return _Utils_Tuple2(
						applied2(applied1),
						captured2);
				}));
	});
var $dillonkearns$elm_pages$DataSource$Glob$regexEscapePattern = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('[.*+?^${}()|[\\]\\\\]'));
var $dillonkearns$elm_pages$DataSource$Glob$regexEscaped = function (stringLiteral) {
	return A3(
		$elm$regex$Regex$replace,
		$dillonkearns$elm_pages$DataSource$Glob$regexEscapePattern,
		function (match_) {
			return '\\' + match_.match;
		},
		stringLiteral);
};
var $dillonkearns$elm_pages$DataSource$Glob$literal = function (string) {
	return A3(
		$dillonkearns$elm_pages$DataSource$Internal$Glob$Glob,
		string,
		$dillonkearns$elm_pages$DataSource$Glob$regexEscaped(string),
		F2(
			function (_v0, captures) {
				return _Utils_Tuple2(string, captures);
			}));
};
var $dillonkearns$elm_pages$DataSource$Glob$match = F2(
	function (_v0, _v1) {
		var matcherPattern = _v0.a;
		var regex1 = _v0.b;
		var apply1 = _v0.c;
		var pattern = _v1.a;
		var regex2 = _v1.b;
		var apply2 = _v1.c;
		return A3(
			$dillonkearns$elm_pages$DataSource$Internal$Glob$Glob,
			_Utils_ap(pattern, matcherPattern),
			A2($dillonkearns$elm_pages$DataSource$Glob$combineRegexes, regex1, regex2),
			F2(
				function (fullPath, captures) {
					var _v2 = A2(apply1, fullPath, captures);
					var captured1 = _v2.b;
					var _v3 = A2(apply2, fullPath, captured1);
					var applied2 = _v3.a;
					var captured2 = _v3.b;
					return _Utils_Tuple2(applied2, captured2);
				}));
	});
var $dillonkearns$elm_pages$DataSource$Glob$succeed = function (constructor) {
	return A3(
		$dillonkearns$elm_pages$DataSource$Internal$Glob$Glob,
		'',
		'',
		F2(
			function (_v0, captures) {
				return _Utils_Tuple2(constructor, captures);
			}));
};
var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$EmptyBody = {$: 'EmptyBody'};
var $dillonkearns$elm_pages$DataSource$Http$emptyBody = $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$EmptyBody;
var $dillonkearns$elm_pages$Secrets$Value = function (a) {
	return {$: 'Value', a: a};
};
var $dillonkearns$elm_pages$Secrets$map = F2(
	function (mapFunction, _v0) {
		var lookupSecrets = _v0.a;
		return $dillonkearns$elm_pages$Secrets$Value(
			function (secrets) {
				return A2(
					$elm$core$Result$map,
					mapFunction,
					lookupSecrets(secrets));
			});
	});
var $dillonkearns$elm_pages$DataSource$Http$ExpectJson = function (a) {
	return {$: 'ExpectJson', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$CliOnly = {$: 'CliOnly'};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError = function (a) {
	return {$: 'DecoderError', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse = F2(
	function (a, b) {
		return {$: 'MissingHttpResponse', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse = function (a) {
	return {$: 'StripResponse', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse = {$: 'UseRawResponse'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$BadJson = {$: 'BadJson'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Errors = function (a) {
	return {$: 'Errors', a: a};
};
var $mgold$elm_nonempty_list$List$Nonempty$Nonempty = F2(
	function (a, b) {
		return {$: 'Nonempty', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Success = function (a) {
	return {$: 'Success', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$WithWarnings = F2(
	function (a, b) {
		return {$: 'WithWarnings', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Array = F2(
	function (a, b) {
		return {$: 'Array', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Bool = F2(
	function (a, b) {
		return {$: 'Bool', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Null = function (a) {
	return {$: 'Null', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Number = F2(
	function (a, b) {
		return {$: 'Number', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Object = F2(
	function (a, b) {
		return {$: 'Object', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$String = F2(
	function (a, b) {
		return {$: 'String', a: a, b: b};
	});
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $elm$json$Json$Decode$null = _Json_decodeNull;
function $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$String(false),
				$elm$json$Json$Decode$string),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Number(false),
				$elm$json$Json$Decode$float),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Bool(false),
				$elm$json$Json$Decode$bool),
				$elm$json$Json$Decode$null(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Null(false)),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Array(false),
				$elm$json$Json$Decode$list(
					A2(
						$elm$json$Json$Decode$map,
						$elm$core$Tuple$pair(false),
						$elm$json$Json$Decode$lazy(
							function (_v0) {
								return $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder();
							})))),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Object(false),
				A2(
					$elm$json$Json$Decode$map,
					$elm$core$List$map(
						function (_v1) {
							var k = _v1.a;
							var v = _v1.b;
							return _Utils_Tuple3(false, k, v);
						}),
					$elm$json$Json$Decode$keyValuePairs(
						$elm$json$Json$Decode$lazy(
							function (_v2) {
								return $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder();
							}))))
			]));
}
try {
	var $zwilias$json_decode_exploration$Json$Decode$Exploration$annotatedDecoder = $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder();
	$zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder = function () {
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$annotatedDecoder;
	};
} catch ($) {
	throw 'Some top-level definitions from `Json.Decode.Exploration` are causing infinite recursion:\n\n  ┌─────┐\n  │    annotatedDecoder\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $zwilias$json_decode_exploration$Json$Decode$Exploration$decode = $elm$json$Json$Decode$decodeValue($zwilias$json_decode_exploration$Json$Decode$Exploration$annotatedDecoder);
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex = F2(
	function (a, b) {
		return {$: 'AtIndex', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here = function (a) {
	return {$: 'Here', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField = F2(
	function (a, b) {
		return {$: 'InField', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedField = function (a) {
	return {$: 'UnusedField', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedIndex = function (a) {
	return {$: 'UnusedIndex', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue = function (a) {
	return {$: 'UnusedValue', a: a};
};
var $elm$json$Json$Encode$float = _Json_wrap;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$encode = function (v) {
	switch (v.$) {
		case 'String':
			var val = v.b;
			return $elm$json$Json$Encode$string(val);
		case 'Number':
			var val = v.b;
			return $elm$json$Json$Encode$float(val);
		case 'Bool':
			var val = v.b;
			return $elm$json$Json$Encode$bool(val);
		case 'Null':
			return $elm$json$Json$Encode$null;
		case 'Array':
			var values = v.b;
			return A2(
				$elm$json$Json$Encode$list,
				A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $zwilias$json_decode_exploration$Json$Decode$Exploration$encode),
				values);
		default:
			var kvPairs = v.b;
			return $elm$json$Json$Encode$object(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.b;
						var v_ = _v1.c;
						return _Utils_Tuple2(
							k,
							$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(v_));
					},
					kvPairs));
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings = function (json) {
	_v0$8:
	while (true) {
		switch (json.$) {
			case 'String':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Number':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Bool':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Null':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Array':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					var values = json.b;
					return $elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (idx, _v1) {
									var used = _v1.a;
									var val = _v1.b;
									if (used) {
										var _v2 = $zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings(val);
										if (!_v2.b) {
											return _List_Nil;
										} else {
											var x = _v2.a;
											var xs = _v2.b;
											return _List_fromArray(
												[
													A2(
													$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex,
													idx,
													A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, xs))
												]);
										}
									} else {
										return _List_fromArray(
											[
												$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
												$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedIndex(idx))
											]);
									}
								}),
							values));
				}
			default:
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					var kvPairs = json.b;
					return A2(
						$elm$core$List$concatMap,
						function (_v3) {
							var used = _v3.a;
							var key = _v3.b;
							var val = _v3.c;
							if (used) {
								var _v4 = $zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings(val);
								if (!_v4.b) {
									return _List_Nil;
								} else {
									var x = _v4.a;
									var xs = _v4.b;
									return _List_fromArray(
										[
											A2(
											$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField,
											key,
											A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, xs))
										]);
								}
							} else {
								return _List_fromArray(
									[
										$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
										$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedField(key))
									]);
							}
						},
						kvPairs);
				}
		}
	}
	return _List_Nil;
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$decodeValue = F2(
	function (_v0, val) {
		var decoderFn = _v0.a;
		var _v1 = $zwilias$json_decode_exploration$Json$Decode$Exploration$decode(val);
		if (_v1.$ === 'Err') {
			return $zwilias$json_decode_exploration$Json$Decode$Exploration$BadJson;
		} else {
			var json = _v1.a;
			var _v2 = decoderFn(json);
			if (_v2.b.$ === 'Err') {
				var errors = _v2.b.a;
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$Errors(errors);
			} else {
				var annVal = _v2.a;
				var acc = _v2.b.a;
				var _v3 = _Utils_ap(
					acc.warnings,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings(annVal));
				if (!_v3.b) {
					return $zwilias$json_decode_exploration$Json$Decode$Exploration$Success(acc.value);
				} else {
					var x = _v3.a;
					var xs = _v3.b;
					return A2(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$WithWarnings,
						A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, xs),
						acc.value);
				}
			}
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$decodeString = F2(
	function (decoder, jsonString) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$json$Json$Decode$value, jsonString);
		if (_v0.$ === 'Err') {
			return $zwilias$json_decode_exploration$Json$Decode$Exploration$BadJson;
		} else {
			var json = _v0.a;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$decodeValue, decoder, json);
		}
	});
var $dillonkearns$elm_pages$OptimizedDecoder$errorToString = $elm$json$Json$Decode$errorToString;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$expectedTypeToString = function (expectedType) {
	switch (expectedType.$) {
		case 'TString':
			return 'a string';
		case 'TInt':
			return 'an integer number';
		case 'TNumber':
			return 'a number';
		case 'TNull':
			return 'null';
		case 'TBool':
			return 'a boolean';
		case 'TArray':
			return 'an array';
		case 'TObject':
			return 'an object';
		case 'TArrayIndex':
			var idx = expectedType.a;
			return 'an array with index ' + $elm$core$String$fromInt(idx);
		default:
			var aField = expectedType.a;
			return 'an object with a field \'' + (aField + '\'');
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$indent = $elm$core$List$map(
	$elm$core$Basics$append('  '));
var $zwilias$json_decode_exploration$Json$Decode$Exploration$intercalateMap = F3(
	function (sep, toList, xs) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$intersperse,
				_List_fromArray(
					[sep]),
				A2($elm$core$List$map, toList, xs)));
	});
var $elm$core$String$lines = _String_lines;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$jsonLines = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$encode(2),
	$elm$core$String$lines);
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$flatten = function (located) {
	switch (located.$) {
		case 'Here':
			var v = located.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'',
					_List_fromArray(
						[v]))
				]);
		case 'InField':
			var s = located.a;
			var vals = located.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather, '/' + s, vals);
		default:
			var i = located.a;
			var vals = located.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather,
				'/' + $elm$core$String$fromInt(i),
				vals);
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather = F2(
	function (prefix, _v0) {
		var first = _v0.a;
		var rest = _v0.b;
		return A2(
			$elm$core$List$map,
			$elm$core$Tuple$mapFirst(
				$elm$core$Basics$append(prefix)),
			A2(
				$elm$core$List$concatMap,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$flatten,
				A2($elm$core$List$cons, first, rest)));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$intercalate = F2(
	function (sep, lists) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$intersperse,
				_List_fromArray(
					[sep]),
				lists));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$indent = $elm$core$Basics$append('  ');
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$render = F3(
	function (itemToString, path, errors) {
		var formattedErrors = A2(
			$elm$core$List$map,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$indent,
			A2($elm$core$List$concatMap, itemToString, errors));
		return $elm$core$String$isEmpty(path) ? formattedErrors : A2(
			$elm$core$List$cons,
			'At path ' + path,
			A2($elm$core$List$cons, '', formattedErrors));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$toString = F2(
	function (itemToString, locatedItems) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$intercalate,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					var x = _v0.a;
					var vals = _v0.b;
					return A3($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$render, itemToString, x, vals);
				},
				A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather, '', locatedItems)));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$errorToString = function (error) {
	switch (error.$) {
		case 'Failure':
			var failure = error.a;
			var json = error.b;
			if (json.$ === 'Just') {
				var val = json.a;
				return A2(
					$elm$core$List$cons,
					failure,
					A2(
						$elm$core$List$cons,
						'',
						$zwilias$json_decode_exploration$Json$Decode$Exploration$indent(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$jsonLines(val))));
			} else {
				return _List_fromArray(
					[failure]);
			}
		case 'Expected':
			var expectedType = error.a;
			var actualValue = error.b;
			return A2(
				$elm$core$List$cons,
				'I expected ' + ($zwilias$json_decode_exploration$Json$Decode$Exploration$expectedTypeToString(expectedType) + ' here, but instead found this value:'),
				A2(
					$elm$core$List$cons,
					'',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$indent(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$jsonLines(actualValue))));
		default:
			var errors = error.a;
			if (!errors.b) {
				return _List_fromArray(
					['I encountered a `oneOf` without any options.']);
			} else {
				return A2(
					$elm$core$List$cons,
					'I encountered multiple issues:',
					A2(
						$elm$core$List$cons,
						'',
						A3($zwilias$json_decode_exploration$Json$Decode$Exploration$intercalateMap, '', $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToStrings, errors)));
			}
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToStrings = function (errors) {
	return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$toString, $zwilias$json_decode_exploration$Json$Decode$Exploration$errorToString, errors);
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToString = function (errors) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$elm$core$String$trimRight,
			A2(
				$elm$core$List$cons,
				'I encountered some errors while decoding this JSON:',
				A2(
					$elm$core$List$cons,
					'',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToStrings(errors)))));
};
var $dillonkearns$elm_pages$RequestsAndPending$get = F2(
	function (key, requestsAndPending) {
		return A2(
			$elm$core$Maybe$andThen,
			$elm$core$Basics$identity,
			A2($elm$core$Dict$get, key, requestsAndPending));
	});
var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType = F2(
	function (typeName, otherFields) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string(typeName)),
				otherFields));
	});
var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encode = function (body) {
	switch (body.$) {
		case 'EmptyBody':
			return A2($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType, 'empty', _List_Nil);
		case 'StringBody':
			var content = body.b;
			return A2(
				$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType,
				'string',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'content',
						$elm$json$Json$Encode$string(content))
					]));
		default:
			var content = body.a;
			return A2(
				$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType,
				'json',
				_List_fromArray(
					[
						_Utils_Tuple2('content', content)
					]));
	}
};
var $dillonkearns$elm_pages$Pages$StaticHttp$Request$hashHeader = function (_v0) {
	var name = _v0.a;
	var value = _v0.b;
	return $elm$json$Json$Encode$string(name + (': ' + value));
};
var $dillonkearns$elm_pages$Pages$StaticHttp$Request$hash = function (requestDetails) {
	return $elm$core$String$fromInt(
		A2(
			$robinheghan$murmur3$Murmur3$hashString,
			0,
			A2(
				$elm$json$Json$Encode$encode,
				0,
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'method',
							$elm$json$Json$Encode$string(requestDetails.method)),
							_Utils_Tuple2(
							'url',
							$elm$json$Json$Encode$string(requestDetails.url)),
							_Utils_Tuple2(
							'headers',
							A2($elm$json$Json$Encode$list, $dillonkearns$elm_pages$Pages$StaticHttp$Request$hashHeader, requestDetails.headers)),
							_Utils_Tuple2(
							'body',
							$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encode(requestDetails.body))
						])))));
};
var $dillonkearns$elm_pages$Internal$OptimizedDecoder$jd = function (_v0) {
	var jd_ = _v0.a;
	return jd_;
};
var $dillonkearns$elm_pages$Internal$OptimizedDecoder$jde = function (_v0) {
	var jde_ = _v0.b;
	return jde_;
};
var $dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder = F2(
	function (a, b) {
		return {$: 'OptimizedDecoder', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$mapAcc = F2(
	function (f, acc) {
		return {
			value: f(acc.value),
			warnings: acc.warnings
		};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$map = F2(
	function (f, _v0) {
		var decoderFn = _v0.a;
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				return A2(
					$elm$core$Tuple$mapSecond,
					$elm$core$Result$map(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$mapAcc(f)),
					decoderFn(json));
			});
	});
var $dillonkearns$elm_pages$OptimizedDecoder$map = F2(
	function (f, _v0) {
		var jd = _v0.a;
		var jde = _v0.b;
		return A2(
			$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
			A2($elm$json$Json$Decode$map, f, jd),
			A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, f, jde));
	});
var $dillonkearns$elm_pages$SecretsDict$Masked = {$: 'Masked'};
var $dillonkearns$elm_pages$SecretsDict$masked = $dillonkearns$elm_pages$SecretsDict$Masked;
var $dillonkearns$elm_pages$Secrets$maskedLookup = function (_v0) {
	maskedLookup:
	while (true) {
		var lookupSecrets = _v0.a;
		var _v1 = lookupSecrets($dillonkearns$elm_pages$SecretsDict$masked);
		if (_v1.$ === 'Ok') {
			var value = _v1.a;
			return value;
		} else {
			var $temp$_v0 = $dillonkearns$elm_pages$Secrets$Value(lookupSecrets);
			_v0 = $temp$_v0;
			continue maskedLookup;
		}
	}
};
var $dillonkearns$elm_pages$DataSource$Http$requestToString = function (requestDetails) {
	return requestDetails.url;
};
var $dillonkearns$elm_pages$DataSource$Http$toResult = function (result) {
	if (result.$ === 'Err') {
		var error = result.a;
		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
	} else {
		var _v1 = result.a;
		var stripped = _v1.a;
		var okValue = _v1.b;
		return A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, stripped, okValue);
	}
};
var $dillonkearns$elm_pages$DataSource$Http$unoptimizedRequest = F2(
	function (requestWithSecrets, expect) {
		switch (expect.$) {
			case 'ExpectJson':
				var decoder = expect.a;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					$elm$core$Dict$empty,
					_Utils_Tuple2(
						_List_fromArray(
							[requestWithSecrets]),
						F3(
							function (keepOrDiscard, appType, rawResponseDict) {
								if (appType.$ === 'Cli') {
									return $dillonkearns$elm_pages$DataSource$Http$toResult(
										A2(
											$elm$core$Result$andThen,
											function (_v5) {
												var strippedResponses = _v5.a;
												var rawResponse = _v5.b;
												return A2(
													$elm$core$Result$map,
													function (finalRequest) {
														return _Utils_Tuple2(
															function () {
																if (keepOrDiscard.$ === 'Keep') {
																	return A3(
																		$elm$core$Dict$insert,
																		$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																			$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
																		$dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(
																			A2(
																				$dillonkearns$elm_pages$OptimizedDecoder$map,
																				function (_v8) {
																					return _Utils_Tuple0;
																				},
																				decoder)),
																		strippedResponses);
																} else {
																	return A3(
																		$elm$core$Dict$insert,
																		$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																			$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
																		$dillonkearns$elm_pages$Pages$StaticHttpRequest$CliOnly,
																		strippedResponses);
																}
															}(),
															finalRequest);
													},
													function (decodeResult) {
														switch (decodeResult.$) {
															case 'BadJson':
																return $elm$core$Result$Err(
																	$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError('Payload sent back invalid JSON\n' + rawResponse));
															case 'Errors':
																var errors = decodeResult.a;
																return $elm$core$Result$Err(
																	$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError(
																		$zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToString(errors)));
															case 'WithWarnings':
																var a = decodeResult.b;
																return $elm$core$Result$Ok(a);
															default:
																var a = decodeResult.a;
																return $elm$core$Result$Ok(a);
														}
													}(
														A2(
															$zwilias$json_decode_exploration$Json$Decode$Exploration$decodeString,
															$dillonkearns$elm_pages$Internal$OptimizedDecoder$jde(decoder),
															rawResponse)));
											},
											function (maybeResponse) {
												if (maybeResponse.$ === 'Just') {
													var rawResponse = maybeResponse.a;
													return $elm$core$Result$Ok(
														_Utils_Tuple2(
															A2(
																$elm$core$Dict$singleton,
																$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																	$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
																function () {
																	if (keepOrDiscard.$ === 'Keep') {
																		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(
																			A2(
																				$dillonkearns$elm_pages$OptimizedDecoder$map,
																				function (_v4) {
																					return _Utils_Tuple0;
																				},
																				decoder));
																	} else {
																		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$CliOnly;
																	}
																}()),
															rawResponse));
												} else {
													return $elm$core$Result$Err(
														A2(
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse,
															$dillonkearns$elm_pages$DataSource$Http$requestToString(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															_List_fromArray(
																[requestWithSecrets])));
												}
											}(
												A2(
													$dillonkearns$elm_pages$RequestsAndPending$get,
													$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
														$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
													rawResponseDict))));
								} else {
									return $dillonkearns$elm_pages$DataSource$Http$toResult(
										A2(
											$elm$core$Result$andThen,
											function (_v10) {
												var strippedResponses = _v10.a;
												var rawResponse = _v10.b;
												return A2(
													$elm$core$Result$map,
													function (finalRequest) {
														return _Utils_Tuple2(strippedResponses, finalRequest);
													},
													function (decodeResult) {
														if (decodeResult.$ === 'Err') {
															var error = decodeResult.a;
															return $elm$core$Result$Err(
																$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError(
																	'Payload sent back invalid JSON\n' + (rawResponse + ('\n KEYS' + (A2(
																		$elm$core$String$join,
																		' - ',
																		$elm$core$Dict$keys(strippedResponses)) + $elm$json$Json$Decode$errorToString(error))))));
														} else {
															var a = decodeResult.a;
															return $elm$core$Result$Ok(a);
														}
													}(
														A2(
															$elm$json$Json$Decode$decodeString,
															$dillonkearns$elm_pages$Internal$OptimizedDecoder$jd(decoder),
															rawResponse)));
											},
											function (maybeResponse) {
												if (maybeResponse.$ === 'Just') {
													var rawResponse = maybeResponse.a;
													return $elm$core$Result$Ok(
														_Utils_Tuple2(
															A2(
																$elm$core$Dict$singleton,
																$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																	$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
																$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse),
															rawResponse));
												} else {
													return $elm$core$Result$Err(
														A2(
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse,
															$dillonkearns$elm_pages$DataSource$Http$requestToString(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															_List_fromArray(
																[requestWithSecrets])));
												}
											}(
												A2(
													$dillonkearns$elm_pages$RequestsAndPending$get,
													$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
														$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
													rawResponseDict))));
								}
							})));
			case 'ExpectUnoptimizedJson':
				var decoder = expect.a;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					$elm$core$Dict$empty,
					_Utils_Tuple2(
						_List_fromArray(
							[requestWithSecrets]),
						F3(
							function (_v12, _v13, rawResponseDict) {
								return $dillonkearns$elm_pages$DataSource$Http$toResult(
									A2(
										$elm$core$Result$andThen,
										function (_v15) {
											var strippedResponses = _v15.a;
											var rawResponse = _v15.b;
											return A2(
												$elm$core$Result$map,
												function (finalRequest) {
													return _Utils_Tuple2(
														A3(
															$elm$core$Dict$insert,
															$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse,
															strippedResponses),
														finalRequest);
												},
												function (decodeResult) {
													if (decodeResult.$ === 'Err') {
														var error = decodeResult.a;
														return $elm$core$Result$Err(
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError(
																$dillonkearns$elm_pages$OptimizedDecoder$errorToString(error)));
													} else {
														var a = decodeResult.a;
														return $elm$core$Result$Ok(a);
													}
												}(
													A2($elm$json$Json$Decode$decodeString, decoder, rawResponse)));
										},
										function (maybeResponse) {
											if (maybeResponse.$ === 'Just') {
												var rawResponse = maybeResponse.a;
												return $elm$core$Result$Ok(
													_Utils_Tuple2(
														A2(
															$elm$core$Dict$singleton,
															$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse),
														rawResponse));
											} else {
												return $elm$core$Result$Err(
													A2(
														$dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse,
														$dillonkearns$elm_pages$DataSource$Http$requestToString(
															$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
														_List_fromArray(
															[requestWithSecrets])));
											}
										}(
											A2(
												$dillonkearns$elm_pages$RequestsAndPending$get,
												$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
													$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
												rawResponseDict))));
							})));
			default:
				var mapStringFn = expect.a;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					$elm$core$Dict$empty,
					_Utils_Tuple2(
						_List_fromArray(
							[requestWithSecrets]),
						F3(
							function (_v17, _v18, rawResponseDict) {
								return $dillonkearns$elm_pages$DataSource$Http$toResult(
									A2(
										$elm$core$Result$andThen,
										function (_v20) {
											var strippedResponses = _v20.a;
											var rawResponse = _v20.b;
											return A2(
												$elm$core$Result$map,
												function (finalRequest) {
													return _Utils_Tuple2(
														A3(
															$elm$core$Dict$insert,
															$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse,
															strippedResponses),
														finalRequest);
												},
												A2(
													$elm$core$Result$mapError,
													$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError,
													mapStringFn(rawResponse)));
										},
										function (maybeResponse) {
											if (maybeResponse.$ === 'Just') {
												var rawResponse = maybeResponse.a;
												return $elm$core$Result$Ok(
													_Utils_Tuple2(
														A2(
															$elm$core$Dict$singleton,
															$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse),
														rawResponse));
											} else {
												return $elm$core$Result$Err(
													A2(
														$dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse,
														$dillonkearns$elm_pages$DataSource$Http$requestToString(
															$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
														_List_fromArray(
															[requestWithSecrets])));
											}
										}(
											A2(
												$dillonkearns$elm_pages$RequestsAndPending$get,
												$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
													$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
												rawResponseDict))));
							})));
		}
	});
var $dillonkearns$elm_pages$DataSource$Http$request = F2(
	function (urlWithSecrets, decoder) {
		return A2(
			$dillonkearns$elm_pages$DataSource$Http$unoptimizedRequest,
			urlWithSecrets,
			$dillonkearns$elm_pages$DataSource$Http$ExpectJson(decoder));
	});
var $dillonkearns$elm_pages$DataSource$Http$get = F2(
	function (url, decoder) {
		return A2(
			$dillonkearns$elm_pages$DataSource$Http$request,
			A2(
				$dillonkearns$elm_pages$Secrets$map,
				function (okUrl) {
					return {body: $dillonkearns$elm_pages$DataSource$Http$emptyBody, headers: _List_Nil, method: 'GET', url: okUrl};
				},
				url),
			decoder);
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TArray = {$: 'TArray'};
var $mgold$elm_nonempty_list$List$Nonempty$cons = F2(
	function (y, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			y,
			A2($elm$core$List$cons, x, xs));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Expected = F2(
	function (a, b) {
		return {$: 'Expected', a: a, b: b};
	});
var $mgold$elm_nonempty_list$List$Nonempty$singleton = function (x) {
	return A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, _List_Nil);
};
var $mgold$elm_nonempty_list$List$Nonempty$fromElement = $mgold$elm_nonempty_list$List$Nonempty$singleton;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$expected = F2(
	function (expectedType, json) {
		return A2(
			$elm$core$Tuple$pair,
			json,
			$elm$core$Result$Err(
				$mgold$elm_nonempty_list$List$Nonempty$fromElement(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
						A2(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Expected,
							expectedType,
							$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json))))));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$list = function (_v0) {
	var decoderFn = _v0.a;
	var finalize = function (_v11) {
		var warnings = _v11.a;
		var values = _v11.b;
		return {value: values, warnings: warnings};
	};
	var accumulate = F2(
		function (_v9, _v10) {
			var used = _v9.a;
			var val = _v9.b;
			var idx = _v10.a;
			var jsonAcc = _v10.b;
			var acc = _v10.c;
			var _v3 = _Utils_Tuple2(
				acc,
				decoderFn(val));
			if (_v3.a.$ === 'Err') {
				if (_v3.b.b.$ === 'Err') {
					var errors = _v3.a.a;
					var _v4 = _v3.b;
					var annVal = _v4.a;
					var newErrors = _v4.b.a;
					return _Utils_Tuple3(
						idx - 1,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(true, annVal),
							jsonAcc),
						$elm$core$Result$Err(
							A2(
								$mgold$elm_nonempty_list$List$Nonempty$cons,
								A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex, idx, newErrors),
								errors)));
				} else {
					var errors = _v3.a.a;
					var _v5 = _v3.b;
					var annVal = _v5.a;
					return _Utils_Tuple3(
						idx - 1,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(true, annVal),
							jsonAcc),
						$elm$core$Result$Err(errors));
				}
			} else {
				if (_v3.b.b.$ === 'Err') {
					var _v6 = _v3.b;
					var annVal = _v6.a;
					var errors = _v6.b.a;
					return _Utils_Tuple3(
						idx - 1,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(true, annVal),
							jsonAcc),
						$elm$core$Result$Err(
							$mgold$elm_nonempty_list$List$Nonempty$fromElement(
								A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex, idx, errors))));
				} else {
					var _v7 = _v3.a.a;
					var warnAcc = _v7.a;
					var valAcc = _v7.b;
					var _v8 = _v3.b;
					var annVal = _v8.a;
					var res = _v8.b.a;
					return _Utils_Tuple3(
						idx - 1,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(true, annVal),
							jsonAcc),
						$elm$core$Result$Ok(
							_Utils_Tuple2(
								_Utils_ap(res.warnings, warnAcc),
								A2($elm$core$List$cons, res.value, valAcc))));
				}
			}
		});
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			if (json.$ === 'Array') {
				var values = json.b;
				return function (_v2) {
					var jsonEntries = _v2.b;
					var res = _v2.c;
					return _Utils_Tuple2(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Array, true, jsonEntries),
						A2($elm$core$Result$map, finalize, res));
				}(
					A3(
						$elm$core$List$foldr,
						accumulate,
						_Utils_Tuple3(
							$elm$core$List$length(values) - 1,
							_List_Nil,
							$elm$core$Result$Ok(
								_Utils_Tuple2(_List_Nil, _List_Nil))),
						values));
			} else {
				return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TArray, json);
			}
		});
};
var $dillonkearns$elm_pages$OptimizedDecoder$list = function (_v0) {
	var jd = _v0.a;
	var jde = _v0.b;
	return A2(
		$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
		$elm$json$Json$Decode$list(jd),
		$zwilias$json_decode_exploration$Json$Decode$Exploration$list(jde));
};
var $dillonkearns$elm_pages$DataSource$Internal$Glob$run = F2(
	function (rawInput, _v0) {
		var pattern = _v0.a;
		var regex = _v0.b;
		var applyCapture = _v0.c;
		var fullRegex = '^' + (regex + '$');
		var parsedRegex = A2(
			$elm$core$Maybe$withDefault,
			$elm$regex$Regex$never,
			$elm$regex$Regex$fromString(fullRegex));
		var regexCaptures = A2(
			$elm$core$List$map,
			$elm$core$Maybe$withDefault(''),
			A2(
				$elm$core$List$concatMap,
				function ($) {
					return $.submatches;
				},
				A2($elm$regex$Regex$find, parsedRegex, rawInput)));
		return {
			match: A2(
				applyCapture,
				rawInput,
				$elm$core$List$reverse(regexCaptures)).a,
			pattern: pattern
		};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TString = {$: 'TString'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed = function (annotatedValue) {
	switch (annotatedValue.$) {
		case 'String':
			var val = annotatedValue.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$String, true, val);
		case 'Number':
			var val = annotatedValue.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Number, true, val);
		case 'Bool':
			var val = annotatedValue.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Bool, true, val);
		case 'Null':
			return $zwilias$json_decode_exploration$Json$Decode$Exploration$Null(true);
		case 'Array':
			var values = annotatedValue.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Array,
				true,
				A2(
					$elm$core$List$map,
					function (_v1) {
						var v = _v1.b;
						return _Utils_Tuple2(
							true,
							$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(v));
					},
					values));
		default:
			var values = annotatedValue.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Object,
				true,
				A2(
					$elm$core$List$map,
					function (_v2) {
						var f = _v2.b;
						var v = _v2.c;
						return _Utils_Tuple3(
							true,
							f,
							$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(v));
					},
					values));
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$ok = F2(
	function (json, val) {
		return _Utils_Tuple2(
			json,
			$elm$core$Result$Ok(
				{value: val, warnings: _List_Nil}));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$string = $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
	function (json) {
		if (json.$ === 'String') {
			var val = json.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(json),
				val);
		} else {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TString, json);
		}
	});
var $dillonkearns$elm_pages$OptimizedDecoder$string = A2($dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder, $elm$json$Json$Decode$string, $zwilias$json_decode_exploration$Json$Decode$Exploration$string);
var $dillonkearns$elm_pages$Secrets$succeed = function (value) {
	return $dillonkearns$elm_pages$Secrets$Value(
		function (_v0) {
			return $elm$core$Result$Ok(value);
		});
};
var $dillonkearns$elm_pages$DataSource$Internal$Glob$toPattern = function (_v0) {
	var pattern = _v0.a;
	return pattern;
};
var $dillonkearns$elm_pages$DataSource$Glob$toDataSource = function (glob) {
	return A2(
		$dillonkearns$elm_pages$DataSource$Http$get,
		$dillonkearns$elm_pages$Secrets$succeed(
			'glob://' + $dillonkearns$elm_pages$DataSource$Internal$Glob$toPattern(glob)),
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$map,
			function (rawGlob) {
				return A2(
					$elm$core$List$map,
					function (matchedPath) {
						return A2($dillonkearns$elm_pages$DataSource$Internal$Glob$run, matchedPath, glob).match;
					},
					rawGlob);
			},
			$dillonkearns$elm_pages$OptimizedDecoder$list($dillonkearns$elm_pages$OptimizedDecoder$string)));
};
var $dillonkearns$elm_pages$DataSource$Glob$wildcard = A3(
	$dillonkearns$elm_pages$DataSource$Internal$Glob$Glob,
	'*',
	$dillonkearns$elm_pages$DataSource$Glob$wildcardRegex,
	F2(
		function (_v0, captures) {
			if (captures.b) {
				var first = captures.a;
				var rest = captures.b;
				return _Utils_Tuple2(first, rest);
			} else {
				return _Utils_Tuple2('ERROR', _List_Nil);
			}
		}));
var $author$project$Page$Facilities$facilitiesGlob = $dillonkearns$elm_pages$DataSource$Glob$toDataSource(
	A2(
		$dillonkearns$elm_pages$DataSource$Glob$match,
		$dillonkearns$elm_pages$DataSource$Glob$literal('.md'),
		A2(
			$dillonkearns$elm_pages$DataSource$Glob$capture,
			$dillonkearns$elm_pages$DataSource$Glob$wildcard,
			A2(
				$dillonkearns$elm_pages$DataSource$Glob$match,
				$dillonkearns$elm_pages$DataSource$Glob$literal('content/facilities/'),
				$dillonkearns$elm_pages$DataSource$Glob$succeed(
					function (s) {
						return s;
					})))));
var $author$project$Page$Facilities$Metadata = F2(
	function (title, photo) {
		return {photo: photo, title: title};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TObject = {$: 'TObject'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TObjectField = function (a) {
	return {$: 'TObjectField', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$field = F2(
	function (fieldName, _v0) {
		var decoderFn = _v0.a;
		var finalize = function (_v6) {
			var values = _v6.a;
			var warnings = _v6.b;
			var res = _v6.c;
			if (res.$ === 'Nothing') {
				return A2(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$expected,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$TObjectField(fieldName),
					A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Object, true, values));
			} else {
				if (res.a.$ === 'Err') {
					var e = res.a.a;
					return _Utils_Tuple2(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Object, true, values),
						$elm$core$Result$Err(e));
				} else {
					var v = res.a.a;
					return _Utils_Tuple2(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Object, true, values),
						$elm$core$Result$Ok(
							{value: v, warnings: warnings}));
				}
			}
		};
		var accumulate = F2(
			function (_v3, _v4) {
				var used = _v3.a;
				var key = _v3.b;
				var val = _v3.c;
				var acc = _v4.a;
				var warnings = _v4.b;
				var result = _v4.c;
				if (_Utils_eq(key, fieldName)) {
					var _v2 = decoderFn(val);
					if (_v2.b.$ === 'Err') {
						var annVal = _v2.a;
						var e = _v2.b.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple3(true, key, annVal),
								acc),
							warnings,
							$elm$core$Maybe$Just(
								$elm$core$Result$Err(
									$mgold$elm_nonempty_list$List$Nonempty$fromElement(
										A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField, key, e)))));
					} else {
						var annVal = _v2.a;
						var res = _v2.b.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple3(true, key, annVal),
								acc),
							_Utils_ap(
								A2(
									$elm$core$List$map,
									A2(
										$elm$core$Basics$composeR,
										$mgold$elm_nonempty_list$List$Nonempty$fromElement,
										$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField(key)),
									res.warnings),
								warnings),
							$elm$core$Maybe$Just(
								$elm$core$Result$Ok(res.value)));
					}
				} else {
					return _Utils_Tuple3(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple3(used, key, val),
							acc),
						warnings,
						result);
				}
			});
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				if (json.$ === 'Object') {
					var kvPairs = json.b;
					return finalize(
						A3(
							$elm$core$List$foldr,
							accumulate,
							_Utils_Tuple3(_List_Nil, _List_Nil, $elm$core$Maybe$Nothing),
							kvPairs));
				} else {
					return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TObject, json);
				}
			});
	});
var $dillonkearns$elm_pages$OptimizedDecoder$field = F2(
	function (fieldName, _v0) {
		var jd = _v0.a;
		var jde = _v0.b;
		return A2(
			$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
			A2($elm$json$Json$Decode$field, fieldName, jd),
			A2($zwilias$json_decode_exploration$Json$Decode$Exploration$field, fieldName, jde));
	});
var $mgold$elm_nonempty_list$List$Nonempty$append = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var xs = _v0.b;
		var y = _v1.a;
		var ys = _v1.b;
		return A2(
			$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			x,
			_Utils_ap(
				xs,
				A2($elm$core$List$cons, y, ys)));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$map2 = F3(
	function (f, _v0, _v1) {
		var decoderFnA = _v0.a;
		var decoderFnB = _v1.a;
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				var _v2 = decoderFnA(json);
				if (_v2.b.$ === 'Ok') {
					var annVal = _v2.a;
					var accA = _v2.b.a;
					var _v3 = decoderFnB(annVal);
					if (_v3.b.$ === 'Ok') {
						var annValB = _v3.a;
						var accB = _v3.b.a;
						return _Utils_Tuple2(
							annValB,
							$elm$core$Result$Ok(
								{
									value: A2(f, accA.value, accB.value),
									warnings: _Utils_ap(accA.warnings, accB.warnings)
								}));
					} else {
						var annValB = _v3.a;
						var e = _v3.b.a;
						return _Utils_Tuple2(
							annValB,
							$elm$core$Result$Err(e));
					}
				} else {
					var annVal = _v2.a;
					var e = _v2.b.a;
					var _v4 = decoderFnB(annVal);
					if (_v4.b.$ === 'Ok') {
						var annValB = _v4.a;
						return _Utils_Tuple2(
							annValB,
							$elm$core$Result$Err(e));
					} else {
						var annValB = _v4.a;
						var e2 = _v4.b.a;
						return _Utils_Tuple2(
							annValB,
							$elm$core$Result$Err(
								A2($mgold$elm_nonempty_list$List$Nonempty$append, e, e2)));
					}
				}
			});
	});
var $dillonkearns$elm_pages$OptimizedDecoder$map2 = F3(
	function (f, _v0, _v1) {
		var jdA = _v0.a;
		var jdeA = _v0.b;
		var jdB = _v1.a;
		var jdeB = _v1.b;
		return A2(
			$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
			A3($elm$json$Json$Decode$map2, f, jdA, jdB),
			A3($zwilias$json_decode_exploration$Json$Decode$Exploration$map2, f, jdeA, jdeB));
	});
var $author$project$Data$Photo$Photo = F3(
	function (path, photographer, description) {
		return {description: description, path: path, photographer: photographer};
	});
var $dillonkearns$elm_pages$OptimizedDecoder$andMap = $dillonkearns$elm_pages$OptimizedDecoder$map2($elm$core$Basics$apR);
var $dillonkearns$elm_pages$OptimizedDecoder$map3 = F4(
	function (f, decoderA, decoderB, decoderC) {
		return A2(
			$dillonkearns$elm_pages$OptimizedDecoder$andMap,
			decoderC,
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$andMap,
				decoderB,
				A2($dillonkearns$elm_pages$OptimizedDecoder$map, f, decoderA)));
	});
var $author$project$Data$Photo$Photographer = F2(
	function (name, website) {
		return {name: name, website: website};
	});
var $author$project$Data$Photo$photographerJSONDecoder = A3(
	$dillonkearns$elm_pages$OptimizedDecoder$map2,
	$author$project$Data$Photo$Photographer,
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'name', $dillonkearns$elm_pages$OptimizedDecoder$string),
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'website', $dillonkearns$elm_pages$OptimizedDecoder$string));
var $author$project$Data$Photo$photoJSONDecoder = A4(
	$dillonkearns$elm_pages$OptimizedDecoder$map3,
	$author$project$Data$Photo$Photo,
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'path', $dillonkearns$elm_pages$OptimizedDecoder$string),
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'photographer', $author$project$Data$Photo$photographerJSONDecoder),
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'description', $dillonkearns$elm_pages$OptimizedDecoder$string));
var $author$project$Page$Facilities$frontmatterDecoder = A3(
	$dillonkearns$elm_pages$OptimizedDecoder$map2,
	$author$project$Page$Facilities$Metadata,
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'title', $dillonkearns$elm_pages$OptimizedDecoder$string),
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'photo', $author$project$Data$Photo$photoJSONDecoder));
var $elm_community$dict_extra$Dict$Extra$insertDedupe = F4(
	function (combine, key, value, dict) {
		var _with = function (mbValue) {
			if (mbValue.$ === 'Just') {
				var oldValue = mbValue.a;
				return $elm$core$Maybe$Just(
					A2(combine, oldValue, value));
			} else {
				return $elm$core$Maybe$Just(value);
			}
		};
		return A3($elm$core$Dict$update, key, _with, dict);
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$DistilledResponse = function (a) {
	return {$: 'DistilledResponse', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error = function (a) {
	return {$: 'Error', a: a};
};
var $vito$elm_ansi$Ansi$Red = {$: 'Red'};
var $dillonkearns$elm_pages$TerminalText$red = function (inner) {
	return A2(
		$dillonkearns$elm_pages$TerminalText$Style,
		_Utils_update(
			$dillonkearns$elm_pages$TerminalText$blankStyle,
			{
				color: $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Red)
			}),
		inner);
};
var $vito$elm_ansi$Ansi$Yellow = {$: 'Yellow'};
var $dillonkearns$elm_pages$TerminalText$yellow = function (inner) {
	return A2(
		$dillonkearns$elm_pages$TerminalText$Style,
		_Utils_update(
			$dillonkearns$elm_pages$TerminalText$blankStyle,
			{
				color: $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Yellow)
			}),
		inner);
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$merge = F3(
	function (key, whatToDo1, whatToDo2) {
		var _v0 = _Utils_Tuple2(whatToDo1, whatToDo2);
		_v0$1:
		while (true) {
			_v0$2:
			while (true) {
				_v0$4:
				while (true) {
					_v0$5:
					while (true) {
						_v0$6:
						while (true) {
							_v0$7:
							while (true) {
								switch (_v0.a.$) {
									case 'Error':
										switch (_v0.b.$) {
											case 'Error':
												var buildErrors1 = _v0.a.a;
												var buildErrors2 = _v0.b.a;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error(
													_Utils_ap(buildErrors1, buildErrors2));
											case 'StripResponse':
												break _v0$1;
											case 'CliOnly':
												break _v0$1;
											case 'DistilledResponse':
												break _v0$1;
											default:
												break _v0$1;
										}
									case 'StripResponse':
										switch (_v0.b.$) {
											case 'Error':
												break _v0$2;
											case 'StripResponse':
												var strip1 = _v0.a.a;
												var strip2 = _v0.b.a;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(
													A3(
														$dillonkearns$elm_pages$OptimizedDecoder$map2,
														F2(
															function (_v1, _v2) {
																return _Utils_Tuple0;
															}),
														strip1,
														strip2));
											case 'CliOnly':
												break _v0$4;
											case 'DistilledResponse':
												break _v0$4;
											default:
												break _v0$4;
										}
									case 'CliOnly':
										switch (_v0.b.$) {
											case 'Error':
												break _v0$2;
											case 'StripResponse':
												break _v0$5;
											case 'CliOnly':
												break _v0$6;
											case 'DistilledResponse':
												break _v0$7;
											default:
												break _v0$7;
										}
									case 'DistilledResponse':
										switch (_v0.b.$) {
											case 'Error':
												break _v0$2;
											case 'StripResponse':
												break _v0$5;
											case 'CliOnly':
												break _v0$6;
											case 'DistilledResponse':
												var distilled1 = _v0.a.a;
												var distilled2 = _v0.b.a;
												return _Utils_eq(
													A2($elm$json$Json$Encode$encode, 0, distilled1),
													A2($elm$json$Json$Encode$encode, 0, distilled2)) ? $dillonkearns$elm_pages$Pages$StaticHttpRequest$DistilledResponse(distilled1) : $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error(
													_List_fromArray(
														[
															{
															fatal: true,
															message: _List_fromArray(
																[
																	$dillonkearns$elm_pages$TerminalText$text('I encountered DataSource.distill with two matching keys that had differing encoded values.\n\n'),
																	$dillonkearns$elm_pages$TerminalText$text('Look for '),
																	$dillonkearns$elm_pages$TerminalText$red('DataSource.distill'),
																	$dillonkearns$elm_pages$TerminalText$text(' with the key '),
																	$dillonkearns$elm_pages$TerminalText$red('\"' + (key + '\"')),
																	$dillonkearns$elm_pages$TerminalText$text('\n\n'),
																	$dillonkearns$elm_pages$TerminalText$yellow('The first encoded value was:\n'),
																	$dillonkearns$elm_pages$TerminalText$text(
																	A2($elm$json$Json$Encode$encode, 2, distilled1)),
																	$dillonkearns$elm_pages$TerminalText$text('\n\n-------------------------------\n\n'),
																	$dillonkearns$elm_pages$TerminalText$yellow('The second encoded value was:\n'),
																	$dillonkearns$elm_pages$TerminalText$text(
																	A2($elm$json$Json$Encode$encode, 2, distilled2))
																]),
															path: '',
															title: 'Non-Unique Distill Keys'
														}
														]));
											default:
												var distilled1 = _v0.a.a;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$DistilledResponse(distilled1);
										}
									default:
										switch (_v0.b.$) {
											case 'Error':
												break _v0$2;
											case 'StripResponse':
												break _v0$5;
											case 'CliOnly':
												break _v0$6;
											case 'DistilledResponse':
												var distilled1 = _v0.b.a;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$DistilledResponse(distilled1);
											default:
												var _v5 = _v0.a;
												var _v6 = _v0.b;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse;
										}
								}
							}
							var _v4 = _v0.a;
							return whatToDo2;
						}
						var _v3 = _v0.b;
						return whatToDo1;
					}
					var strip1 = _v0.b.a;
					return $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(strip1);
				}
				var strip1 = _v0.a.a;
				return $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(strip1);
			}
			var buildErrors1 = _v0.b.a;
			return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error(buildErrors1);
		}
		var buildErrors1 = _v0.a.a;
		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error(buildErrors1);
	});
var $dillonkearns$elm_pages$DataSource$uniqueInsertAll = F2(
	function (dictToDedupeMerge, startingDict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (key, value, acc) {
					return A4(
						$elm_community$dict_extra$Dict$Extra$insertDedupe,
						$dillonkearns$elm_pages$Pages$StaticHttpRequest$merge(key),
						key,
						value,
						acc);
				}),
			startingDict,
			dictToDedupeMerge);
	});
var $dillonkearns$elm_pages$DataSource$combineReducedDicts = F2(
	function (dict1, dict2) {
		return (_Utils_cmp(
			$elm$core$Dict$size(dict1),
			$elm$core$Dict$size(dict2)) > 0) ? A2($dillonkearns$elm_pages$DataSource$uniqueInsertAll, dict2, dict1) : A2($dillonkearns$elm_pages$DataSource$uniqueInsertAll, dict1, dict2);
	});
var $dillonkearns$elm_pages$DataSource$addUrls = F2(
	function (urlsToAdd, requestInfo) {
		switch (requestInfo.$) {
			case 'RequestError':
				var error = requestInfo.a;
				return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
			case 'Request':
				var stripped = requestInfo.a;
				var _v1 = requestInfo.b;
				var initialUrls = _v1.a;
				var _function = _v1.b;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					stripped,
					_Utils_Tuple2(
						_Utils_ap(initialUrls, urlsToAdd),
						_function));
			default:
				var stripped = requestInfo.a;
				var value = requestInfo.b;
				return A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, stripped, value);
		}
	});
var $dillonkearns$elm_pages$DataSource$lookupHelp = F5(
	function (strippedSoFar, keepOrDiscard, appType, requestInfo, rawResponses) {
		lookupHelp:
		while (true) {
			switch (requestInfo.$) {
				case 'RequestError':
					var error = requestInfo.a;
					return $elm$core$Result$Err(error);
				case 'Request':
					var strippedResponses = requestInfo.a;
					var _v1 = requestInfo.b;
					var urls = _v1.a;
					var lookupFn = _v1.b;
					var $temp$strippedSoFar = A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, strippedResponses, strippedSoFar),
						$temp$keepOrDiscard = keepOrDiscard,
						$temp$appType = appType,
						$temp$requestInfo = A2(
						$dillonkearns$elm_pages$DataSource$addUrls,
						urls,
						A3(lookupFn, keepOrDiscard, appType, rawResponses)),
						$temp$rawResponses = rawResponses;
					strippedSoFar = $temp$strippedSoFar;
					keepOrDiscard = $temp$keepOrDiscard;
					appType = $temp$appType;
					requestInfo = $temp$requestInfo;
					rawResponses = $temp$rawResponses;
					continue lookupHelp;
				default:
					var stripped = requestInfo.a;
					var value = requestInfo.b;
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, stripped, strippedSoFar),
							value));
			}
		}
	});
var $dillonkearns$elm_pages$DataSource$lookup = $dillonkearns$elm_pages$DataSource$lookupHelp($elm$core$Dict$empty);
var $dillonkearns$elm_pages$DataSource$lookupUrls = function (requestInfo) {
	switch (requestInfo.$) {
		case 'RequestError':
			return _List_Nil;
		case 'Request':
			var _v1 = requestInfo.b;
			var urls = _v1.a;
			return urls;
		default:
			return _List_Nil;
	}
};
var $dillonkearns$elm_pages$DataSource$andThen = F2(
	function (fn, requestInfo) {
		return A2(
			$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
			$elm$core$Dict$empty,
			_Utils_Tuple2(
				$dillonkearns$elm_pages$DataSource$lookupUrls(requestInfo),
				F3(
					function (keepOrDiscard, appType, rawResponses) {
						return function (result) {
							if (result.$ === 'Err') {
								var error = result.a;
								return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
							} else {
								var _v1 = result.a;
								var strippedResponses = _v1.a;
								var value = _v1.b;
								var _v2 = fn(value);
								switch (_v2.$) {
									case 'Request':
										var dict = _v2.a;
										var _v3 = _v2.b;
										var values = _v3.a;
										var _function = _v3.b;
										return A2(
											$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
											A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, strippedResponses, dict),
											_Utils_Tuple2(values, _function));
									case 'RequestError':
										var error = _v2.a;
										return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
									default:
										var dict = _v2.a;
										var finalValue = _v2.b;
										return A2(
											$dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute,
											A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, strippedResponses, dict),
											finalValue);
								}
							}
						}(
							A4($dillonkearns$elm_pages$DataSource$lookup, keepOrDiscard, appType, requestInfo, rawResponses));
					})));
	});
var $dillonkearns$elm_pages$DataSource$map2 = F3(
	function (fn, request1, request2) {
		var _v0 = _Utils_Tuple2(request1, request2);
		_v0$1:
		while (true) {
			switch (_v0.a.$) {
				case 'RequestError':
					var error = _v0.a.a;
					return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
				case 'Request':
					switch (_v0.b.$) {
						case 'RequestError':
							break _v0$1;
						case 'Request':
							var _v1 = _v0.a;
							var newDict1 = _v1.a;
							var _v2 = _v1.b;
							var urls1 = _v2.a;
							var lookupFn1 = _v2.b;
							var _v3 = _v0.b;
							var newDict2 = _v3.a;
							var _v4 = _v3.b;
							var urls2 = _v4.a;
							var lookupFn2 = _v4.b;
							return A2(
								$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
								A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, newDict1, newDict2),
								_Utils_Tuple2(
									_Utils_ap(urls1, urls2),
									F3(
										function (keepOrDiscard, appType, rawResponses) {
											return A3(
												$dillonkearns$elm_pages$DataSource$map2,
												fn,
												A3(lookupFn1, keepOrDiscard, appType, rawResponses),
												A3(lookupFn2, keepOrDiscard, appType, rawResponses));
										})));
						default:
							var _v5 = _v0.a;
							var dict1 = _v5.a;
							var _v6 = _v5.b;
							var urls1 = _v6.a;
							var lookupFn1 = _v6.b;
							var _v7 = _v0.b;
							var stripped2 = _v7.a;
							var value2 = _v7.b;
							return A2(
								$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
								dict1,
								_Utils_Tuple2(
									urls1,
									F3(
										function (keepOrDiscard, appType, rawResponses) {
											return A3(
												$dillonkearns$elm_pages$DataSource$map2,
												fn,
												A3(lookupFn1, keepOrDiscard, appType, rawResponses),
												A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, stripped2, value2));
										})));
					}
				default:
					switch (_v0.b.$) {
						case 'RequestError':
							break _v0$1;
						case 'Request':
							var _v8 = _v0.a;
							var stripped2 = _v8.a;
							var value2 = _v8.b;
							var _v9 = _v0.b;
							var dict1 = _v9.a;
							var _v10 = _v9.b;
							var urls1 = _v10.a;
							var lookupFn1 = _v10.b;
							return A2(
								$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
								dict1,
								_Utils_Tuple2(
									urls1,
									F3(
										function (keepOrDiscard, appType, rawResponses) {
											return A3(
												$dillonkearns$elm_pages$DataSource$map2,
												fn,
												A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, stripped2, value2),
												A3(lookupFn1, keepOrDiscard, appType, rawResponses));
										})));
						default:
							var _v11 = _v0.a;
							var stripped1 = _v11.a;
							var value1 = _v11.b;
							var _v12 = _v0.b;
							var stripped2 = _v12.a;
							var value2 = _v12.b;
							return A2(
								$dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute,
								A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, stripped1, stripped2),
								A2(fn, value1, value2));
					}
			}
		}
		var error = _v0.b.a;
		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
	});
var $dillonkearns$elm_pages$DataSource$combine = A2(
	$elm$core$List$foldr,
	$dillonkearns$elm_pages$DataSource$map2($elm$core$List$cons),
	$dillonkearns$elm_pages$DataSource$succeed(_List_Nil));
var $dillonkearns$elm_pages$DataSource$resolve = $dillonkearns$elm_pages$DataSource$andThen($dillonkearns$elm_pages$DataSource$combine);
var $dillonkearns$elm_pages$DataSource$File$body = A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'withoutFrontmatter', $dillonkearns$elm_pages$OptimizedDecoder$string);
var $dillonkearns$elm_pages$DataSource$File$read = function (filePath) {
	return $dillonkearns$elm_pages$DataSource$Http$get(
		$dillonkearns$elm_pages$Secrets$succeed('file://' + filePath));
};
var $dillonkearns$elm_pages$DataSource$File$bodyWithoutFrontmatter = function (filePath) {
	return A2($dillonkearns$elm_pages$DataSource$File$read, filePath, $dillonkearns$elm_pages$DataSource$File$body);
};
var $MartinSStewart$elm_serialize$Serialize$CustomTypeCodec = function (a) {
	return {$: 'CustomTypeCodec', a: a};
};
var $MartinSStewart$elm_serialize$Serialize$customType = function (match) {
	return $MartinSStewart$elm_serialize$Serialize$CustomTypeCodec(
		{
			decoder: function (_v0) {
				return $elm$core$Basics$identity;
			},
			idCounter: 0,
			jsonDecoder: function (_v1) {
				return $elm$core$Basics$identity;
			},
			jsonMatch: match,
			match: match
		});
};
var $MartinSStewart$elm_serialize$Serialize$DataCorrupted = {$: 'DataCorrupted'};
var $elm$bytes$Bytes$Decode$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $elm$bytes$Bytes$Decode$andThen = F2(
	function (callback, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var newOffset = _v1.a;
					var a = _v1.b;
					var _v2 = callback(a);
					var decodeB = _v2.a;
					return A2(decodeB, bites, newOffset);
				}));
	});
var $MartinSStewart$elm_serialize$Serialize$Codec = function (a) {
	return {$: 'Codec', a: a};
};
var $MartinSStewart$elm_serialize$Serialize$build = F4(
	function (encoder_, decoder_, jsonEncoder, jsonDecoder) {
		return $MartinSStewart$elm_serialize$Serialize$Codec(
			{decoder: decoder_, encoder: encoder_, jsonDecoder: jsonDecoder, jsonEncoder: jsonEncoder});
	});
var $elm$bytes$Bytes$BE = {$: 'BE'};
var $MartinSStewart$elm_serialize$Serialize$endian = $elm$bytes$Bytes$BE;
var $elm$bytes$Bytes$Decode$succeed = function (a) {
	return $elm$bytes$Bytes$Decode$Decoder(
		F2(
			function (_v0, offset) {
				return _Utils_Tuple2(offset, a);
			}));
};
var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
	switch (builder.$) {
		case 'I8':
			return 1;
		case 'I16':
			return 2;
		case 'I32':
			return 4;
		case 'U8':
			return 1;
		case 'U16':
			return 2;
		case 'U32':
			return 4;
		case 'F32':
			return 4;
		case 'F64':
			return 8;
		case 'Seq':
			var w = builder.a;
			return w;
		case 'Utf8':
			var w = builder.a;
			return w;
		default:
			var bs = builder.a;
			return _Bytes_width(bs);
	}
};
var $elm$bytes$Bytes$LE = {$: 'LE'};
var $elm$bytes$Bytes$Encode$write = F3(
	function (builder, mb, offset) {
		switch (builder.$) {
			case 'I8':
				var n = builder.a;
				return A3(_Bytes_write_i8, mb, offset, n);
			case 'I16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'I32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U8':
				var n = builder.a;
				return A3(_Bytes_write_u8, mb, offset, n);
			case 'U16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F64':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f64,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'Seq':
				var bs = builder.b;
				return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
			case 'Utf8':
				var s = builder.b;
				return A3(_Bytes_write_string, mb, offset, s);
			default:
				var bs = builder.a;
				return A3(_Bytes_write_bytes, mb, offset, bs);
		}
	});
var $elm$bytes$Bytes$Encode$writeSequence = F3(
	function (builders, mb, offset) {
		writeSequence:
		while (true) {
			if (!builders.b) {
				return offset;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$builders = bs,
					$temp$mb = mb,
					$temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
				builders = $temp$builders;
				mb = $temp$mb;
				offset = $temp$offset;
				continue writeSequence;
			}
		}
	});
var $elm$bytes$Bytes$Decode$unsignedInt16 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_u16(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $MartinSStewart$elm_serialize$Serialize$finishCustomType = function (_v0) {
	var am = _v0.a;
	return A4(
		$MartinSStewart$elm_serialize$Serialize$build,
		A2(
			$elm$core$Basics$composeR,
			am.match,
			function (_v1) {
				var _v2 = _v1.a;
				var a = _v2.a;
				return a;
			}),
		A2(
			$elm$bytes$Bytes$Decode$andThen,
			function (tag) {
				return A2(
					am.decoder,
					tag,
					$elm$bytes$Bytes$Decode$succeed(
						$elm$core$Result$Err($MartinSStewart$elm_serialize$Serialize$DataCorrupted)));
			},
			$elm$bytes$Bytes$Decode$unsignedInt16($MartinSStewart$elm_serialize$Serialize$endian)),
		A2(
			$elm$core$Basics$composeR,
			am.jsonMatch,
			function (_v3) {
				var _v4 = _v3.a;
				var a = _v4.b;
				return a;
			}),
		A2(
			$elm$json$Json$Decode$andThen,
			function (tag) {
				return A2(
					am.jsonDecoder,
					tag,
					$elm$json$Json$Decode$succeed(
						$elm$core$Result$Err($MartinSStewart$elm_serialize$Serialize$DataCorrupted)));
			},
			A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int)));
};
var $MartinSStewart$elm_serialize$Serialize$VariantEncoder = function (a) {
	return {$: 'VariantEncoder', a: a};
};
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$bytes$Bytes$Encode$Seq = F2(
	function (a, b) {
		return {$: 'Seq', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$getWidths = F2(
	function (width, builders) {
		getWidths:
		while (true) {
			if (!builders.b) {
				return width;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b),
					$temp$builders = bs;
				width = $temp$width;
				builders = $temp$builders;
				continue getWidths;
			}
		}
	});
var $elm$bytes$Bytes$Encode$sequence = function (builders) {
	return A2(
		$elm$bytes$Bytes$Encode$Seq,
		A2($elm$bytes$Bytes$Encode$getWidths, 0, builders),
		builders);
};
var $elm$bytes$Bytes$Encode$U16 = F2(
	function (a, b) {
		return {$: 'U16', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$unsignedInt16 = $elm$bytes$Bytes$Encode$U16;
var $MartinSStewart$elm_serialize$Serialize$variant = F5(
	function (matchPiece, matchJsonPiece, decoderPiece, jsonDecoderPiece, _v0) {
		var am = _v0.a;
		var jsonEnc = function (v) {
			return $MartinSStewart$elm_serialize$Serialize$VariantEncoder(
				_Utils_Tuple2(
					$elm$bytes$Bytes$Encode$sequence(_List_Nil),
					A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						A2(
							$elm$core$List$cons,
							$elm$json$Json$Encode$int(am.idCounter),
							v))));
		};
		var jsonDecoder_ = F2(
			function (tag, orElse) {
				return _Utils_eq(tag, am.idCounter) ? jsonDecoderPiece : A2(am.jsonDecoder, tag, orElse);
			});
		var enc = function (v) {
			return $MartinSStewart$elm_serialize$Serialize$VariantEncoder(
				_Utils_Tuple2(
					$elm$bytes$Bytes$Encode$sequence(
						A2(
							$elm$core$List$cons,
							A2($elm$bytes$Bytes$Encode$unsignedInt16, $MartinSStewart$elm_serialize$Serialize$endian, am.idCounter),
							v)),
					$elm$json$Json$Encode$null));
		};
		var decoder_ = F2(
			function (tag, orElse) {
				return _Utils_eq(tag, am.idCounter) ? decoderPiece : A2(am.decoder, tag, orElse);
			});
		return $MartinSStewart$elm_serialize$Serialize$CustomTypeCodec(
			{
				decoder: decoder_,
				idCounter: am.idCounter + 1,
				jsonDecoder: jsonDecoder_,
				jsonMatch: am.jsonMatch(
					matchJsonPiece(jsonEnc)),
				match: am.match(
					matchPiece(enc))
			});
	});
var $MartinSStewart$elm_serialize$Serialize$variant0 = function (ctor) {
	return A4(
		$MartinSStewart$elm_serialize$Serialize$variant,
		function (c) {
			return c(_List_Nil);
		},
		function (c) {
			return c(_List_Nil);
		},
		$elm$bytes$Bytes$Decode$succeed(
			$elm$core$Result$Ok(ctor)),
		$elm$json$Json$Decode$succeed(
			$elm$core$Result$Ok(ctor)));
};
var $author$project$MarkdownCodec$alignmentCodec = $MartinSStewart$elm_serialize$Serialize$finishCustomType(
	A2(
		$MartinSStewart$elm_serialize$Serialize$variant0,
		$dillonkearns$elm_markdown$Markdown$Block$AlignCenter,
		A2(
			$MartinSStewart$elm_serialize$Serialize$variant0,
			$dillonkearns$elm_markdown$Markdown$Block$AlignRight,
			A2(
				$MartinSStewart$elm_serialize$Serialize$variant0,
				$dillonkearns$elm_markdown$Markdown$Block$AlignLeft,
				$MartinSStewart$elm_serialize$Serialize$customType(
					F4(
						function (encodeAlignLeft, encodeAlignRight, encodeAlignCenter, value) {
							switch (value.$) {
								case 'AlignLeft':
									return encodeAlignLeft;
								case 'AlignRight':
									return encodeAlignRight;
								default:
									return encodeAlignCenter;
							}
						}))))));
var $MartinSStewart$elm_serialize$Serialize$RecordCodec = function (a) {
	return {$: 'RecordCodec', a: a};
};
var $MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper = function (_v0) {
	var m = _v0.a;
	return m.decoder;
};
var $MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper = function (_v0) {
	var m = _v0.a;
	return m.encoder;
};
var $MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper = function (_v0) {
	var m = _v0.a;
	return m.jsonDecoder;
};
var $MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper = function (_v0) {
	var m = _v0.a;
	return m.jsonEncoder;
};
var $elm$bytes$Bytes$Decode$map2 = F3(
	function (func, _v0, _v1) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v2 = A2(decodeA, bites, offset);
					var aOffset = _v2.a;
					var a = _v2.b;
					var _v3 = A2(decodeB, bites, aOffset);
					var bOffset = _v3.a;
					var b = _v3.b;
					return _Utils_Tuple2(
						bOffset,
						A2(func, a, b));
				}));
	});
var $MartinSStewart$elm_serialize$Serialize$field = F3(
	function (getter, codec, _v0) {
		var recordCodec = _v0.a;
		return $MartinSStewart$elm_serialize$Serialize$RecordCodec(
			{
				decoder: A3(
					$elm$bytes$Bytes$Decode$map2,
					F2(
						function (f, x) {
							var _v1 = _Utils_Tuple2(f, x);
							if (_v1.a.$ === 'Ok') {
								if (_v1.b.$ === 'Ok') {
									var fOk = _v1.a.a;
									var xOk = _v1.b.a;
									return $elm$core$Result$Ok(
										fOk(xOk));
								} else {
									var err = _v1.b.a;
									return $elm$core$Result$Err(err);
								}
							} else {
								var err = _v1.a.a;
								return $elm$core$Result$Err(err);
							}
						}),
					recordCodec.decoder,
					$MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper(codec)),
				encoder: function (v) {
					return A2(
						$elm$core$List$cons,
						A2(
							$MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper,
							codec,
							getter(v)),
						recordCodec.encoder(v));
				},
				fieldIndex: recordCodec.fieldIndex + 1,
				jsonDecoder: A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (f, x) {
							var _v2 = _Utils_Tuple2(f, x);
							if (_v2.a.$ === 'Ok') {
								if (_v2.b.$ === 'Ok') {
									var fOk = _v2.a.a;
									var xOk = _v2.b.a;
									return $elm$core$Result$Ok(
										fOk(xOk));
								} else {
									var err = _v2.b.a;
									return $elm$core$Result$Err(err);
								}
							} else {
								var err = _v2.a.a;
								return $elm$core$Result$Err(err);
							}
						}),
					recordCodec.jsonDecoder,
					A2(
						$elm$json$Json$Decode$index,
						recordCodec.fieldIndex,
						$MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(codec))),
				jsonEncoder: function (v) {
					return A2(
						$elm$core$List$cons,
						A2(
							$MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper,
							codec,
							getter(v)),
						recordCodec.jsonEncoder(v));
				}
			});
	});
var $MartinSStewart$elm_serialize$Serialize$finishRecord = function (_v0) {
	var codec = _v0.a;
	return $MartinSStewart$elm_serialize$Serialize$Codec(
		{
			decoder: codec.decoder,
			encoder: A2(
				$elm$core$Basics$composeR,
				codec.encoder,
				A2($elm$core$Basics$composeR, $elm$core$List$reverse, $elm$bytes$Bytes$Encode$sequence)),
			jsonDecoder: codec.jsonDecoder,
			jsonEncoder: A2(
				$elm$core$Basics$composeR,
				codec.jsonEncoder,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$List$reverse,
					$elm$json$Json$Encode$list($elm$core$Basics$identity)))
		});
};
var $author$project$MarkdownCodec$headingCodec = $MartinSStewart$elm_serialize$Serialize$finishCustomType(
	A2(
		$MartinSStewart$elm_serialize$Serialize$variant0,
		$dillonkearns$elm_markdown$Markdown$Block$H6,
		A2(
			$MartinSStewart$elm_serialize$Serialize$variant0,
			$dillonkearns$elm_markdown$Markdown$Block$H5,
			A2(
				$MartinSStewart$elm_serialize$Serialize$variant0,
				$dillonkearns$elm_markdown$Markdown$Block$H4,
				A2(
					$MartinSStewart$elm_serialize$Serialize$variant0,
					$dillonkearns$elm_markdown$Markdown$Block$H3,
					A2(
						$MartinSStewart$elm_serialize$Serialize$variant0,
						$dillonkearns$elm_markdown$Markdown$Block$H2,
						A2(
							$MartinSStewart$elm_serialize$Serialize$variant0,
							$dillonkearns$elm_markdown$Markdown$Block$H1,
							$MartinSStewart$elm_serialize$Serialize$customType(
								F7(
									function (encodeH1, encodeH2, encodeH3, encodeH4, encodeH5, encodeH6, value) {
										switch (value.$) {
											case 'H1':
												return encodeH1;
											case 'H2':
												return encodeH2;
											case 'H3':
												return encodeH3;
											case 'H4':
												return encodeH4;
											case 'H5':
												return encodeH5;
											default:
												return encodeH6;
										}
									})))))))));
var $MartinSStewart$elm_serialize$Serialize$record = function (ctor) {
	return $MartinSStewart$elm_serialize$Serialize$RecordCodec(
		{
			decoder: $elm$bytes$Bytes$Decode$succeed(
				$elm$core$Result$Ok(ctor)),
			encoder: function (_v0) {
				return _List_Nil;
			},
			fieldIndex: 0,
			jsonDecoder: $elm$json$Json$Decode$succeed(
				$elm$core$Result$Ok(ctor)),
			jsonEncoder: function (_v1) {
				return _List_Nil;
			}
		});
};
var $elm$bytes$Bytes$Encode$getStringWidth = _Bytes_getStringWidth;
var $elm$bytes$Bytes$Decode$map = F2(
	function (func, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var aOffset = _v1.a;
					var a = _v1.b;
					return _Utils_Tuple2(
						aOffset,
						func(a));
				}));
	});
var $elm$bytes$Bytes$Decode$string = function (n) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_string(n));
};
var $elm$bytes$Bytes$Encode$Utf8 = F2(
	function (a, b) {
		return {$: 'Utf8', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$string = function (str) {
	return A2(
		$elm$bytes$Bytes$Encode$Utf8,
		_Bytes_getStringWidth(str),
		str);
};
var $elm$bytes$Bytes$Decode$unsignedInt32 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_u32(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $elm$bytes$Bytes$Encode$U32 = F2(
	function (a, b) {
		return {$: 'U32', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$unsignedInt32 = $elm$bytes$Bytes$Encode$U32;
var $MartinSStewart$elm_serialize$Serialize$string = A4(
	$MartinSStewart$elm_serialize$Serialize$build,
	function (text) {
		return $elm$bytes$Bytes$Encode$sequence(
			_List_fromArray(
				[
					A2(
					$elm$bytes$Bytes$Encode$unsignedInt32,
					$MartinSStewart$elm_serialize$Serialize$endian,
					$elm$bytes$Bytes$Encode$getStringWidth(text)),
					$elm$bytes$Bytes$Encode$string(text)
				]));
	},
	A2(
		$elm$bytes$Bytes$Decode$andThen,
		function (charCount) {
			return A2(
				$elm$bytes$Bytes$Decode$map,
				$elm$core$Result$Ok,
				$elm$bytes$Bytes$Decode$string(charCount));
		},
		$elm$bytes$Bytes$Decode$unsignedInt32($MartinSStewart$elm_serialize$Serialize$endian)),
	$elm$json$Json$Encode$string,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$string));
var $author$project$MarkdownCodec$htmlAttributeCodec = $MartinSStewart$elm_serialize$Serialize$finishRecord(
	A3(
		$MartinSStewart$elm_serialize$Serialize$field,
		function ($) {
			return $.value;
		},
		$MartinSStewart$elm_serialize$Serialize$string,
		A3(
			$MartinSStewart$elm_serialize$Serialize$field,
			function ($) {
				return $.name;
			},
			$MartinSStewart$elm_serialize$Serialize$string,
			$MartinSStewart$elm_serialize$Serialize$record(
				F2(
					function (name, value) {
						return {name: name, value: value};
					})))));
var $elm$bytes$Bytes$Decode$float64 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_f64(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $elm$bytes$Bytes$Encode$F64 = F2(
	function (a, b) {
		return {$: 'F64', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$float64 = $elm$bytes$Bytes$Encode$F64;
var $elm$core$Basics$round = _Basics_round;
var $MartinSStewart$elm_serialize$Serialize$int = A4(
	$MartinSStewart$elm_serialize$Serialize$build,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Basics$toFloat,
		$elm$bytes$Bytes$Encode$float64($MartinSStewart$elm_serialize$Serialize$endian)),
	A2(
		$elm$bytes$Bytes$Decode$map,
		A2($elm$core$Basics$composeR, $elm$core$Basics$round, $elm$core$Result$Ok),
		$elm$bytes$Bytes$Decode$float64($MartinSStewart$elm_serialize$Serialize$endian)),
	$elm$json$Json$Encode$int,
	A2($elm$json$Json$Decode$map, $elm$core$Result$Ok, $elm$json$Json$Decode$int));
var $MartinSStewart$elm_serialize$Serialize$lazy = function (f) {
	return A4(
		$MartinSStewart$elm_serialize$Serialize$build,
		function (value) {
			return A2(
				$MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper,
				f(_Utils_Tuple0),
				value);
		},
		A2(
			$elm$bytes$Bytes$Decode$andThen,
			function (_v0) {
				return $MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper(
					f(_Utils_Tuple0));
			},
			$elm$bytes$Bytes$Decode$succeed(_Utils_Tuple0)),
		function (value) {
			return A2(
				$MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper,
				f(_Utils_Tuple0),
				value);
		},
		A2(
			$elm$json$Json$Decode$andThen,
			function (_v1) {
				return $MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(
					f(_Utils_Tuple0));
			},
			$elm$json$Json$Decode$succeed(_Utils_Tuple0)));
};
var $MartinSStewart$elm_serialize$Serialize$listEncode = F2(
	function (encoder_, list_) {
		return $elm$bytes$Bytes$Encode$sequence(
			A2(
				$elm$core$List$cons,
				A2(
					$elm$bytes$Bytes$Encode$unsignedInt32,
					$MartinSStewart$elm_serialize$Serialize$endian,
					$elm$core$List$length(list_)),
				A2($elm$core$List$map, encoder_, list_)));
	});
var $elm$bytes$Bytes$Decode$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$bytes$Bytes$Decode$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $MartinSStewart$elm_serialize$Serialize$listStep = F2(
	function (decoder_, _v0) {
		var n = _v0.a;
		var xs = _v0.b;
		return (n <= 0) ? $elm$bytes$Bytes$Decode$succeed(
			$elm$bytes$Bytes$Decode$Done(
				$elm$core$Result$Ok(
					$elm$core$List$reverse(xs)))) : A2(
			$elm$bytes$Bytes$Decode$map,
			function (x) {
				if (x.$ === 'Ok') {
					var ok = x.a;
					return $elm$bytes$Bytes$Decode$Loop(
						_Utils_Tuple2(
							n - 1,
							A2($elm$core$List$cons, ok, xs)));
				} else {
					var err = x.a;
					return $elm$bytes$Bytes$Decode$Done(
						$elm$core$Result$Err(err));
				}
			},
			decoder_);
	});
var $elm$bytes$Bytes$Decode$loopHelp = F4(
	function (state, callback, bites, offset) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var decoder = _v0.a;
			var _v1 = A2(decoder, bites, offset);
			var newOffset = _v1.a;
			var step = _v1.b;
			if (step.$ === 'Loop') {
				var newState = step.a;
				var $temp$state = newState,
					$temp$callback = callback,
					$temp$bites = bites,
					$temp$offset = newOffset;
				state = $temp$state;
				callback = $temp$callback;
				bites = $temp$bites;
				offset = $temp$offset;
				continue loopHelp;
			} else {
				var result = step.a;
				return _Utils_Tuple2(newOffset, result);
			}
		}
	});
var $elm$bytes$Bytes$Decode$loop = F2(
	function (state, callback) {
		return $elm$bytes$Bytes$Decode$Decoder(
			A2($elm$bytes$Bytes$Decode$loopHelp, state, callback));
	});
var $MartinSStewart$elm_serialize$Serialize$list = function (codec) {
	return A4(
		$MartinSStewart$elm_serialize$Serialize$build,
		$MartinSStewart$elm_serialize$Serialize$listEncode(
			$MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper(codec)),
		A2(
			$elm$bytes$Bytes$Decode$andThen,
			function (length) {
				return A2(
					$elm$bytes$Bytes$Decode$loop,
					_Utils_Tuple2(length, _List_Nil),
					$MartinSStewart$elm_serialize$Serialize$listStep(
						$MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper(codec)));
			},
			$elm$bytes$Bytes$Decode$unsignedInt32($MartinSStewart$elm_serialize$Serialize$endian)),
		$elm$json$Json$Encode$list(
			$MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper(codec)),
		A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$List$foldr,
				F2(
					function (value, state) {
						var _v0 = _Utils_Tuple2(value, state);
						if (_v0.b.$ === 'Err') {
							return state;
						} else {
							if (_v0.a.$ === 'Ok') {
								var ok = _v0.a.a;
								var okState = _v0.b.a;
								return $elm$core$Result$Ok(
									A2($elm$core$List$cons, ok, okState));
							} else {
								var error = _v0.a.a;
								return $elm$core$Result$Err(error);
							}
						}
					}),
				$elm$core$Result$Ok(_List_Nil)),
			$elm$json$Json$Decode$list(
				$MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(codec))));
};
var $author$project$MarkdownCodec$listSpacingCodec = $MartinSStewart$elm_serialize$Serialize$finishCustomType(
	A2(
		$MartinSStewart$elm_serialize$Serialize$variant0,
		$dillonkearns$elm_markdown$Markdown$Block$Tight,
		A2(
			$MartinSStewart$elm_serialize$Serialize$variant0,
			$dillonkearns$elm_markdown$Markdown$Block$Loose,
			$MartinSStewart$elm_serialize$Serialize$customType(
				F3(
					function (vLoose, vTight, value) {
						if (value.$ === 'Loose') {
							return vLoose;
						} else {
							return vTight;
						}
					})))));
var $MartinSStewart$elm_serialize$Serialize$result1 = F2(
	function (ctor, value) {
		if (value.$ === 'Ok') {
			var ok = value.a;
			return $elm$core$Result$Ok(
				ctor(ok));
		} else {
			var err = value.a;
			return $elm$core$Result$Err(err);
		}
	});
var $MartinSStewart$elm_serialize$Serialize$variant1 = F2(
	function (ctor, m1) {
		return A4(
			$MartinSStewart$elm_serialize$Serialize$variant,
			F2(
				function (c, v) {
					return c(
						_List_fromArray(
							[
								A2($MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper, m1, v)
							]));
				}),
			F2(
				function (c, v) {
					return c(
						_List_fromArray(
							[
								A2($MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper, m1, v)
							]));
				}),
			A2(
				$elm$bytes$Bytes$Decode$map,
				$MartinSStewart$elm_serialize$Serialize$result1(ctor),
				$MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper(m1)),
			A2(
				$elm$json$Json$Decode$map,
				$MartinSStewart$elm_serialize$Serialize$result1(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(m1))));
	});
var $MartinSStewart$elm_serialize$Serialize$maybe = function (justCodec) {
	return $MartinSStewart$elm_serialize$Serialize$finishCustomType(
		A3(
			$MartinSStewart$elm_serialize$Serialize$variant1,
			$elm$core$Maybe$Just,
			justCodec,
			A2(
				$MartinSStewart$elm_serialize$Serialize$variant0,
				$elm$core$Maybe$Nothing,
				$MartinSStewart$elm_serialize$Serialize$customType(
					F3(
						function (nothingEncoder, justEncoder, value) {
							if (value.$ === 'Nothing') {
								return nothingEncoder;
							} else {
								var value_ = value.a;
								return justEncoder(value_);
							}
						})))));
};
var $author$project$MarkdownCodec$taskCodec = $MartinSStewart$elm_serialize$Serialize$finishCustomType(
	A2(
		$MartinSStewart$elm_serialize$Serialize$variant0,
		$dillonkearns$elm_markdown$Markdown$Block$CompletedTask,
		A2(
			$MartinSStewart$elm_serialize$Serialize$variant0,
			$dillonkearns$elm_markdown$Markdown$Block$IncompleteTask,
			A2(
				$MartinSStewart$elm_serialize$Serialize$variant0,
				$dillonkearns$elm_markdown$Markdown$Block$NoTask,
				$MartinSStewart$elm_serialize$Serialize$customType(
					F4(
						function (encodeNoTask, encodeIncompleteTask, encodeCompletedTask, value) {
							switch (value.$) {
								case 'NoTask':
									return encodeNoTask;
								case 'IncompleteTask':
									return encodeIncompleteTask;
								default:
									return encodeCompletedTask;
							}
						}))))));
var $MartinSStewart$elm_serialize$Serialize$result2 = F3(
	function (ctor, v1, v2) {
		var _v0 = _Utils_Tuple2(v1, v2);
		if (_v0.a.$ === 'Ok') {
			if (_v0.b.$ === 'Ok') {
				var ok1 = _v0.a.a;
				var ok2 = _v0.b.a;
				return $elm$core$Result$Ok(
					A2(ctor, ok1, ok2));
			} else {
				var err = _v0.b.a;
				return $elm$core$Result$Err(err);
			}
		} else {
			var err = _v0.a.a;
			return $elm$core$Result$Err(err);
		}
	});
var $MartinSStewart$elm_serialize$Serialize$variant2 = F3(
	function (ctor, m1, m2) {
		return A4(
			$MartinSStewart$elm_serialize$Serialize$variant,
			F3(
				function (c, v1, v2) {
					return c(
						_List_fromArray(
							[
								A2($MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper, m1, v1),
								A2($MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper, m2, v2)
							]));
				}),
			F3(
				function (c, v1, v2) {
					return c(
						_List_fromArray(
							[
								A2($MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper, m1, v1),
								A2($MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper, m2, v2)
							]));
				}),
			A3(
				$elm$bytes$Bytes$Decode$map2,
				$MartinSStewart$elm_serialize$Serialize$result2(ctor),
				$MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper(m1),
				$MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper(m2)),
			A3(
				$elm$json$Json$Decode$map2,
				$MartinSStewart$elm_serialize$Serialize$result2(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(m1)),
				A2(
					$elm$json$Json$Decode$index,
					2,
					$MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(m2))));
	});
var $elm$bytes$Bytes$Decode$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var decodeA = _v0.a;
		var decodeB = _v1.a;
		var decodeC = _v2.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v3 = A2(decodeA, bites, offset);
					var aOffset = _v3.a;
					var a = _v3.b;
					var _v4 = A2(decodeB, bites, aOffset);
					var bOffset = _v4.a;
					var b = _v4.b;
					var _v5 = A2(decodeC, bites, bOffset);
					var cOffset = _v5.a;
					var c = _v5.b;
					return _Utils_Tuple2(
						cOffset,
						A3(func, a, b, c));
				}));
	});
var $MartinSStewart$elm_serialize$Serialize$result3 = F4(
	function (ctor, v1, v2, v3) {
		var _v0 = _Utils_Tuple3(v1, v2, v3);
		if (_v0.a.$ === 'Ok') {
			if (_v0.b.$ === 'Ok') {
				if (_v0.c.$ === 'Ok') {
					var ok1 = _v0.a.a;
					var ok2 = _v0.b.a;
					var ok3 = _v0.c.a;
					return $elm$core$Result$Ok(
						A3(ctor, ok1, ok2, ok3));
				} else {
					var err = _v0.c.a;
					return $elm$core$Result$Err(err);
				}
			} else {
				var err = _v0.b.a;
				return $elm$core$Result$Err(err);
			}
		} else {
			var err = _v0.a.a;
			return $elm$core$Result$Err(err);
		}
	});
var $MartinSStewart$elm_serialize$Serialize$variant3 = F4(
	function (ctor, m1, m2, m3) {
		return A4(
			$MartinSStewart$elm_serialize$Serialize$variant,
			F4(
				function (c, v1, v2, v3) {
					return c(
						_List_fromArray(
							[
								A2($MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper, m1, v1),
								A2($MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper, m2, v2),
								A2($MartinSStewart$elm_serialize$Serialize$getBytesEncoderHelper, m3, v3)
							]));
				}),
			F4(
				function (c, v1, v2, v3) {
					return c(
						_List_fromArray(
							[
								A2($MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper, m1, v1),
								A2($MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper, m2, v2),
								A2($MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper, m3, v3)
							]));
				}),
			A4(
				$elm$bytes$Bytes$Decode$map3,
				$MartinSStewart$elm_serialize$Serialize$result3(ctor),
				$MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper(m1),
				$MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper(m2),
				$MartinSStewart$elm_serialize$Serialize$getBytesDecoderHelper(m3)),
			A4(
				$elm$json$Json$Decode$map3,
				$MartinSStewart$elm_serialize$Serialize$result3(ctor),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(m1)),
				A2(
					$elm$json$Json$Decode$index,
					2,
					$MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(m2)),
				A2(
					$elm$json$Json$Decode$index,
					3,
					$MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(m3))));
	});
function $author$project$MarkdownCodec$cyclic$codec() {
	return $MartinSStewart$elm_serialize$Serialize$finishCustomType(
		A3(
			$MartinSStewart$elm_serialize$Serialize$variant1,
			$dillonkearns$elm_markdown$Markdown$Block$CodeBlock,
			$MartinSStewart$elm_serialize$Serialize$finishRecord(
				A3(
					$MartinSStewart$elm_serialize$Serialize$field,
					function ($) {
						return $.language;
					},
					$MartinSStewart$elm_serialize$Serialize$maybe($MartinSStewart$elm_serialize$Serialize$string),
					A3(
						$MartinSStewart$elm_serialize$Serialize$field,
						function ($) {
							return $.body;
						},
						$MartinSStewart$elm_serialize$Serialize$string,
						$MartinSStewart$elm_serialize$Serialize$record(
							F2(
								function (body, language) {
									return {body: body, language: language};
								}))))),
			A4(
				$MartinSStewart$elm_serialize$Serialize$variant2,
				$dillonkearns$elm_markdown$Markdown$Block$Table,
				$author$project$MarkdownCodec$cyclic$tableHeaderCodec(),
				$MartinSStewart$elm_serialize$Serialize$list(
					$MartinSStewart$elm_serialize$Serialize$list(
						$MartinSStewart$elm_serialize$Serialize$list(
							$author$project$MarkdownCodec$cyclic$inlineCodec()))),
				A3(
					$MartinSStewart$elm_serialize$Serialize$variant1,
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph,
					$MartinSStewart$elm_serialize$Serialize$list(
						$author$project$MarkdownCodec$cyclic$inlineCodec()),
					A4(
						$MartinSStewart$elm_serialize$Serialize$variant2,
						$dillonkearns$elm_markdown$Markdown$Block$Heading,
						$author$project$MarkdownCodec$headingCodec,
						$MartinSStewart$elm_serialize$Serialize$list(
							$author$project$MarkdownCodec$cyclic$inlineCodec()),
						A3(
							$MartinSStewart$elm_serialize$Serialize$variant1,
							$dillonkearns$elm_markdown$Markdown$Block$BlockQuote,
							$MartinSStewart$elm_serialize$Serialize$list(
								$MartinSStewart$elm_serialize$Serialize$lazy(
									function (_v12) {
										return $author$project$MarkdownCodec$cyclic$codec();
									})),
							A5(
								$MartinSStewart$elm_serialize$Serialize$variant3,
								$dillonkearns$elm_markdown$Markdown$Block$OrderedList,
								$author$project$MarkdownCodec$listSpacingCodec,
								$MartinSStewart$elm_serialize$Serialize$int,
								$MartinSStewart$elm_serialize$Serialize$list(
									$MartinSStewart$elm_serialize$Serialize$list(
										$MartinSStewart$elm_serialize$Serialize$lazy(
											function (_v11) {
												return $author$project$MarkdownCodec$cyclic$codec();
											}))),
								A4(
									$MartinSStewart$elm_serialize$Serialize$variant2,
									$dillonkearns$elm_markdown$Markdown$Block$UnorderedList,
									$author$project$MarkdownCodec$listSpacingCodec,
									$MartinSStewart$elm_serialize$Serialize$list(
										$author$project$MarkdownCodec$cyclic$listItemCodec()),
									A3(
										$MartinSStewart$elm_serialize$Serialize$variant1,
										$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock,
										$author$project$MarkdownCodec$cyclic$htmlCodec(),
										A2(
											$MartinSStewart$elm_serialize$Serialize$variant0,
											$dillonkearns$elm_markdown$Markdown$Block$ThematicBreak,
											$MartinSStewart$elm_serialize$Serialize$customType(
												function (encodeThematicBreak) {
													return function (encodeHtmlBlock) {
														return function (encodeUnorderedList) {
															return function (encodeOrderedList) {
																return function (encodeBlockQuote) {
																	return function (encodeHeading) {
																		return function (encodeParagraph) {
																			return function (encodeTable) {
																				return function (encodeCodeBlock) {
																					return function (value) {
																						switch (value.$) {
																							case 'ThematicBreak':
																								return encodeThematicBreak;
																							case 'HtmlBlock':
																								var html = value.a;
																								return encodeHtmlBlock(html);
																							case 'UnorderedList':
																								var listSpacing = value.a;
																								var listItems = value.b;
																								return A2(encodeUnorderedList, listSpacing, listItems);
																							case 'OrderedList':
																								var listSpacing = value.a;
																								var _int = value.b;
																								var lists = value.c;
																								return A3(encodeOrderedList, listSpacing, _int, lists);
																							case 'BlockQuote':
																								var blocks = value.a;
																								return encodeBlockQuote(blocks);
																							case 'Heading':
																								var headingLevel = value.a;
																								var inlines = value.b;
																								return A2(encodeHeading, headingLevel, inlines);
																							case 'Paragraph':
																								var inlines = value.a;
																								return encodeParagraph(inlines);
																							case 'Table':
																								var header = value.a;
																								var rows = value.b;
																								return A2(encodeTable, header, rows);
																							default:
																								var record = value.a;
																								return encodeCodeBlock(record);
																						}
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												})))))))))));
}
function $author$project$MarkdownCodec$cyclic$tableHeaderCodec() {
	return $MartinSStewart$elm_serialize$Serialize$list(
		$MartinSStewart$elm_serialize$Serialize$finishRecord(
			A3(
				$MartinSStewart$elm_serialize$Serialize$field,
				function ($) {
					return $.alignment;
				},
				$MartinSStewart$elm_serialize$Serialize$maybe($author$project$MarkdownCodec$alignmentCodec),
				A3(
					$MartinSStewart$elm_serialize$Serialize$field,
					function ($) {
						return $.label;
					},
					$MartinSStewart$elm_serialize$Serialize$list(
						$author$project$MarkdownCodec$cyclic$inlineCodec()),
					$MartinSStewart$elm_serialize$Serialize$record(
						F2(
							function (label, alignment) {
								return {alignment: alignment, label: label};
							}))))));
}
function $author$project$MarkdownCodec$cyclic$inlineCodec() {
	return $MartinSStewart$elm_serialize$Serialize$finishCustomType(
		A3(
			$MartinSStewart$elm_serialize$Serialize$variant1,
			$dillonkearns$elm_markdown$Markdown$Block$Text,
			$MartinSStewart$elm_serialize$Serialize$string,
			A3(
				$MartinSStewart$elm_serialize$Serialize$variant1,
				$dillonkearns$elm_markdown$Markdown$Block$CodeSpan,
				$MartinSStewart$elm_serialize$Serialize$string,
				A3(
					$MartinSStewart$elm_serialize$Serialize$variant1,
					$dillonkearns$elm_markdown$Markdown$Block$Strikethrough,
					$MartinSStewart$elm_serialize$Serialize$list(
						$MartinSStewart$elm_serialize$Serialize$lazy(
							function (_v9) {
								return $author$project$MarkdownCodec$cyclic$inlineCodec();
							})),
					A3(
						$MartinSStewart$elm_serialize$Serialize$variant1,
						$dillonkearns$elm_markdown$Markdown$Block$Strong,
						$MartinSStewart$elm_serialize$Serialize$list(
							$MartinSStewart$elm_serialize$Serialize$lazy(
								function (_v8) {
									return $author$project$MarkdownCodec$cyclic$inlineCodec();
								})),
						A3(
							$MartinSStewart$elm_serialize$Serialize$variant1,
							$dillonkearns$elm_markdown$Markdown$Block$Emphasis,
							$MartinSStewart$elm_serialize$Serialize$list(
								$MartinSStewart$elm_serialize$Serialize$lazy(
									function (_v7) {
										return $author$project$MarkdownCodec$cyclic$inlineCodec();
									})),
							A5(
								$MartinSStewart$elm_serialize$Serialize$variant3,
								$dillonkearns$elm_markdown$Markdown$Block$Image,
								$MartinSStewart$elm_serialize$Serialize$string,
								$MartinSStewart$elm_serialize$Serialize$maybe($MartinSStewart$elm_serialize$Serialize$string),
								$MartinSStewart$elm_serialize$Serialize$list(
									$MartinSStewart$elm_serialize$Serialize$lazy(
										function (_v6) {
											return $author$project$MarkdownCodec$cyclic$inlineCodec();
										})),
								A5(
									$MartinSStewart$elm_serialize$Serialize$variant3,
									$dillonkearns$elm_markdown$Markdown$Block$Link,
									$MartinSStewart$elm_serialize$Serialize$string,
									$MartinSStewart$elm_serialize$Serialize$maybe($MartinSStewart$elm_serialize$Serialize$string),
									$MartinSStewart$elm_serialize$Serialize$list(
										$MartinSStewart$elm_serialize$Serialize$lazy(
											function (_v5) {
												return $author$project$MarkdownCodec$cyclic$inlineCodec();
											})),
									A3(
										$MartinSStewart$elm_serialize$Serialize$variant1,
										$dillonkearns$elm_markdown$Markdown$Block$HtmlInline,
										$author$project$MarkdownCodec$cyclic$htmlCodec(),
										A2(
											$MartinSStewart$elm_serialize$Serialize$variant0,
											$dillonkearns$elm_markdown$Markdown$Block$HardLineBreak,
											$MartinSStewart$elm_serialize$Serialize$customType(
												function (encodeHardLineBreak) {
													return function (encodeHtmlInline) {
														return function (encodeLink) {
															return function (encodeImage) {
																return function (encodeEmphasis) {
																	return function (encodeStrong) {
																		return function (encodeStrikethrough) {
																			return function (encodeCodeSpan) {
																				return function (encodeText) {
																					return function (value) {
																						switch (value.$) {
																							case 'HardLineBreak':
																								return encodeHardLineBreak;
																							case 'HtmlInline':
																								var html = value.a;
																								return encodeHtmlInline(html);
																							case 'Link':
																								var string = value.a;
																								var maybeString = value.b;
																								var inlines = value.c;
																								return A3(encodeLink, string, maybeString, inlines);
																							case 'Image':
																								var string = value.a;
																								var maybeString = value.b;
																								var inlines = value.c;
																								return A3(encodeImage, string, maybeString, inlines);
																							case 'Emphasis':
																								var inlines = value.a;
																								return encodeEmphasis(inlines);
																							case 'Strong':
																								var inlines = value.a;
																								return encodeStrong(inlines);
																							case 'Strikethrough':
																								var inlines = value.a;
																								return encodeStrikethrough(inlines);
																							case 'CodeSpan':
																								var string = value.a;
																								return encodeCodeSpan(string);
																							default:
																								var string = value.a;
																								return encodeText(string);
																						}
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												})))))))))));
}
function $author$project$MarkdownCodec$cyclic$htmlCodec() {
	return $MartinSStewart$elm_serialize$Serialize$finishCustomType(
		A3(
			$MartinSStewart$elm_serialize$Serialize$variant1,
			$dillonkearns$elm_markdown$Markdown$Block$Cdata,
			$MartinSStewart$elm_serialize$Serialize$string,
			A4(
				$MartinSStewart$elm_serialize$Serialize$variant2,
				$dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration,
				$MartinSStewart$elm_serialize$Serialize$string,
				$MartinSStewart$elm_serialize$Serialize$string,
				A3(
					$MartinSStewart$elm_serialize$Serialize$variant1,
					$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction,
					$MartinSStewart$elm_serialize$Serialize$string,
					A3(
						$MartinSStewart$elm_serialize$Serialize$variant1,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlComment,
						$MartinSStewart$elm_serialize$Serialize$string,
						A5(
							$MartinSStewart$elm_serialize$Serialize$variant3,
							$dillonkearns$elm_markdown$Markdown$Block$HtmlElement,
							$MartinSStewart$elm_serialize$Serialize$string,
							$MartinSStewart$elm_serialize$Serialize$list($author$project$MarkdownCodec$htmlAttributeCodec),
							$MartinSStewart$elm_serialize$Serialize$list(
								$MartinSStewart$elm_serialize$Serialize$lazy(
									function (_v3) {
										return $author$project$MarkdownCodec$cyclic$codec();
									})),
							$MartinSStewart$elm_serialize$Serialize$customType(
								F6(
									function (encodeHtmlElement, encodeHtmlComment, encodeProcessingInstruction, encodeHtmlDeclaration, encodeCdata, value) {
										switch (value.$) {
											case 'HtmlElement':
												var tag = value.a;
												var attributes = value.b;
												var children = value.c;
												return A3(encodeHtmlElement, tag, attributes, children);
											case 'HtmlComment':
												var comment = value.a;
												return encodeHtmlComment(comment);
											case 'ProcessingInstruction':
												var string = value.a;
												return encodeProcessingInstruction(string);
											case 'HtmlDeclaration':
												var string1 = value.a;
												var string2 = value.b;
												return A2(encodeHtmlDeclaration, string1, string2);
											default:
												var string = value.a;
												return encodeCdata(string);
										}
									}))))))));
}
function $author$project$MarkdownCodec$cyclic$listItemCodec() {
	return $MartinSStewart$elm_serialize$Serialize$finishCustomType(
		A4(
			$MartinSStewart$elm_serialize$Serialize$variant2,
			$dillonkearns$elm_markdown$Markdown$Block$ListItem,
			$author$project$MarkdownCodec$taskCodec,
			$MartinSStewart$elm_serialize$Serialize$list(
				$MartinSStewart$elm_serialize$Serialize$lazy(
					function (_v1) {
						return $author$project$MarkdownCodec$cyclic$codec();
					})),
			$MartinSStewart$elm_serialize$Serialize$customType(
				F2(
					function (encodeListItem, value) {
						var task = value.a;
						var children = value.b;
						return A2(encodeListItem, task, children);
					}))));
}
try {
	var $author$project$MarkdownCodec$codec = $author$project$MarkdownCodec$cyclic$codec();
	$author$project$MarkdownCodec$cyclic$codec = function () {
		return $author$project$MarkdownCodec$codec;
	};
	var $author$project$MarkdownCodec$tableHeaderCodec = $author$project$MarkdownCodec$cyclic$tableHeaderCodec();
	$author$project$MarkdownCodec$cyclic$tableHeaderCodec = function () {
		return $author$project$MarkdownCodec$tableHeaderCodec;
	};
	var $author$project$MarkdownCodec$inlineCodec = $author$project$MarkdownCodec$cyclic$inlineCodec();
	$author$project$MarkdownCodec$cyclic$inlineCodec = function () {
		return $author$project$MarkdownCodec$inlineCodec;
	};
	var $author$project$MarkdownCodec$htmlCodec = $author$project$MarkdownCodec$cyclic$htmlCodec();
	$author$project$MarkdownCodec$cyclic$htmlCodec = function () {
		return $author$project$MarkdownCodec$htmlCodec;
	};
	var $author$project$MarkdownCodec$listItemCodec = $author$project$MarkdownCodec$cyclic$listItemCodec();
	$author$project$MarkdownCodec$cyclic$listItemCodec = function () {
		return $author$project$MarkdownCodec$listItemCodec;
	};
} catch ($) {
	throw 'Some top-level definitions from `MarkdownCodec` are causing infinite recursion:\n\n  ┌─────┐\n  │    codec\n  │     ↓\n  │    tableHeaderCodec\n  │     ↓\n  │    inlineCodec\n  │     ↓\n  │    htmlCodec\n  │     ↓\n  │    listItemCodec\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $MartinSStewart$elm_serialize$Serialize$SerializerOutOfDate = {$: 'SerializerOutOfDate'};
var $MartinSStewart$elm_serialize$Serialize$version = 1;
var $MartinSStewart$elm_serialize$Serialize$decodeFromJson = F2(
	function (codec, json) {
		var decoder = A2(
			$elm$json$Json$Decode$andThen,
			function (value) {
				return (value <= 0) ? $elm$json$Json$Decode$succeed(
					$elm$core$Result$Err($MartinSStewart$elm_serialize$Serialize$DataCorrupted)) : (_Utils_eq(value, $MartinSStewart$elm_serialize$Serialize$version) ? A2(
					$elm$json$Json$Decode$index,
					1,
					$MartinSStewart$elm_serialize$Serialize$getJsonDecoderHelper(codec)) : $elm$json$Json$Decode$succeed(
					$elm$core$Result$Err($MartinSStewart$elm_serialize$Serialize$SerializerOutOfDate)));
			},
			A2($elm$json$Json$Decode$index, 0, $elm$json$Json$Decode$int));
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, json);
		if (_v0.$ === 'Ok') {
			var value = _v0.a;
			return value;
		} else {
			return $elm$core$Result$Err($MartinSStewart$elm_serialize$Serialize$DataCorrupted);
		}
	});
var $dillonkearns$elm_pages$KeepOrDiscard$Discard = {$: 'Discard'};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$UserCalledStaticHttpFail = function (a) {
	return {$: 'UserCalledStaticHttpFail', a: a};
};
var $dillonkearns$elm_pages$DataSource$fail = function (errorMessage) {
	return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(
		$dillonkearns$elm_pages$Pages$StaticHttpRequest$UserCalledStaticHttpFail(errorMessage));
};
var $dillonkearns$elm_pages$DataSource$fromResult = function (result) {
	if (result.$ === 'Ok') {
		var okValue = result.a;
		return $dillonkearns$elm_pages$DataSource$succeed(okValue);
	} else {
		var error = result.a;
		return $dillonkearns$elm_pages$DataSource$fail(error);
	}
};
var $dillonkearns$elm_pages$DataSource$toResult = function (result) {
	if (result.$ === 'Err') {
		var error = result.a;
		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
	} else {
		var _v1 = result.a;
		var stripped = _v1.a;
		var okValue = _v1.b;
		return A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, stripped, okValue);
	}
};
var $dillonkearns$elm_pages$DataSource$distill = F4(
	function (uniqueKey, encode, decode, dataSource) {
		switch (dataSource.$) {
			case 'RequestError':
				var error = dataSource.a;
				return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
			case 'Request':
				var partiallyStripped = dataSource.a;
				var _v1 = dataSource.b;
				var urls = _v1.a;
				var lookupFn = _v1.b;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					partiallyStripped,
					_Utils_Tuple2(
						urls,
						F3(
							function (_v2, appType, rawResponses) {
								if (appType.$ === 'Browser') {
									return $dillonkearns$elm_pages$DataSource$toResult(
										function (maybeResponse) {
											if (maybeResponse.$ === 'Just') {
												var rawResponse = maybeResponse.a;
												return A2(
													$elm$core$Result$map,
													$elm$core$Tuple$pair($elm$core$Dict$empty),
													A2(
														$elm$core$Result$mapError,
														$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError,
														A2(
															$elm$core$Result$andThen,
															decode,
															A2(
																$elm$core$Result$mapError,
																$elm$json$Json$Decode$errorToString,
																A2($elm$json$Json$Decode$decodeString, $elm$json$Json$Decode$value, rawResponse)))));
											} else {
												return $elm$core$Result$Err(
													A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse, 'distill://' + uniqueKey, _List_Nil));
											}
										}(
											A2($dillonkearns$elm_pages$RequestsAndPending$get, uniqueKey, rawResponses)));
								} else {
									return A4(
										$dillonkearns$elm_pages$DataSource$distill,
										uniqueKey,
										encode,
										decode,
										A3(lookupFn, $dillonkearns$elm_pages$KeepOrDiscard$Discard, appType, rawResponses));
								}
							})));
			default:
				var strippedResponses = dataSource.a;
				var value = dataSource.b;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					A3(
						$elm$core$Dict$insert,
						uniqueKey,
						$dillonkearns$elm_pages$Pages$StaticHttpRequest$DistilledResponse(
							encode(value)),
						strippedResponses),
					_Utils_Tuple2(
						_List_Nil,
						F3(
							function (_v5, _v6, _v7) {
								return $dillonkearns$elm_pages$DataSource$fromResult(
									decode(
										encode(value)));
							})));
		}
	});
var $MartinSStewart$elm_serialize$Serialize$encodeToJson = F2(
	function (codec, value) {
		return A2(
			$elm$json$Json$Encode$list,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$json$Json$Encode$int($MartinSStewart$elm_serialize$Serialize$version),
					A2($MartinSStewart$elm_serialize$Serialize$getJsonEncoderHelper, codec, value)
				]));
	});
var $dillonkearns$elm_pages$DataSource$distillSerializeCodec = F2(
	function (uniqueKey, serializeCodec) {
		return A3(
			$dillonkearns$elm_pages$DataSource$distill,
			uniqueKey,
			$MartinSStewart$elm_serialize$Serialize$encodeToJson(serializeCodec),
			A2(
				$elm$core$Basics$composeR,
				$MartinSStewart$elm_serialize$Serialize$decodeFromJson(serializeCodec),
				$elm$core$Result$mapError(
					function (error) {
						switch (error.$) {
							case 'DataCorrupted':
								return 'DataCorrupted';
							case 'CustomError':
								return 'CustomError';
							default:
								return 'SerializerOutOfDate';
						}
					})));
	});
var $dillonkearns$elm_pages$DataSource$File$frontmatter = function (frontmatterDecoder) {
	return A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'parsedFrontmatter', frontmatterDecoder);
};
var $dillonkearns$elm_pages$DataSource$File$onlyFrontmatter = F2(
	function (frontmatterDecoder, filePath) {
		return A2(
			$dillonkearns$elm_pages$DataSource$File$read,
			filePath,
			$dillonkearns$elm_pages$DataSource$File$frontmatter(frontmatterDecoder));
	});
var $author$project$MarkdownCodec$withFrontmatter = F4(
	function (constructor, frontmatterDecoder, renderer, filePath) {
		return A3(
			$dillonkearns$elm_pages$DataSource$map2,
			constructor,
			A2($dillonkearns$elm_pages$DataSource$File$onlyFrontmatter, frontmatterDecoder, filePath),
			A2(
				$dillonkearns$elm_pages$DataSource$andThen,
				function (blocks) {
					return $dillonkearns$elm_pages$DataSource$fromResult(
						A2($dillonkearns$elm_markdown$Markdown$Renderer$render, renderer, blocks));
				},
				A3(
					$dillonkearns$elm_pages$DataSource$distillSerializeCodec,
					'markdown-blocks-' + filePath,
					$MartinSStewart$elm_serialize$Serialize$list($author$project$MarkdownCodec$codec),
					A2(
						$dillonkearns$elm_pages$DataSource$andThen,
						function (rawBody) {
							return $dillonkearns$elm_pages$DataSource$fromResult(
								A2(
									$elm$core$Result$mapError,
									function (_v0) {
										return 'Couldn\'t parse markdown.';
									},
									$dillonkearns$elm_markdown$Markdown$Parser$parse(rawBody)));
						},
						$dillonkearns$elm_pages$DataSource$File$bodyWithoutFrontmatter(filePath)))));
	});
var $author$project$Page$Facilities$data = $dillonkearns$elm_pages$DataSource$resolve(
	A2(
		$dillonkearns$elm_pages$DataSource$map,
		function (contentList) {
			return A2(
				$elm$core$List$map,
				function (content) {
					return A4($author$project$MarkdownCodec$withFrontmatter, $author$project$Page$Facilities$Section, $author$project$Page$Facilities$frontmatterDecoder, $author$project$TailwindMarkdownRenderer$renderer, 'content/facilities/' + (content + '.md'));
				},
				contentList);
		},
		$author$project$Page$Facilities$facilitiesGlob));
var $author$project$Page$Facilities$head = function (_v0) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summaryLarge(
			_Utils_update(
				$author$project$Site$commonSeo,
				{title: 'Aspargesgården | Muligheter'})));
};
var $author$project$Tailwind$Utilities$bg_brown = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(183, 168, 162, var(--tw-bg-opacity))')
		]));
var $author$project$Tailwind$Utilities$bg_opacity_20 = A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.2');
var $author$project$Tailwind$Utilities$flex_row_reverse = A2($rtfeldman$elm_css$Css$property, 'flex-direction', 'row-reverse');
var $author$project$Tailwind$Utilities$float_right = A2($rtfeldman$elm_css$Css$property, 'float', 'right');
var $author$project$Tailwind$Utilities$h_48 = A2($rtfeldman$elm_css$Css$property, 'height', '12rem');
var $author$project$Tailwind$Utilities$h_auto = A2($rtfeldman$elm_css$Css$property, 'height', 'auto');
var $author$project$Tailwind$Utilities$h_full = A2($rtfeldman$elm_css$Css$property, 'height', '100%');
var $author$project$Tailwind$Utilities$absolute = A2($rtfeldman$elm_css$Css$property, 'position', 'absolute');
var $author$project$Tailwind$Utilities$bottom_0 = A2($rtfeldman$elm_css$Css$property, 'bottom', '0px');
var $rtfeldman$elm_css$Css$Structure$Descendant = {$: 'Descendant'};
var $rtfeldman$elm_css$Css$Preprocess$NestSnippet = F2(
	function (a, b) {
		return {$: 'NestSnippet', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Global$descendants = $rtfeldman$elm_css$Css$Preprocess$NestSnippet($rtfeldman$elm_css$Css$Structure$Descendant);
var $rtfeldman$elm_css$Css$Structure$PseudoClassSelector = function (a) {
	return {$: 'PseudoClassSelector', a: a};
};
var $rtfeldman$elm_css$Css$pseudoClass = function (_class) {
	return $rtfeldman$elm_css$Css$Preprocess$ExtendSelector(
		$rtfeldman$elm_css$Css$Structure$PseudoClassSelector(_class));
};
var $rtfeldman$elm_css$Css$hover = $rtfeldman$elm_css$Css$pseudoClass('hover');
var $author$project$Tailwind$Utilities$items_end = A2($rtfeldman$elm_css$Css$property, 'align-items', 'flex-end');
var $author$project$Tailwind$Utilities$justify_around = A2($rtfeldman$elm_css$Css$property, 'justify-content', 'space-around');
var $author$project$Tailwind$Utilities$left_0 = A2($rtfeldman$elm_css$Css$property, 'left', '0px');
var $author$project$Tailwind$Utilities$opacity_0 = A2($rtfeldman$elm_css$Css$property, 'opacity', '0');
var $author$project$Tailwind$Utilities$opacity_100 = A2($rtfeldman$elm_css$Css$property, 'opacity', '1');
var $rtfeldman$elm_css$Html$Styled$Attributes$rel = $rtfeldman$elm_css$VirtualDom$Styled$attribute('rel');
var $rtfeldman$elm_css$Html$Styled$Attributes$target = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('target');
var $author$project$View$Misc$photographerLink = F2(
	function (photographer, prefix) {
		var _v0 = photographer.website;
		if (_v0 === '') {
			return $rtfeldman$elm_css$Html$Styled$text(prefix + (' ' + photographer.name));
		} else {
			var website = _v0;
			return A2(
				$rtfeldman$elm_css$Html$Styled$a,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$href(website),
						$rtfeldman$elm_css$Html$Styled$Attributes$target('_blank'),
						$rtfeldman$elm_css$Html$Styled$Attributes$rel('noopener noreferrer')
					]),
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$text(prefix + (' ' + photographer.name))
					]));
		}
	});
var $author$project$Tailwind$Utilities$relative = A2($rtfeldman$elm_css$Css$property, 'position', 'relative');
var $author$project$View$Misc$imgTypes = _List_fromArray(
	['avif', 'webp', 'jpeg']);
var $author$project$View$Misc$imgSizes = _List_fromArray(
	[2048, 1536, 1280, 1024, 768, 640, 320]);
var $author$project$View$Misc$responsiveImageFile = F3(
	function (basePath, size, extension) {
		return A3(
			$jorgengranseth$elm_string_format$String$Format$namedValue,
			'extension',
			extension,
			A3(
				$jorgengranseth$elm_string_format$String$Format$namedValue,
				'size',
				$elm$core$String$fromInt(size),
				A3($jorgengranseth$elm_string_format$String$Format$namedValue, 'basePath', basePath, '{{ basePath }}_{{ size }}w_resize.{{ extension }}')));
	});
var $author$project$View$Misc$responsiveSrcSet = F3(
	function (basePath, imageType, sizes) {
		return A2(
			$elm$core$String$join,
			', ',
			A2(
				$elm$core$List$append,
				_List_fromArray(
					[
						A3($author$project$View$Misc$responsiveImageFile, basePath, 2048, imageType)
					]),
				A2(
					$elm$core$List$map,
					function (size) {
						return A3(
							$jorgengranseth$elm_string_format$String$Format$namedValue,
							'size',
							$elm$core$String$fromInt(size),
							A3(
								$jorgengranseth$elm_string_format$String$Format$namedValue,
								'path',
								A3($author$project$View$Misc$responsiveImageFile, basePath, size, imageType),
								'/{{ path }} {{ size }}w'));
					},
					sizes)));
	});
var $rtfeldman$elm_css$Html$Styled$source = $rtfeldman$elm_css$Html$Styled$node('source');
var $author$project$View$Misc$responsiveSource = F2(
	function (basePath, imageType) {
		var sources = A3($author$project$View$Misc$responsiveSrcSet, basePath, imageType, $author$project$View$Misc$imgSizes);
		var mimeType = A3($jorgengranseth$elm_string_format$String$Format$namedValue, 'type', imageType, 'image/{{ type }}');
		return A2(
			$rtfeldman$elm_css$Html$Styled$source,
			_List_fromArray(
				[
					A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'srcset', sources),
					$rtfeldman$elm_css$Html$Styled$Attributes$type_(mimeType)
				]),
			_List_Nil);
	});
var $author$project$View$Misc$responsiveImg = F2(
	function (attrs, basePath) {
		var sources = A2(
			$elm$core$List$map,
			function (imageType) {
				return A2($author$project$View$Misc$responsiveSource, basePath, imageType);
			},
			$author$project$View$Misc$imgTypes);
		var fallback = A2($rtfeldman$elm_css$Html$Styled$img, attrs, _List_Nil);
		return A3(
			$rtfeldman$elm_css$Html$Styled$node,
			'picture',
			attrs,
			_Utils_ap(
				sources,
				_List_fromArray(
					[fallback])));
	});
var $author$project$Tailwind$Utilities$right_0 = A2($rtfeldman$elm_css$Css$property, 'right', '0px');
var $rtfeldman$elm_css$Css$Global$selector = F2(
	function (selectorStr, styles) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$makeSnippet,
			styles,
			A2($rtfeldman$elm_css$Css$Structure$CustomSelector, selectorStr, _List_Nil));
	});
var $author$project$Tailwind$Utilities$text_black = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(0, 0, 0, var(--tw-text-opacity))')
		]));
var $author$project$Tailwind$Utilities$z_10 = A2($rtfeldman$elm_css$Css$property, 'z-index', '10');
var $author$project$View$Misc$imgWithPhotographer = F4(
	function (attr, imgStyles, photoPath, photographer) {
		var style = $rtfeldman$elm_css$Html$Styled$Attributes$css(
			_List_fromArray(
				[
					$author$project$Tailwind$Utilities$relative,
					$rtfeldman$elm_css$Css$hover(
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$Global$descendants(
							_List_fromArray(
								[
									A2(
									$rtfeldman$elm_css$Css$Global$selector,
									'.photographercredit',
									_List_fromArray(
										[$author$project$Tailwind$Utilities$opacity_100]))
								]))
						]))
				]));
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					A2($elm$core$List$cons, style, attr),
					_List_fromArray(
						[
							A2(
							$author$project$View$Misc$responsiveImg,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(imgStyles)
								]),
							photoPath),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$class('photographercredit'),
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[$author$project$Tailwind$Utilities$opacity_0, $author$project$Tailwind$Utilities$absolute, $author$project$Tailwind$Utilities$left_0, $author$project$Tailwind$Utilities$bottom_0, $author$project$Tailwind$Utilities$right_0, $author$project$Tailwind$Utilities$z_10, $author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$justify_around, $author$project$Tailwind$Utilities$items_end, $author$project$Tailwind$Utilities$bg_brown, $author$project$Tailwind$Utilities$text_black]))
								]),
							_List_fromArray(
								[
									A2($author$project$View$Misc$photographerLink, photographer, 'av ')
								]))
						]))
				]));
	});
var $author$project$Page$Facilities$isEven = function (num) {
	var _v0 = A2($elm$core$Basics$modBy, 2, num);
	if (_v0 === 1) {
		return false;
	} else {
		return true;
	}
};
var $author$project$Tailwind$Utilities$object_cover = A2($rtfeldman$elm_css$Css$property, 'object-fit', 'cover');
var $author$project$Tailwind$Utilities$p_12 = A2($rtfeldman$elm_css$Css$property, 'padding', '3rem');
var $author$project$Tailwind$Utilities$pl_12 = A2($rtfeldman$elm_css$Css$property, 'padding-left', '3rem');
var $author$project$Tailwind$Utilities$w_1over3 = A2($rtfeldman$elm_css$Css$property, 'width', '33.333333%');
var $author$project$Tailwind$Utilities$w_2over3 = A2($rtfeldman$elm_css$Css$property, 'width', '66.666667%');
var $author$project$Page$Facilities$section = F2(
	function (index, sect) {
		var elements = _List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$Tailwind$Breakpoints$lg(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$w_1over3])),
								$author$project$Tailwind$Breakpoints$md(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$w_1over2])),
								$author$project$Tailwind$Utilities$w_full
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_Utils_ap(
									_List_fromArray(
										[
											$author$project$Tailwind$Breakpoints$lg(
											_List_fromArray(
												[$author$project$Tailwind$Utilities$h_auto, $author$project$Tailwind$Utilities$w_full])),
											$author$project$Tailwind$Breakpoints$md(
											_List_fromArray(
												[$author$project$Tailwind$Utilities$h_auto])),
											$author$project$Tailwind$Utilities$w_full
										]),
									$author$project$Page$Facilities$isEven(index) ? _List_Nil : _List_fromArray(
										[$author$project$Tailwind$Utilities$float_right])))
							]),
						_List_fromArray(
							[
								A4(
								$author$project$View$Misc$imgWithPhotographer,
								_List_Nil,
								_List_fromArray(
									[
										$author$project$Tailwind$Breakpoints$md(
										_List_fromArray(
											[$author$project$Tailwind$Utilities$h_auto])),
										$author$project$Tailwind$Utilities$object_cover,
										$author$project$Tailwind$Utilities$h_48,
										$author$project$Tailwind$Utilities$w_full
									]),
								sect.metadata.photo.path,
								sect.metadata.photo.photographer)
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$Tailwind$Breakpoints$lg(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$w_2over3])),
								$author$project$Tailwind$Breakpoints$md(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$w_1over2])),
								$author$project$Tailwind$Utilities$h_full,
								$author$project$Tailwind$Utilities$p_12,
								$author$project$Tailwind$Utilities$w_full
							]))
					]),
				sect.content)
			]);
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_Utils_ap(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$w_full, $author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$flex_wrap]),
						$author$project$Page$Facilities$isEven(index) ? _List_fromArray(
							[
								$author$project$Tailwind$Breakpoints$md(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$pl_12])),
								$author$project$Tailwind$Utilities$bg_brown,
								$author$project$Tailwind$Utilities$bg_opacity_20,
								$author$project$Tailwind$Utilities$flex_row_reverse
							]) : _List_fromArray(
							[$author$project$Tailwind$Utilities$flex_row])))
				]),
			elements);
	});
var $author$project$Page$Facilities$view = F3(
	function (_v0, _v1, _static) {
		return A2(
			$author$project$View$html,
			'Muligheter',
			_List_fromArray(
				[
					$author$project$View$Misc$container(
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									$author$project$View$Misc$headline('Muligheter')
								]))
						])),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[$author$project$Tailwind$Utilities$w_full, $author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$flex_col]))
						]),
					A2($elm$core$List$indexedMap, $author$project$Page$Facilities$section, _static.data))
				]));
	});
var $author$project$Page$Facilities$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Facilities$view},
	$author$project$Page$single(
		{data: $author$project$Page$Facilities$data, head: $author$project$Page$Facilities$head}));
var $author$project$Page$Gallery$OnKeyPress = function (a) {
	return {$: 'OnKeyPress', a: a};
};
var $author$project$Page$buildWithLocalState = F2(
	function (config, builderState) {
		var record = builderState.a;
		return {
			data: record.data,
			handleRoute: record.handleRoute,
			head: record.head,
			init: config.init,
			kind: record.kind,
			staticRoutes: record.staticRoutes,
			subscriptions: F5(
				function (maybePageUrl, routeParams, path, templateModel, sharedModel) {
					return A4(config.subscriptions, maybePageUrl, routeParams, path, templateModel);
				}),
			update: F6(
				function (pageUrl, staticPayload, navigationKey, msg, templateModel, sharedModel) {
					var _v1 = A6(config.update, pageUrl, navigationKey, sharedModel, staticPayload, msg, templateModel);
					var updatedModel = _v1.a;
					var cmd = _v1.b;
					return _Utils_Tuple3(updatedModel, cmd, $elm$core$Maybe$Nothing);
				}),
			view: F3(
				function (model, sharedModel, staticPayload) {
					return A3(config.view, model, sharedModel, staticPayload);
				})
		};
	});
var $author$project$Data$Photo$GalleryYAML = function (photos) {
	return {photos: photos};
};
var $MaybeJustJames$yaml$Yaml$Decode$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $MaybeJustJames$yaml$Yaml$Decode$Decoding = function (a) {
	return {$: 'Decoding', a: a};
};
var $MaybeJustJames$yaml$Yaml$Decode$fromValue = F2(
	function (_v0, v) {
		var decoder = _v0.a;
		return decoder(v);
	});
var $MaybeJustJames$yaml$Yaml$Decode$find = F3(
	function (names, decoder, v0) {
		find:
		while (true) {
			if (names.b) {
				var name = names.a;
				var rest = names.b;
				if (v0.$ === 'Record_') {
					var properties = v0.a;
					var _v2 = A2($elm$core$Dict$get, name, properties);
					if (_v2.$ === 'Just') {
						var v1 = _v2.a;
						var $temp$names = rest,
							$temp$decoder = decoder,
							$temp$v0 = v1;
						names = $temp$names;
						decoder = $temp$decoder;
						v0 = $temp$v0;
						continue find;
					} else {
						return $elm$core$Result$Err(
							$MaybeJustJames$yaml$Yaml$Decode$Decoding('Expected property: ' + name));
					}
				} else {
					return $elm$core$Result$Err(
						$MaybeJustJames$yaml$Yaml$Decode$Decoding('Expected record'));
				}
			} else {
				return A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, decoder, v0);
			}
		}
	});
var $MaybeJustJames$yaml$Yaml$Decode$field = F2(
	function (name, decoder) {
		return $MaybeJustJames$yaml$Yaml$Decode$Decoder(
			function (v) {
				return A3(
					$MaybeJustJames$yaml$Yaml$Decode$find,
					_List_fromArray(
						[name]),
					decoder,
					v);
			});
	});
var $MaybeJustJames$yaml$Yaml$Decode$Parsing = function (a) {
	return {$: 'Parsing', a: a};
};
var $MaybeJustJames$yaml$Yaml$Parser$problemToString = function (p) {
	switch (p.$) {
		case 'Expecting':
			var msg = p.a;
			return 'Expected ' + msg;
		case 'ExpectingInt':
			return 'Expected an integer';
		case 'ExpectingHex':
			return 'Expected a hexadecimal value';
		case 'ExpectingOctal':
			return 'Expected an octal value';
		case 'ExpectingBinary':
			return 'Expected a binary value';
		case 'ExpectingFloat':
			return 'Expected a float';
		case 'ExpectingNumber':
			return 'Expected a number';
		case 'ExpectingVariable':
			return 'Expected a variable';
		case 'ExpectingSymbol':
			var name = p.a;
			return 'Expected symbol \'' + (name + '\'');
		case 'ExpectingKeyword':
			var name = p.a;
			return 'Expected keyword \'' + (name + '\'');
		case 'ExpectingEnd':
			return 'Expected end of input';
		case 'UnexpectedChar':
			return 'Encountered an unexpected character';
		case 'Problem':
			var msg = p.a;
			return 'Problem: ' + msg;
		default:
			return 'Bad repeat';
	}
};
var $MaybeJustJames$yaml$Yaml$Parser$deadEndToString = function (deadend) {
	return 'Line ' + ($elm$core$String$fromInt(deadend.row) + (', column ' + ($elm$core$String$fromInt(deadend.col) + (': ' + $MaybeJustJames$yaml$Yaml$Parser$problemToString(deadend.problem)))));
};
var $MaybeJustJames$yaml$Yaml$Parser$deadEndsToString = function (deadends) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $MaybeJustJames$yaml$Yaml$Parser$deadEndToString, deadends));
};
var $MaybeJustJames$yaml$Yaml$Parser$Ast$fold = F3(
	function (f, value, z) {
		switch (value.$) {
			case 'String_':
				return A2(f, value, z);
			case 'Float_':
				return A2(f, value, z);
			case 'Int_':
				return A2(f, value, z);
			case 'Bool_':
				return A2(f, value, z);
			case 'Null_':
				return A2(f, value, z);
			case 'Alias_':
				return A2(f, value, z);
			case 'List_':
				var l = value.a;
				return A2(
					f,
					value,
					A3(
						$elm$core$List$foldl,
						$MaybeJustJames$yaml$Yaml$Parser$Ast$fold(f),
						z,
						l));
			case 'Record_':
				var r = value.a;
				return A2(
					f,
					value,
					A3(
						$elm$core$List$foldl,
						$MaybeJustJames$yaml$Yaml$Parser$Ast$fold(f),
						z,
						$elm$core$Dict$values(r)));
			default:
				var nm = value.a;
				var a = value.b;
				return A2(
					f,
					value,
					A3($MaybeJustJames$yaml$Yaml$Parser$Ast$fold, f, a, z));
		}
	});
var $MaybeJustJames$yaml$Yaml$Parser$Ast$Anchor_ = F2(
	function (a, b) {
		return {$: 'Anchor_', a: a, b: b};
	});
var $MaybeJustJames$yaml$Yaml$Parser$Ast$List_ = function (a) {
	return {$: 'List_', a: a};
};
var $MaybeJustJames$yaml$Yaml$Parser$Ast$Record_ = function (a) {
	return {$: 'Record_', a: a};
};
var $MaybeJustJames$yaml$Yaml$Parser$Ast$map = F2(
	function (f, value) {
		switch (value.$) {
			case 'String_':
				return f(value);
			case 'Float_':
				return f(value);
			case 'Int_':
				return f(value);
			case 'Bool_':
				return f(value);
			case 'Null_':
				return f(value);
			case 'Alias_':
				return f(value);
			case 'List_':
				var l = value.a;
				return f(
					$MaybeJustJames$yaml$Yaml$Parser$Ast$List_(
						A2(
							$elm$core$List$map,
							$MaybeJustJames$yaml$Yaml$Parser$Ast$map(f),
							l)));
			case 'Record_':
				var r = value.a;
				return f(
					$MaybeJustJames$yaml$Yaml$Parser$Ast$Record_(
						$elm$core$Dict$fromList(
							A2(
								$elm$core$List$map,
								function (_v1) {
									var k = _v1.a;
									var v = _v1.b;
									return _Utils_Tuple2(
										k,
										A2($MaybeJustJames$yaml$Yaml$Parser$Ast$map, f, v));
								},
								$elm$core$Dict$toList(r)))));
			default:
				var name = value.a;
				var a = value.b;
				return f(
					A2(
						$MaybeJustJames$yaml$Yaml$Parser$Ast$Anchor_,
						name,
						A2($MaybeJustJames$yaml$Yaml$Parser$Ast$map, f, a)));
		}
	});
var $MaybeJustJames$yaml$Yaml$Parser$deref = function (ast) {
	var anchorMap = A3(
		$MaybeJustJames$yaml$Yaml$Parser$Ast$fold,
		F2(
			function (node, d) {
				if (node.$ === 'Anchor_') {
					var name = node.a;
					var v = node.b;
					return A3($elm$core$Dict$insert, name, v, d);
				} else {
					return d;
				}
			}),
		ast,
		$elm$core$Dict$empty);
	var replaceAnchors = function (v) {
		switch (v.$) {
			case 'Alias_':
				var name = v.a;
				return A2(
					$elm$core$Maybe$withDefault,
					v,
					A2($elm$core$Dict$get, name, anchorMap));
			case 'Anchor_':
				var node = v.b;
				return node;
			default:
				return v;
		}
	};
	return A2($MaybeJustJames$yaml$Yaml$Parser$Ast$map, replaceAnchors, ast);
};
var $MaybeJustJames$yaml$Yaml$Parser$Util$threeDashes = $elm$parser$Parser$symbol('---');
var $elm$parser$Parser$Advanced$lineComment = function (start) {
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$token(start),
		$elm$parser$Parser$Advanced$chompUntilEndOr('\n'));
};
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$lineComment = function (str) {
	return $elm$parser$Parser$Advanced$lineComment(
		$elm$parser$Parser$toToken(str));
};
var $MaybeJustJames$yaml$Yaml$Parser$Util$comment = $elm$parser$Parser$lineComment('#');
var $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace = function () {
	var step = function (_v0) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						$elm$parser$Parser$Loop(_Utils_Tuple0)),
					$MaybeJustJames$yaml$Yaml$Parser$Util$comment),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						$elm$parser$Parser$Loop(_Utils_Tuple0)),
					$elm$parser$Parser$symbol(' ')),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						$elm$parser$Parser$Loop(_Utils_Tuple0)),
					$elm$parser$Parser$symbol('\n')),
					$elm$parser$Parser$succeed(
					$elm$parser$Parser$Done(_Utils_Tuple0))
				]));
	};
	return A2($elm$parser$Parser$loop, _Utils_Tuple0, step);
}();
var $MaybeJustJames$yaml$Yaml$Parser$Document$dashes = function (indent) {
	return (indent === 1) ? $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$MaybeJustJames$yaml$Yaml$Parser$Util$threeDashes),
				$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace)
			])) : A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace);
};
var $elm$parser$Parser$getCol = $elm$parser$Parser$Advanced$getCol;
var $MaybeJustJames$yaml$Yaml$Parser$Document$begins = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
			A2($elm$parser$Parser$andThen, $MaybeJustJames$yaml$Yaml$Parser$Document$dashes, $elm$parser$Parser$getCol)),
			A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace)
		]));
var $MaybeJustJames$yaml$Yaml$Parser$Util$threeDots = $elm$parser$Parser$symbol('...');
var $MaybeJustJames$yaml$Yaml$Parser$Document$ends = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$MaybeJustJames$yaml$Yaml$Parser$Util$threeDots,
						$elm$parser$Parser$succeed(_Utils_Tuple0)
					]))),
		$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
	$elm$parser$Parser$end);
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_ = {$: 'Null_'};
var $MaybeJustJames$yaml$Yaml$Parser$Ast$String_ = function (a) {
	return {$: 'String_', a: a};
};
var $elm$parser$Parser$chompUntilEndOr = $elm$parser$Parser$Advanced$chompUntilEndOr;
var $MaybeJustJames$yaml$Yaml$Parser$Util$remaining = $elm$parser$Parser$getChompedString(
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(_Utils_Tuple0),
		$elm$parser$Parser$chompUntilEndOr('\n...\n')));
var $MaybeJustJames$yaml$Yaml$Parser$String$exceptions = function () {
	var dashed = function (s) {
		return '---' + s;
	};
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
				$elm$parser$Parser$end),
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2($elm$core$Basics$composeL, $MaybeJustJames$yaml$Yaml$Parser$Ast$String_, dashed)),
					$MaybeJustJames$yaml$Yaml$Parser$Util$threeDashes),
				$MaybeJustJames$yaml$Yaml$Parser$Util$remaining),
				A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
					$MaybeJustJames$yaml$Yaml$Parser$Util$threeDots),
				$MaybeJustJames$yaml$Yaml$Parser$Util$remaining)
			]));
}();
var $MaybeJustJames$yaml$Yaml$Parser$refName = A2(
	$elm$parser$Parser$keeper,
	$elm$parser$Parser$succeed($elm$core$Basics$identity),
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile(
			function (c) {
				return !A2(
					$elm$core$List$member,
					c,
					_List_fromArray(
						[
							_Utils_chr('\u000D'),
							_Utils_chr('\n'),
							_Utils_chr(' '),
							_Utils_chr('\t'),
							_Utils_chr(','),
							_Utils_chr('['),
							_Utils_chr(']'),
							_Utils_chr('{'),
							_Utils_chr('}')
						]));
			})));
var $MaybeJustJames$yaml$Yaml$Parser$anchor = function (valParser) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Anchor_),
				$elm$parser$Parser$symbol('&')),
			A2($elm$parser$Parser$ignorer, $MaybeJustJames$yaml$Yaml$Parser$refName, $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace)),
		A2($elm$parser$Parser$andThen, valParser, $elm$parser$Parser$getCol));
};
var $MaybeJustJames$yaml$Yaml$Parser$Util$characters_ = function (isOk) {
	return $elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(_Utils_Tuple0),
			$elm$parser$Parser$chompWhile(isOk)));
};
var $MaybeJustJames$yaml$Yaml$Parser$Util$is = F2(
	function (searched, _char) {
		return _Utils_eq(_char, searched);
	});
var $MaybeJustJames$yaml$Yaml$Parser$Util$isDoubleQuote = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr('\"'));
var $MaybeJustJames$yaml$Yaml$Parser$Util$isSpace = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr(' '));
var $MaybeJustJames$yaml$Yaml$Parser$Util$spaces = $elm$parser$Parser$chompWhile($MaybeJustJames$yaml$Yaml$Parser$Util$isSpace);
var $MaybeJustJames$yaml$Yaml$Parser$Util$doubleQuotes = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$symbol('\"')),
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$MaybeJustJames$yaml$Yaml$Parser$Util$characters_(
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $MaybeJustJames$yaml$Yaml$Parser$Util$isDoubleQuote)),
			$elm$parser$Parser$symbol('\"')),
		$MaybeJustJames$yaml$Yaml$Parser$Util$spaces));
var $MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeys = function (properties) {
	var keys = A2($elm$core$List$map, $elm$core$Tuple$first, properties);
	var duplicated = A3(
		$elm$core$List$foldr,
		F2(
			function (x, _v0) {
				var obs = _v0.a;
				var dup = _v0.b;
				return A2($elm$core$Set$member, x, obs) ? _Utils_Tuple2(
					obs,
					A2($elm$core$Set$insert, x, dup)) : _Utils_Tuple2(
					A2($elm$core$Set$insert, x, obs),
					dup);
			}),
		_Utils_Tuple2($elm$core$Set$empty, $elm$core$Set$empty),
		keys);
	return $elm$core$Set$toList(duplicated.b);
};
var $MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeysCheck = function (properties) {
	var duplicates = $MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeys(properties);
	return (!$elm$core$List$length(duplicates)) ? $elm$parser$Parser$succeed(properties) : $elm$parser$Parser$problem(
		'Non-unique keys in record: ' + A2($elm$core$String$join, ', ', duplicates));
};
var $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_ = function (a) {
	return {$: 'Bool_', a: a};
};
var $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_ = function (a) {
	return {$: 'Float_', a: a};
};
var $MaybeJustJames$yaml$Yaml$Parser$Ast$Int_ = function (a) {
	return {$: 'Int_', a: a};
};
var $elm$core$String$toFloat = _String_toFloat;
var $MaybeJustJames$yaml$Yaml$Parser$Ast$fromString = function (string) {
	var trimmed = $elm$core$String$trim(string);
	var sign = function () {
		if ($elm$core$String$length(trimmed) > 1) {
			var _v3 = A2($elm$core$String$left, 1, trimmed);
			switch (_v3) {
				case '-':
					return _Utils_Tuple2(
						-1,
						A2($elm$core$String$dropLeft, 1, trimmed));
				case '+':
					return _Utils_Tuple2(
						1,
						A2($elm$core$String$dropLeft, 1, trimmed));
				default:
					return _Utils_Tuple2(1, trimmed);
			}
		} else {
			return _Utils_Tuple2(1, trimmed);
		}
	}();
	switch (sign.b) {
		case '':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
		case '~':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
		case 'null':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
		case 'Null':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
		case 'NULL':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Null_;
		case 'true':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'True':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'TRUE':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'on':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'On':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'ON':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'y':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'Y':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'yes':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'Yes':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'YES':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(true);
		case 'false':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'False':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'FALSE':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'off':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'Off':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'OFF':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'n':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'N':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'no':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'No':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case 'NO':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Bool_(false);
		case '.nan':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(0 / 0);
		case '.NaN':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(0 / 0);
		case '.NAN':
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(0 / 0);
		case '.inf':
			var mult = sign.a;
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_((mult * 1) / 0);
		case '.Inf':
			var mult = sign.a;
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_((mult * 1) / 0);
		case '.INF':
			var mult = sign.a;
			return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_((mult * 1) / 0);
		default:
			var _v1 = $elm$core$String$toInt(trimmed);
			if (_v1.$ === 'Just') {
				var _int = _v1.a;
				return $MaybeJustJames$yaml$Yaml$Parser$Ast$Int_(_int);
			} else {
				var _v2 = $elm$core$String$toFloat(trimmed);
				if (_v2.$ === 'Just') {
					var _float = _v2.a;
					return $MaybeJustJames$yaml$Yaml$Parser$Ast$Float_(_float);
				} else {
					return $MaybeJustJames$yaml$Yaml$Parser$Ast$String_(
						$elm$core$String$trim(trimmed));
				}
			}
	}
};
var $MaybeJustJames$yaml$Yaml$Parser$Util$indented = F2(
	function (indent, next) {
		var check = function (actual) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$andThen,
						function (_v0) {
							return next.ending;
						},
						$elm$parser$Parser$end),
						A2(
						$elm$parser$Parser$andThen,
						function (_v1) {
							return next.ending;
						},
						$elm$parser$Parser$symbol('\n...\n')),
						_Utils_eq(actual, indent) ? next.exactly : ((_Utils_cmp(actual, indent) > 0) ? next.larger(actual) : next.smaller)
					]));
		};
		return A2(
			$elm$parser$Parser$andThen,
			check,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
				$elm$parser$Parser$getCol));
	});
var $MaybeJustJames$yaml$Yaml$Parser$Util$isColon = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr(':'));
var $MaybeJustJames$yaml$Yaml$Parser$Util$isListEnd = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr(']'));
var $MaybeJustJames$yaml$Yaml$Parser$Util$isListStart = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr('['));
var $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr('\n'));
var $MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr('}'));
var $MaybeJustJames$yaml$Yaml$Parser$Util$isRecordStart = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr('{'));
var $MaybeJustJames$yaml$Yaml$Parser$listElementBegin = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$symbol('- '),
			$elm$parser$Parser$symbol('-\n')
		]));
var $MaybeJustJames$yaml$Yaml$Parser$Util$isComma = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr(','));
var $MaybeJustJames$yaml$Yaml$Parser$listInlineOnDone = F2(
	function (elements, element) {
		return $elm$parser$Parser$Done(
			$elm$core$List$reverse(
				A2($elm$core$List$cons, element, elements)));
	});
var $MaybeJustJames$yaml$Yaml$Parser$listInlineOnMore = F2(
	function (elements, element) {
		return $elm$parser$Parser$Loop(
			A2($elm$core$List$cons, element, elements));
	});
var $MaybeJustJames$yaml$Yaml$Parser$listInlineNext = F2(
	function (elements, element) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2($MaybeJustJames$yaml$Yaml$Parser$listInlineOnMore, elements, element)),
					$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isComma)),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2($MaybeJustJames$yaml$Yaml$Parser$listInlineOnDone, elements, element)),
					$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isListEnd))
				]));
	});
var $MaybeJustJames$yaml$Yaml$Parser$Util$neither = F3(
	function (f1, f2, _char) {
		return (!f1(_char)) && (!f2(_char));
	});
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $MaybeJustJames$yaml$Yaml$Parser$listInlineString = A2(
	$elm$parser$Parser$map,
	A2(
		$elm$core$Basics$composeL,
		$MaybeJustJames$yaml$Yaml$Parser$Ast$fromString,
		A2($elm$core$String$replace, '\\', '\\\\')),
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(_Utils_Tuple0),
			$elm$parser$Parser$chompWhile(
				A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isComma, $MaybeJustJames$yaml$Yaml$Parser$Util$isListEnd)))));
var $MaybeJustJames$yaml$Yaml$Parser$Util$characters = function (isOk) {
	var more = F2(
		function (chars, _char) {
			return $elm$parser$Parser$Loop(
				A2($elm$core$List$cons, _char, chars));
		});
	var done = function (chars) {
		return $elm$parser$Parser$Done(
			$elm$core$String$concat(
				$elm$core$List$reverse(chars)));
	};
	var step = function (chars) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						done(chars)),
					$MaybeJustJames$yaml$Yaml$Parser$Util$comment),
					A2(
					$elm$parser$Parser$map,
					more(chars),
					$elm$parser$Parser$getChompedString(
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed(_Utils_Tuple0),
							$elm$parser$Parser$chompIf(isOk)))),
					$elm$parser$Parser$succeed(
					done(chars))
				]));
	};
	return A2($elm$parser$Parser$loop, _List_Nil, step);
};
var $MaybeJustJames$yaml$Yaml$Parser$Util$multilineStep = F2(
	function (indent, lines) {
		var multilineString = function (lines_) {
			return A2(
				$elm$core$String$join,
				' ',
				$elm$core$List$reverse(lines_));
		};
		var conclusion = F2(
			function (line, indent_) {
				return (_Utils_cmp(indent_, indent) > 0) ? $elm$parser$Parser$Loop(
					A2($elm$core$List$cons, line, lines)) : $elm$parser$Parser$Done(
					multilineString(
						A2($elm$core$List$cons, line, lines)));
			});
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed(conclusion),
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								$MaybeJustJames$yaml$Yaml$Parser$Util$characters(
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine)),
								$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine)),
							$MaybeJustJames$yaml$Yaml$Parser$Util$spaces)),
					$elm$parser$Parser$getCol),
					$elm$parser$Parser$succeed(
					$elm$parser$Parser$Done(
						multilineString(lines)))
				]));
	});
var $MaybeJustJames$yaml$Yaml$Parser$Util$multiline = function (indent) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		$MaybeJustJames$yaml$Yaml$Parser$Util$multilineStep(indent));
};
var $MaybeJustJames$yaml$Yaml$Parser$Util$postProcessString = function (str) {
	var regexFromString = A2(
		$elm$core$Basics$composeR,
		$elm$regex$Regex$fromString,
		$elm$core$Maybe$withDefault($elm$regex$Regex$never));
	return A3(
		$elm$regex$Regex$replace,
		regexFromString('\\s\\s+'),
		function (match) {
			return A2($elm$core$String$contains, '\n\n', match.match) ? '\n' : ' ';
		},
		str);
};
var $MaybeJustJames$yaml$Yaml$Parser$recordInlineOnDone = F2(
	function (elements, element) {
		return $elm$parser$Parser$Done(
			$elm$core$List$reverse(
				A2($elm$core$List$cons, element, elements)));
	});
var $MaybeJustJames$yaml$Yaml$Parser$recordInlineOnMore = F2(
	function (elements, element) {
		return $elm$parser$Parser$Loop(
			A2($elm$core$List$cons, element, elements));
	});
var $MaybeJustJames$yaml$Yaml$Parser$recordInlineNext = F2(
	function (elements, element) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2($MaybeJustJames$yaml$Yaml$Parser$recordInlineOnMore, elements, element)),
					$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isComma)),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2($MaybeJustJames$yaml$Yaml$Parser$recordInlineOnDone, elements, element)),
					$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd))
				]));
	});
var $MaybeJustJames$yaml$Yaml$Parser$Util$neither3 = F4(
	function (f1, f2, f3, _char) {
		return (!f1(_char)) && ((!f2(_char)) && (!f3(_char)));
	});
var $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyNameString = A2(
	$elm$parser$Parser$map,
	$elm$core$String$trim,
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_Utils_Tuple0),
				$elm$parser$Parser$chompWhile(
					A3($MaybeJustJames$yaml$Yaml$Parser$Util$neither3, $MaybeJustJames$yaml$Yaml$Parser$Util$isColon, $MaybeJustJames$yaml$Yaml$Parser$Util$isComma, $MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd))),
			$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace)));
var $MaybeJustJames$yaml$Yaml$Parser$Util$isSingleQuote = $MaybeJustJames$yaml$Yaml$Parser$Util$is(
	_Utils_chr('\''));
var $MaybeJustJames$yaml$Yaml$Parser$Util$singleQuotes = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(
			A2($elm$core$String$replace, '\\', '\\\\')),
		$elm$parser$Parser$symbol('\'')),
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$MaybeJustJames$yaml$Yaml$Parser$Util$characters_(
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $MaybeJustJames$yaml$Yaml$Parser$Util$isSingleQuote)),
			$elm$parser$Parser$symbol('\'')),
		$MaybeJustJames$yaml$Yaml$Parser$Util$spaces));
var $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyName = A2(
	$elm$parser$Parser$keeper,
	$elm$parser$Parser$succeed($elm$core$Basics$identity),
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$MaybeJustJames$yaml$Yaml$Parser$Util$singleQuotes, $MaybeJustJames$yaml$Yaml$Parser$Util$doubleQuotes, $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyNameString])),
				$elm$parser$Parser$chompWhile($MaybeJustJames$yaml$Yaml$Parser$Util$isSpace)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isColon),
						$elm$parser$Parser$problem('I was parsing an inline record, when I ran into an invalid property. It is missing the \":\"!')
					]))),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine),
					$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isSpace),
					$elm$parser$Parser$problem('I was parsing an inline record, but missing a space or a new line between the \":\" and the value!')
				]))));
var $MaybeJustJames$yaml$Yaml$Parser$recordInlineString = A2(
	$elm$parser$Parser$map,
	$MaybeJustJames$yaml$Yaml$Parser$Ast$fromString,
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(_Utils_Tuple0),
			$elm$parser$Parser$chompWhile(
				A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isComma, $MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd)))));
var $MaybeJustJames$yaml$Yaml$Parser$Ast$Alias_ = function (a) {
	return {$: 'Alias_', a: a};
};
var $MaybeJustJames$yaml$Yaml$Parser$reference = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Alias_),
		$elm$parser$Parser$symbol('*')),
	$MaybeJustJames$yaml$Yaml$Parser$refName);
var $elm$parser$Parser$token = function (str) {
	return $elm$parser$Parser$Advanced$token(
		$elm$parser$Parser$toToken(str));
};
var $MaybeJustJames$yaml$Yaml$Parser$list = function (indent) {
	var confirmed = function (value_) {
		return A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$List_),
			A2(
				$elm$parser$Parser$loop,
				_List_fromArray(
					[value_]),
				$MaybeJustJames$yaml$Yaml$Parser$listStep(indent)));
	};
	return A2(
		$elm$parser$Parser$andThen,
		confirmed,
		$MaybeJustJames$yaml$Yaml$Parser$listElement(indent));
};
var $MaybeJustJames$yaml$Yaml$Parser$listElement = function (indent) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$MaybeJustJames$yaml$Yaml$Parser$listElementBegin),
		$MaybeJustJames$yaml$Yaml$Parser$listElementValue(indent));
};
var $MaybeJustJames$yaml$Yaml$Parser$listElementValue = function (indent) {
	var elVal = function (indent_) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline(),
					$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline(),
					$MaybeJustJames$yaml$Yaml$Parser$list(indent_),
					A2($MaybeJustJames$yaml$Yaml$Parser$recordOrString, indent, indent_)
				]));
	};
	return A2(
		$MaybeJustJames$yaml$Yaml$Parser$Util$indented,
		indent,
		{
			ending: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
			exactly: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
			larger: function (indent_) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$MaybeJustJames$yaml$Yaml$Parser$anchor(elVal),
							$MaybeJustJames$yaml$Yaml$Parser$reference,
							elVal(indent_)
						]));
			},
			smaller: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_)
		});
};
var $MaybeJustJames$yaml$Yaml$Parser$listInlineStep = function (elements) {
	return A2(
		$elm$parser$Parser$andThen,
		$MaybeJustJames$yaml$Yaml$Parser$listInlineNext(elements),
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
			A2(
				$elm$parser$Parser$ignorer,
				$MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineValue(),
				$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace)));
};
var $MaybeJustJames$yaml$Yaml$Parser$listStep = F2(
	function (indent, values) {
		var next = function (value_) {
			return $elm$parser$Parser$Loop(
				A2($elm$core$List$cons, value_, values));
		};
		var finish = $elm$parser$Parser$Done(
			$elm$core$List$reverse(values));
		return A2(
			$MaybeJustJames$yaml$Yaml$Parser$Util$indented,
			indent,
			{
				ending: $elm$parser$Parser$succeed(finish),
				exactly: $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(next),
							$MaybeJustJames$yaml$Yaml$Parser$listElement(indent)),
							$elm$parser$Parser$succeed(finish)
						])),
				larger: function (_v1) {
					return $elm$parser$Parser$problem('I was looking for the next element but didn\'t find one.');
				},
				smaller: $elm$parser$Parser$succeed(finish)
			});
	});
var $MaybeJustJames$yaml$Yaml$Parser$quotedString = function (indent) {
	var withQuote = function (quote) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2($MaybeJustJames$yaml$Yaml$Parser$recordProperty, indent, quote),
					$elm$parser$Parser$succeed(
					$MaybeJustJames$yaml$Yaml$Parser$Ast$String_(
						$MaybeJustJames$yaml$Yaml$Parser$Util$postProcessString(quote)))
				]));
	};
	return A2(
		$elm$parser$Parser$andThen,
		withQuote,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$MaybeJustJames$yaml$Yaml$Parser$Util$singleQuotes, $MaybeJustJames$yaml$Yaml$Parser$Util$doubleQuotes])),
				$MaybeJustJames$yaml$Yaml$Parser$Util$spaces)));
};
var $MaybeJustJames$yaml$Yaml$Parser$record = F2(
	function (indent, property) {
		var confirmed = function (value_) {
			return A2(
				$elm$parser$Parser$map,
				A2($elm$core$Basics$composeL, $MaybeJustJames$yaml$Yaml$Parser$Ast$Record_, $elm$core$Dict$fromList),
				A2(
					$elm$parser$Parser$andThen,
					$MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeysCheck,
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						A2(
							$elm$parser$Parser$loop,
							_List_fromArray(
								[
									_Utils_Tuple2(property, value_)
								]),
							$MaybeJustJames$yaml$Yaml$Parser$recordStep(indent)))));
		};
		return A2(
			$elm$parser$Parser$andThen,
			confirmed,
			$MaybeJustJames$yaml$Yaml$Parser$recordElementValue(indent));
	});
var $MaybeJustJames$yaml$Yaml$Parser$recordElement = function (indent) {
	var property = $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$MaybeJustJames$yaml$Yaml$Parser$Util$singleQuotes,
				$MaybeJustJames$yaml$Yaml$Parser$Util$doubleQuotes,
				$elm$parser$Parser$getChompedString(
				$elm$parser$Parser$chompWhile(
					A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isColon, $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine)))
			]));
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Tuple$pair),
			A2(
				$elm$parser$Parser$ignorer,
				A2($elm$parser$Parser$ignorer, property, $MaybeJustJames$yaml$Yaml$Parser$Util$spaces),
				$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isColon))),
		$MaybeJustJames$yaml$Yaml$Parser$recordElementValue(indent));
};
var $MaybeJustJames$yaml$Yaml$Parser$recordElementValue = function (indent) {
	var elVal = function (indent_) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline(),
					$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline(),
					$MaybeJustJames$yaml$Yaml$Parser$list(indent_),
					A2($MaybeJustJames$yaml$Yaml$Parser$recordOrString, indent, indent_)
				]));
	};
	return A2(
		$MaybeJustJames$yaml$Yaml$Parser$Util$indented,
		indent,
		{
			ending: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_),
			exactly: $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$MaybeJustJames$yaml$Yaml$Parser$list(indent),
						$elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_)
					])),
			larger: function (indent_) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$MaybeJustJames$yaml$Yaml$Parser$anchor(elVal),
							$MaybeJustJames$yaml$Yaml$Parser$reference,
							elVal(indent_)
						]));
			},
			smaller: $elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$Null_)
		});
};
var $MaybeJustJames$yaml$Yaml$Parser$recordInlineStep = function (elements) {
	return A2(
		$elm$parser$Parser$andThen,
		$MaybeJustJames$yaml$Yaml$Parser$recordInlineNext(elements),
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
			A2(
				$elm$parser$Parser$ignorer,
				$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineValue(),
				$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace)));
};
var $MaybeJustJames$yaml$Yaml$Parser$recordOrString = F2(
	function (indent, indent_) {
		var removeComment = function (string) {
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(
					A2($elm$core$String$split, '#', string)));
		};
		var addRemaining = F2(
			function (string, remaining) {
				return $MaybeJustJames$yaml$Yaml$Parser$Ast$fromString(
					$MaybeJustJames$yaml$Yaml$Parser$Util$postProcessString(
						_Utils_ap(
							removeComment(string),
							remaining)));
			});
		var withString = function (string) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							$MaybeJustJames$yaml$Yaml$Parser$Ast$fromString(string)),
						$elm$parser$Parser$end),
						A2($MaybeJustJames$yaml$Yaml$Parser$recordProperty, indent_, string),
						A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed(
							addRemaining(string)),
						(!indent) ? $MaybeJustJames$yaml$Yaml$Parser$Util$remaining : $MaybeJustJames$yaml$Yaml$Parser$Util$multiline(indent))
					]));
		};
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$MaybeJustJames$yaml$Yaml$Parser$quotedString(indent_),
					A2(
					$elm$parser$Parser$andThen,
					withString,
					$elm$parser$Parser$getChompedString(
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($elm$core$Basics$identity),
								$elm$parser$Parser$chompIf(
									A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isColon, $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine))),
							$elm$parser$Parser$chompWhile(
								A2($MaybeJustJames$yaml$Yaml$Parser$Util$neither, $MaybeJustJames$yaml$Yaml$Parser$Util$isColon, $MaybeJustJames$yaml$Yaml$Parser$Util$isNewLine))))),
					A2(
					$elm$parser$Parser$andThen,
					withString,
					$elm$parser$Parser$getChompedString(
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$chompWhile($MaybeJustJames$yaml$Yaml$Parser$Util$isColon))))
				]));
	});
var $MaybeJustJames$yaml$Yaml$Parser$recordProperty = F2(
	function (indent, name) {
		return A2(
			$elm$parser$Parser$andThen,
			$elm$core$Basics$identity,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(
					A2($MaybeJustJames$yaml$Yaml$Parser$record, indent, name)),
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$elm$parser$Parser$token(': '),
							$elm$parser$Parser$token(':\n'),
							A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$backtrackable(
								$elm$parser$Parser$token(':')),
							$elm$parser$Parser$end)
						]))));
	});
var $MaybeJustJames$yaml$Yaml$Parser$recordStep = F2(
	function (indent, values) {
		var next = function (value_) {
			return $elm$parser$Parser$Loop(
				A2($elm$core$List$cons, value_, values));
		};
		var finish = $elm$parser$Parser$Done(
			$elm$core$List$reverse(values));
		return A2(
			$MaybeJustJames$yaml$Yaml$Parser$Util$indented,
			indent,
			{
				ending: $elm$parser$Parser$succeed(finish),
				exactly: A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(next),
					$MaybeJustJames$yaml$Yaml$Parser$recordElement(indent)),
				larger: function (_v0) {
					return $elm$parser$Parser$problem('I was looking for the next property but didn\'t find one.');
				},
				smaller: $elm$parser$Parser$succeed(finish)
			});
	});
function $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineValue() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Tuple$pair),
			A2($elm$parser$Parser$ignorer, $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyName, $MaybeJustJames$yaml$Yaml$Parser$Util$whitespace)),
		$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlinePropertyValue());
}
function $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlinePropertyValue() {
	var propVal = $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline(),
				$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline(),
				$MaybeJustJames$yaml$Yaml$Parser$recordInlineString
			]));
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$MaybeJustJames$yaml$Yaml$Parser$anchor(
				$elm$core$Basics$always(propVal)),
				$MaybeJustJames$yaml$Yaml$Parser$reference,
				propVal
			]));
}
function $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineValue() {
	var inlineVal = $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline(),
				$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline(),
				$MaybeJustJames$yaml$Yaml$Parser$quotedString(0),
				$MaybeJustJames$yaml$Yaml$Parser$listInlineString
			]));
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$MaybeJustJames$yaml$Yaml$Parser$anchor(
				$elm$core$Basics$always(inlineVal)),
				$MaybeJustJames$yaml$Yaml$Parser$reference,
				inlineVal
			]));
}
function $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($MaybeJustJames$yaml$Yaml$Parser$Ast$List_),
				$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isListStart)),
			$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
		$MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineStepOne());
}
function $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineStepOne() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_List_Nil),
				$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isListEnd)),
				A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				A2($elm$parser$Parser$loop, _List_Nil, $MaybeJustJames$yaml$Yaml$Parser$listInlineStep))
			]));
}
function $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline() {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(
					A2($elm$core$Basics$composeL, $MaybeJustJames$yaml$Yaml$Parser$Ast$Record_, $elm$core$Dict$fromList)),
				$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isRecordStart)),
			$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
		$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineStepOne());
}
function $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineStepOne() {
	return A2(
		$elm$parser$Parser$andThen,
		$MaybeJustJames$yaml$Yaml$Parser$duplicatedPropertyKeysCheck,
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(_List_Nil),
					$elm$parser$Parser$chompIf($MaybeJustJames$yaml$Yaml$Parser$Util$isRecordEnd)),
					A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					A2($elm$parser$Parser$loop, _List_Nil, $MaybeJustJames$yaml$Yaml$Parser$recordInlineStep))
				])));
}
try {
	var $MaybeJustJames$yaml$Yaml$Parser$recordInlineValue = $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineValue();
	$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineValue = function () {
		return $MaybeJustJames$yaml$Yaml$Parser$recordInlineValue;
	};
	var $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyValue = $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlinePropertyValue();
	$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlinePropertyValue = function () {
		return $MaybeJustJames$yaml$Yaml$Parser$recordInlinePropertyValue;
	};
	var $MaybeJustJames$yaml$Yaml$Parser$listInlineValue = $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineValue();
	$MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineValue = function () {
		return $MaybeJustJames$yaml$Yaml$Parser$listInlineValue;
	};
	var $MaybeJustJames$yaml$Yaml$Parser$listInline = $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline();
	$MaybeJustJames$yaml$Yaml$Parser$cyclic$listInline = function () {
		return $MaybeJustJames$yaml$Yaml$Parser$listInline;
	};
	var $MaybeJustJames$yaml$Yaml$Parser$listInlineStepOne = $MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineStepOne();
	$MaybeJustJames$yaml$Yaml$Parser$cyclic$listInlineStepOne = function () {
		return $MaybeJustJames$yaml$Yaml$Parser$listInlineStepOne;
	};
	var $MaybeJustJames$yaml$Yaml$Parser$recordInline = $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline();
	$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInline = function () {
		return $MaybeJustJames$yaml$Yaml$Parser$recordInline;
	};
	var $MaybeJustJames$yaml$Yaml$Parser$recordInlineStepOne = $MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineStepOne();
	$MaybeJustJames$yaml$Yaml$Parser$cyclic$recordInlineStepOne = function () {
		return $MaybeJustJames$yaml$Yaml$Parser$recordInlineStepOne;
	};
} catch ($) {
	throw 'Some top-level definitions from `Yaml.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    list\n  │     ↓\n  │    listElement\n  │     ↓\n  │    listElementValue\n  │     ↓\n  │    recordInlineValue\n  │     ↓\n  │    recordInlinePropertyValue\n  │     ↓\n  │    listInlineValue\n  │     ↓\n  │    listInline\n  │     ↓\n  │    listInlineStepOne\n  │     ↓\n  │    listInlineStep\n  │     ↓\n  │    listStep\n  │     ↓\n  │    quotedString\n  │     ↓\n  │    record\n  │     ↓\n  │    recordElement\n  │     ↓\n  │    recordElementValue\n  │     ↓\n  │    recordInline\n  │     ↓\n  │    recordInlineStepOne\n  │     ↓\n  │    recordInlineStep\n  │     ↓\n  │    recordOrString\n  │     ↓\n  │    recordProperty\n  │     ↓\n  │    recordStep\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $MaybeJustJames$yaml$Yaml$Parser$value = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			$MaybeJustJames$yaml$Yaml$Parser$String$exceptions,
			$MaybeJustJames$yaml$Yaml$Parser$recordInline,
			$MaybeJustJames$yaml$Yaml$Parser$listInline,
			A2($elm$parser$Parser$andThen, $MaybeJustJames$yaml$Yaml$Parser$list, $elm$parser$Parser$getCol),
			A2(
			$elm$parser$Parser$andThen,
			$MaybeJustJames$yaml$Yaml$Parser$recordOrString(0),
			$elm$parser$Parser$getCol)
		]));
var $MaybeJustJames$yaml$Yaml$Parser$parser = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$MaybeJustJames$yaml$Yaml$Parser$Document$begins),
		$MaybeJustJames$yaml$Yaml$Parser$Util$whitespace),
	A2($elm$parser$Parser$ignorer, $MaybeJustJames$yaml$Yaml$Parser$value, $MaybeJustJames$yaml$Yaml$Parser$Document$ends));
var $MaybeJustJames$yaml$Yaml$Parser$fromString = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($MaybeJustJames$yaml$Yaml$Parser$parser),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$Result$mapError($MaybeJustJames$yaml$Yaml$Parser$deadEndsToString),
		$elm$core$Result$map($MaybeJustJames$yaml$Yaml$Parser$deref)));
var $MaybeJustJames$yaml$Yaml$Decode$fromString = F2(
	function (decoder, raw) {
		var _v0 = $MaybeJustJames$yaml$Yaml$Parser$fromString(raw);
		if (_v0.$ === 'Ok') {
			var v = _v0.a;
			return A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, decoder, v);
		} else {
			var error = _v0.a;
			return $elm$core$Result$Err(
				$MaybeJustJames$yaml$Yaml$Decode$Parsing(error));
		}
	});
var $MaybeJustJames$yaml$Yaml$Parser$Ast$toString = function (value) {
	switch (value.$) {
		case 'String_':
			var string = value.a;
			return '\"' + (string + '\" (string)');
		case 'Float_':
			var _float = value.a;
			return $elm$core$String$fromFloat(_float) + ' (float)';
		case 'Int_':
			var _int = value.a;
			return $elm$core$String$fromInt(_int) + ' (int)';
		case 'List_':
			var list = value.a;
			return '[ ' + (A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $MaybeJustJames$yaml$Yaml$Parser$Ast$toString, list)) + ' ] (list)');
		case 'Record_':
			var properties = value.a;
			return '{ ' + (A2(
				$elm$core$String$join,
				', ',
				A2(
					$elm$core$List$map,
					$MaybeJustJames$yaml$Yaml$Parser$Ast$toStringProperty,
					$elm$core$Dict$toList(properties))) + ' } (map)');
		case 'Bool_':
			if (value.a) {
				return 'True (bool)';
			} else {
				return 'False (bool)';
			}
		case 'Null_':
			return 'Null';
		case 'Anchor_':
			var name = value.a;
			var r_val = value.b;
			return '&' + (name + (' ' + $MaybeJustJames$yaml$Yaml$Parser$Ast$toString(r_val)));
		default:
			var name = value.a;
			return '*' + name;
	}
};
var $MaybeJustJames$yaml$Yaml$Parser$Ast$toStringProperty = function (_v0) {
	var name = _v0.a;
	var value = _v0.b;
	return name + (': ' + $MaybeJustJames$yaml$Yaml$Parser$Ast$toString(value));
};
var $MaybeJustJames$yaml$Yaml$Decode$decodeError = F2(
	function (expected, got) {
		return $elm$core$Result$Err(
			$MaybeJustJames$yaml$Yaml$Decode$Decoding(
				'Expected ' + (expected + (', got: ' + $MaybeJustJames$yaml$Yaml$Parser$Ast$toString(got)))));
	});
var $MaybeJustJames$yaml$Yaml$Decode$singleResult = function () {
	var each = F2(
		function (v, r) {
			if (r.$ === 'Err') {
				return r;
			} else {
				var vs = r.a;
				if (v.$ === 'Ok') {
					var vok = v.a;
					return $elm$core$Result$Ok(
						A2($elm$core$List$cons, vok, vs));
				} else {
					var err = v.a;
					return $elm$core$Result$Err(err);
				}
			}
		});
	return A2(
		$elm$core$Basics$composeR,
		A2(
			$elm$core$List$foldl,
			each,
			$elm$core$Result$Ok(_List_Nil)),
		$elm$core$Result$map($elm$core$List$reverse));
}();
var $MaybeJustJames$yaml$Yaml$Decode$list = function (decoder) {
	return $MaybeJustJames$yaml$Yaml$Decode$Decoder(
		function (v) {
			switch (v.$) {
				case 'List_':
					var list_ = v.a;
					return $MaybeJustJames$yaml$Yaml$Decode$singleResult(
						A2(
							$elm$core$List$map,
							$MaybeJustJames$yaml$Yaml$Decode$fromValue(decoder),
							list_));
				case 'Null_':
					return $elm$core$Result$Ok(_List_Nil);
				default:
					return A2($MaybeJustJames$yaml$Yaml$Decode$decodeError, 'list', v);
			}
		});
};
var $MaybeJustJames$yaml$Yaml$Decode$map = F2(
	function (func, _v0) {
		var a = _v0.a;
		return $MaybeJustJames$yaml$Yaml$Decode$Decoder(
			function (v0) {
				var _v1 = a(v0);
				if (_v1.$ === 'Err') {
					var err = _v1.a;
					return $elm$core$Result$Err(err);
				} else {
					var av = _v1.a;
					return $elm$core$Result$Ok(
						func(av));
				}
			});
	});
var $author$project$Data$Photo$PhotoYAML = F3(
	function (path, photographer, description) {
		return {description: description, path: path, photographer: photographer};
	});
var $MaybeJustJames$yaml$Yaml$Decode$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var a = _v0.a;
		var b = _v1.a;
		var c = _v2.a;
		return $MaybeJustJames$yaml$Yaml$Decode$Decoder(
			function (v0) {
				var _v3 = a(v0);
				if (_v3.$ === 'Err') {
					var err1 = _v3.a;
					return $elm$core$Result$Err(err1);
				} else {
					var av = _v3.a;
					var _v4 = b(v0);
					if (_v4.$ === 'Err') {
						var err2 = _v4.a;
						return $elm$core$Result$Err(err2);
					} else {
						var bv = _v4.a;
						var _v5 = c(v0);
						if (_v5.$ === 'Err') {
							var err3 = _v5.a;
							return $elm$core$Result$Err(err3);
						} else {
							var cv = _v5.a;
							return $elm$core$Result$Ok(
								A3(func, av, bv, cv));
						}
					}
				}
			});
	});
var $MaybeJustJames$yaml$Yaml$Decode$string = $MaybeJustJames$yaml$Yaml$Decode$Decoder(
	function (v) {
		switch (v.$) {
			case 'String_':
				var string_ = v.a;
				return $elm$core$Result$Ok(string_);
			case 'Null_':
				return $elm$core$Result$Ok('');
			default:
				return A2($MaybeJustJames$yaml$Yaml$Decode$decodeError, 'string', v);
		}
	});
var $author$project$Data$Photo$photoDecoder = A4(
	$MaybeJustJames$yaml$Yaml$Decode$map3,
	$author$project$Data$Photo$PhotoYAML,
	A2($MaybeJustJames$yaml$Yaml$Decode$field, 'path', $MaybeJustJames$yaml$Yaml$Decode$string),
	A2($MaybeJustJames$yaml$Yaml$Decode$field, 'photographer', $MaybeJustJames$yaml$Yaml$Decode$string),
	A2($MaybeJustJames$yaml$Yaml$Decode$field, 'description', $MaybeJustJames$yaml$Yaml$Decode$string));
var $dillonkearns$elm_pages$DataSource$File$rawFile = function (filePath) {
	return A2(
		$dillonkearns$elm_pages$DataSource$File$read,
		filePath,
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'rawFile', $dillonkearns$elm_pages$OptimizedDecoder$string));
};
var $author$project$Data$Photo$yamlToPhoto = F2(
	function (photographers, photo) {
		return {
			description: photo.description,
			path: photo.path,
			photographer: A2(
				$elm$core$Maybe$withDefault,
				{name: 'Ukjent', website: ''},
				A2($elm$core$Dict$get, photo.photographer, photographers))
		};
	});
var $MaybeJustJames$yaml$Yaml$Decode$dict = function (decoder) {
	return $MaybeJustJames$yaml$Yaml$Decode$Decoder(
		function (v) {
			if (v.$ === 'Record_') {
				var properties = v.a;
				return $elm$core$Result$Ok(
					$elm$core$Dict$fromList(
						A2(
							$elm$core$List$filterMap,
							function (_v2) {
								var key = _v2.a;
								var val = _v2.b;
								if (val.$ === 'Ok') {
									var val_ = val.a;
									return $elm$core$Maybe$Just(
										_Utils_Tuple2(key, val_));
								} else {
									return $elm$core$Maybe$Nothing;
								}
							},
							A2(
								$elm$core$List$map,
								function (_v1) {
									var key = _v1.a;
									var val = _v1.b;
									return _Utils_Tuple2(
										key,
										A2($MaybeJustJames$yaml$Yaml$Decode$fromValue, decoder, val));
								},
								$elm$core$Dict$toList(properties)))));
			} else {
				return A2($MaybeJustJames$yaml$Yaml$Decode$decodeError, 'record', v);
			}
		});
};
var $MaybeJustJames$yaml$Yaml$Decode$map2 = F3(
	function (func, _v0, _v1) {
		var a = _v0.a;
		var b = _v1.a;
		return $MaybeJustJames$yaml$Yaml$Decode$Decoder(
			function (v0) {
				var _v2 = a(v0);
				if (_v2.$ === 'Err') {
					var err1 = _v2.a;
					return $elm$core$Result$Err(err1);
				} else {
					var av = _v2.a;
					var _v3 = b(v0);
					if (_v3.$ === 'Err') {
						var err2 = _v3.a;
						return $elm$core$Result$Err(err2);
					} else {
						var bv = _v3.a;
						return $elm$core$Result$Ok(
							A2(func, av, bv));
					}
				}
			});
	});
var $author$project$Data$Photo$photographerDecoder = A3(
	$MaybeJustJames$yaml$Yaml$Decode$map2,
	$author$project$Data$Photo$Photographer,
	A2($MaybeJustJames$yaml$Yaml$Decode$field, 'name', $MaybeJustJames$yaml$Yaml$Decode$string),
	A2($MaybeJustJames$yaml$Yaml$Decode$field, 'website', $MaybeJustJames$yaml$Yaml$Decode$string));
var $author$project$Data$Photo$photographersDecoder = A2(
	$MaybeJustJames$yaml$Yaml$Decode$field,
	'photographers',
	$MaybeJustJames$yaml$Yaml$Decode$dict($author$project$Data$Photo$photographerDecoder));
var $author$project$Data$Photo$yamlToPhotographers = function (content) {
	return A2(
		$elm$core$Result$withDefault,
		$elm$core$Dict$empty,
		A2($MaybeJustJames$yaml$Yaml$Decode$fromString, $author$project$Data$Photo$photographersDecoder, content));
};
var $author$project$Data$Photo$yamlFileToDataSourceGallery = function (path) {
	return A2(
		$dillonkearns$elm_pages$DataSource$andThen,
		function (photographers) {
			return A2(
				$dillonkearns$elm_pages$DataSource$map,
				function (gallery) {
					var photos = A2(
						$elm$core$List$map,
						$author$project$Data$Photo$yamlToPhoto(photographers),
						gallery.photos);
					return {photos: photos};
				},
				A2(
					$dillonkearns$elm_pages$DataSource$map,
					function (content) {
						return A2(
							$elm$core$Result$withDefault,
							{photos: _List_Nil},
							A2(
								$MaybeJustJames$yaml$Yaml$Decode$fromString,
								A2(
									$MaybeJustJames$yaml$Yaml$Decode$map,
									$author$project$Data$Photo$GalleryYAML,
									A2(
										$MaybeJustJames$yaml$Yaml$Decode$field,
										'photos',
										$MaybeJustJames$yaml$Yaml$Decode$list($author$project$Data$Photo$photoDecoder))),
								content));
					},
					$dillonkearns$elm_pages$DataSource$File$rawFile(path)));
		},
		A2(
			$dillonkearns$elm_pages$DataSource$map,
			$author$project$Data$Photo$yamlToPhotographers,
			$dillonkearns$elm_pages$DataSource$File$rawFile(path)));
};
var $author$project$Page$Gallery$data = $author$project$Data$Photo$yamlFileToDataSourceGallery('content/gallery.yaml');
var $author$project$Page$Gallery$head = function (_v0) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summaryLarge(
			_Utils_update(
				$author$project$Site$commonSeo,
				{title: 'Aspargesgården | Galleri'})));
};
var $author$project$Page$Gallery$Left = {$: 'Left'};
var $author$project$Page$Gallery$Right = {$: 'Right'};
var $author$project$Page$Gallery$toDirection = function (string) {
	switch (string) {
		case 'ArrowLeft':
			return $elm$core$Maybe$Just($author$project$Page$Gallery$Left);
		case 'ArrowRight':
			return $elm$core$Maybe$Just($author$project$Page$Gallery$Right);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Page$Gallery$keyDecoder = A2(
	$elm$json$Json$Decode$map,
	$author$project$Page$Gallery$toDirection,
	A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
var $author$project$Page$Gallery$nextSlideIndex = F2(
	function (slides, current) {
		var next = current + 1;
		var length = $elm$core$List$length(slides);
		return (_Utils_cmp(next, length) < 0) ? next : 0;
	});
var $elm$browser$Browser$Events$Document = {$: 'Document'};
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onKeyDown = A2($elm$browser$Browser$Events$on, $elm$browser$Browser$Events$Document, 'keydown');
var $author$project$Page$Gallery$previousSlideIndex = F2(
	function (slides, current) {
		var previous = current - 1;
		var length = $elm$core$List$length(slides);
		return (previous < 0) ? (length - 1) : previous;
	});
var $author$project$Page$Gallery$ToggleSlideShow = function (a) {
	return {$: 'ToggleSlideShow', a: a};
};
var $author$project$Tailwind$Utilities$bg_white = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 255, 255, var(--tw-bg-opacity))')
		]));
var $author$project$Tailwind$Utilities$bottom_2 = A2($rtfeldman$elm_css$Css$property, 'bottom', '0.5rem');
var $author$project$Tailwind$Utilities$h_14 = A2($rtfeldman$elm_css$Css$property, 'height', '3.5rem');
var $author$project$Tailwind$Utilities$rounded_full = A2($rtfeldman$elm_css$Css$property, 'border-radius', '9999px');
var $author$project$Tailwind$Utilities$text_4xl = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'font-size', '2.25rem'),
			A2($rtfeldman$elm_css$Css$property, 'line-height', '2.5rem')
		]));
var $author$project$Tailwind$Utilities$w_14 = A2($rtfeldman$elm_css$Css$property, 'width', '3.5rem');
var $author$project$Page$Gallery$arrowDivStyle = _List_fromArray(
	[$author$project$Tailwind$Utilities$w_14, $author$project$Tailwind$Utilities$h_14, $author$project$Tailwind$Utilities$text_4xl, $author$project$Tailwind$Utilities$text_brown_text, $author$project$Tailwind$Utilities$rounded_full, $author$project$Tailwind$Utilities$bg_white, $author$project$Tailwind$Utilities$absolute, $author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$flex_col, $author$project$Tailwind$Utilities$justify_center, $author$project$Tailwind$Utilities$text_center]);
var $rtfeldman$elm_css$VirtualDom$Styled$on = F2(
	function (eventName, handler) {
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$on, eventName, handler),
			false,
			'');
	});
var $rtfeldman$elm_css$Html$Styled$Events$on = F2(
	function (event, decoder) {
		return A2(
			$rtfeldman$elm_css$VirtualDom$Styled$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $rtfeldman$elm_css$Html$Styled$Events$onClick = function (msg) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $author$project$Tailwind$Utilities$right_2 = A2($rtfeldman$elm_css$Css$property, 'right', '0.5rem');
var $author$project$Tailwind$Utilities$top_2 = A2($rtfeldman$elm_css$Css$property, 'top', '0.5rem');
var $author$project$Page$Gallery$closeSlideShow = A2(
	$rtfeldman$elm_css$Html$Styled$div,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_Utils_ap(
				_List_fromArray(
					[$author$project$Tailwind$Utilities$top_2, $author$project$Tailwind$Utilities$right_2]),
				$author$project$Page$Gallery$arrowDivStyle)),
			$rtfeldman$elm_css$Html$Styled$Events$onClick(
			$author$project$Page$Gallery$ToggleSlideShow(0))
		]),
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$text('X')
		]));
var $author$project$Tailwind$Utilities$duration_100 = A2($rtfeldman$elm_css$Css$property, 'transition-duration', '100ms');
var $author$project$Tailwind$Utilities$ease_in_out = A2($rtfeldman$elm_css$Css$property, 'transition-timing-function', 'cubic-bezier(0.4, 0, 0.2, 1)');
var $author$project$Tailwind$Utilities$fixed = A2($rtfeldman$elm_css$Css$property, 'position', 'fixed');
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$Tailwind$Utilities$left_2 = A2($rtfeldman$elm_css$Css$property, 'left', '0.5rem');
var $author$project$Tailwind$Utilities$m_auto = A2($rtfeldman$elm_css$Css$property, 'margin', 'auto');
var $author$project$Tailwind$Utilities$max_w_screen_lg = A2($rtfeldman$elm_css$Css$property, 'max-width', '1024px');
var $author$project$Page$Gallery$NextSlide = {$: 'NextSlide'};
var $author$project$Tailwind$Utilities$bottom_6 = A2($rtfeldman$elm_css$Css$property, 'bottom', '1.5rem');
var $author$project$Tailwind$Utilities$pl_1 = A2($rtfeldman$elm_css$Css$property, 'padding-left', '0.25rem');
var $author$project$Tailwind$Utilities$top_1over2 = A2($rtfeldman$elm_css$Css$property, 'top', '50%');
var $author$project$Page$Gallery$nextArrow = A2(
	$rtfeldman$elm_css$Html$Styled$div,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Tailwind$Breakpoints$md(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$top_1over2])),
						$author$project$Tailwind$Utilities$right_2,
						$author$project$Tailwind$Utilities$bottom_6,
						$author$project$Tailwind$Utilities$pb_1,
						$author$project$Tailwind$Utilities$pl_1
					]),
				$author$project$Page$Gallery$arrowDivStyle)),
			$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$Page$Gallery$NextSlide)
		]),
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$text('❯')
		]));
var $author$project$Tailwind$Utilities$opacity_60 = A2($rtfeldman$elm_css$Css$property, 'opacity', '0.6');
var $author$project$Tailwind$Utilities$p_4 = A2($rtfeldman$elm_css$Css$property, 'padding', '1rem');
var $author$project$Tailwind$Utilities$pb_10 = A2($rtfeldman$elm_css$Css$property, 'padding-bottom', '2.5rem');
var $author$project$Page$Gallery$PreviousSlide = {$: 'PreviousSlide'};
var $author$project$Tailwind$Utilities$pr_1 = A2($rtfeldman$elm_css$Css$property, 'padding-right', '0.25rem');
var $author$project$Page$Gallery$previousArrow = A2(
	$rtfeldman$elm_css$Html$Styled$div,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Tailwind$Breakpoints$md(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$top_1over2])),
						$author$project$Tailwind$Utilities$left_2,
						$author$project$Tailwind$Utilities$bottom_6,
						$author$project$Tailwind$Utilities$pb_1,
						$author$project$Tailwind$Utilities$pr_1
					]),
				$author$project$Page$Gallery$arrowDivStyle)),
			$rtfeldman$elm_css$Html$Styled$Events$onClick($author$project$Page$Gallery$PreviousSlide)
		]),
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$text('❮')
		]));
var $author$project$Tailwind$Utilities$static = A2($rtfeldman$elm_css$Css$property, 'position', 'static');
var $author$project$Tailwind$Utilities$text_right = A2($rtfeldman$elm_css$Css$property, 'text-align', 'right');
var $author$project$Tailwind$Utilities$top_0 = A2($rtfeldman$elm_css$Css$property, 'top', '0px');
var $author$project$Tailwind$Utilities$w_4over5 = A2($rtfeldman$elm_css$Css$property, 'width', '80%');
var $author$project$Tailwind$Utilities$z_20 = A2($rtfeldman$elm_css$Css$property, 'z-index', '20');
var $author$project$Page$Gallery$slideShow = F2(
	function (gallery, index) {
		var maybePhoto = A2($elm_community$list_extra$List$Extra$getAt, index, gallery.photos);
		if (maybePhoto.$ === 'Just') {
			var photo = maybePhoto.a;
			return A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$duration_100, $author$project$Tailwind$Utilities$ease_in_out, $author$project$Tailwind$Utilities$z_20]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$w_full, $author$project$Tailwind$Utilities$h_full, $author$project$Tailwind$Utilities$bg_brown, $author$project$Tailwind$Utilities$fixed, $author$project$Tailwind$Utilities$top_0, $author$project$Tailwind$Utilities$left_0, $author$project$Tailwind$Utilities$opacity_60])),
								$rtfeldman$elm_css$Html$Styled$Events$onClick(
								$author$project$Page$Gallery$ToggleSlideShow(0))
							]),
						_List_Nil),
						A2(
						$rtfeldman$elm_css$Html$Styled$div,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$css(
								_List_fromArray(
									[
										$author$project$Tailwind$Breakpoints$xl(
										_List_fromArray(
											[$author$project$Tailwind$Utilities$left_2, $author$project$Tailwind$Utilities$right_2, $author$project$Tailwind$Utilities$bottom_2])),
										$author$project$Tailwind$Utilities$fixed,
										$author$project$Tailwind$Utilities$top_0,
										$author$project$Tailwind$Utilities$left_0,
										$author$project$Tailwind$Utilities$flex,
										$author$project$Tailwind$Utilities$flex_row,
										$author$project$Tailwind$Utilities$justify_center,
										$author$project$Tailwind$Utilities$h_full
									]))
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$div,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$author$project$Tailwind$Breakpoints$xl(
												_List_fromArray(
													[$author$project$Tailwind$Utilities$max_w_screen_lg])),
												$author$project$Tailwind$Breakpoints$md(
												_List_fromArray(
													[$author$project$Tailwind$Utilities$w_4over5])),
												$author$project$Tailwind$Utilities$m_auto,
												$author$project$Tailwind$Utilities$bg_white,
												$author$project$Tailwind$Utilities$p_4,
												$author$project$Tailwind$Utilities$pb_10,
												$author$project$Tailwind$Utilities$static
											]))
									]),
								_List_fromArray(
									[
										A2($author$project$View$Misc$responsiveImg, _List_Nil, photo.path),
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$Attributes$css(
												_List_fromArray(
													[$author$project$Tailwind$Utilities$text_right]))
											]),
										_List_fromArray(
											[
												A2($author$project$View$Misc$photographerLink, photo.photographer, 'Fotograf:')
											])),
										A2(
										$rtfeldman$elm_css$Html$Styled$div,
										_List_Nil,
										_List_fromArray(
											[
												$rtfeldman$elm_css$Html$Styled$text(photo.description)
											])),
										$author$project$Page$Gallery$closeSlideShow,
										$author$project$Page$Gallery$previousArrow,
										$author$project$Page$Gallery$nextArrow
									]))
							]))
					]));
		} else {
			return $rtfeldman$elm_css$Html$Styled$text('');
		}
	});
var $author$project$Tailwind$Utilities$mb_6 = A2($rtfeldman$elm_css$Css$property, 'margin-bottom', '1.5rem');
var $author$project$Tailwind$Utilities$mr_6 = A2($rtfeldman$elm_css$Css$property, 'margin-right', '1.5rem');
var $author$project$Tailwind$Utilities$w_108 = A2($rtfeldman$elm_css$Css$property, 'width', '27rem');
var $author$project$Tailwind$Utilities$w_80 = A2($rtfeldman$elm_css$Css$property, 'width', '20rem');
var $author$project$Page$Gallery$thumbnail = F2(
	function (index, photo) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$Tailwind$Breakpoints$lg(
							_List_fromArray(
								[$author$project$Tailwind$Utilities$w_108])),
							$author$project$Tailwind$Breakpoints$md(
							_List_fromArray(
								[$author$project$Tailwind$Utilities$w_80, $author$project$Tailwind$Utilities$mr_6, $author$project$Tailwind$Utilities$mb_6]))
						]))
				]),
			_List_fromArray(
				[
					A4(
					$author$project$View$Misc$imgWithPhotographer,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Events$onClick(
							$author$project$Page$Gallery$ToggleSlideShow(index))
						]),
					_List_Nil,
					photo.path,
					photo.photographer)
				]));
	});
var $author$project$View$Misc$viewIf = F2(
	function (condition, content) {
		return condition ? content : $rtfeldman$elm_css$Html$Styled$text('');
	});
var $author$project$Page$Gallery$view = F4(
	function (_v0, _v1, model, _static) {
		return A2(
			$author$project$View$html,
			'Galleri',
			_List_fromArray(
				[
					$author$project$View$Misc$container(
					_List_fromArray(
						[
							A2(
							$author$project$View$Misc$viewIf,
							model.showSlide,
							A2($author$project$Page$Gallery$slideShow, _static.data, model.slide)),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_Nil,
							_List_fromArray(
								[
									$author$project$View$Misc$headline('Galleri')
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[$author$project$Tailwind$Utilities$w_full, $author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$flex_row, $author$project$Tailwind$Utilities$flex_wrap]))
								]),
							A2($elm$core$List$indexedMap, $author$project$Page$Gallery$thumbnail, _static.data.photos))
						]))
				]));
	});
var $author$project$Page$Gallery$page = A2(
	$author$project$Page$buildWithLocalState,
	{
		init: F3(
			function (_v0, _v1, staticPayload) {
				return _Utils_Tuple2(
					{gallery: staticPayload.data, showSlide: false, slide: 0},
					$elm$core$Platform$Cmd$none);
			}),
		subscriptions: F4(
			function (_v2, _v3, _v4, _v5) {
				return A2(
					$elm$core$Platform$Sub$map,
					$author$project$Page$Gallery$OnKeyPress,
					$elm$browser$Browser$Events$onKeyDown($author$project$Page$Gallery$keyDecoder));
			}),
		update: F6(
			function (_v6, _v7, _v8, _v9, msg, model) {
				switch (msg.$) {
					case 'OnKeyPress':
						if (msg.a.$ === 'Just') {
							var direction = msg.a.a;
							if (direction.$ === 'Right') {
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{
											slide: A2($author$project$Page$Gallery$nextSlideIndex, model.gallery.photos, model.slide)
										}),
									$elm$core$Platform$Cmd$none);
							} else {
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{
											slide: A2($author$project$Page$Gallery$previousSlideIndex, model.gallery.photos, model.slide)
										}),
									$elm$core$Platform$Cmd$none);
							}
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					case 'ToggleSlideShow':
						var slide = msg.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{showSlide: !model.showSlide, slide: slide}),
							$elm$core$Platform$Cmd$none);
					case 'PreviousSlide':
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									slide: A2($author$project$Page$Gallery$previousSlideIndex, model.gallery.photos, model.slide)
								}),
							$elm$core$Platform$Cmd$none);
					default:
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									slide: A2($author$project$Page$Gallery$nextSlideIndex, model.gallery.photos, model.slide)
								}),
							$elm$core$Platform$Cmd$none);
				}
			}),
		view: $author$project$Page$Gallery$view
	},
	$author$project$Page$single(
		{data: $author$project$Page$Gallery$data, head: $author$project$Page$Gallery$head}));
var $author$project$Page$Index$data = $dillonkearns$elm_pages$DataSource$succeed(_Utils_Tuple0);
var $author$project$Page$Index$head = function (_v0) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summaryLarge(
			_Utils_update(
				$author$project$Site$commonSeo,
				{title: 'Aspargesgården | Velkommen'})));
};
var $rtfeldman$elm_css$Css$backgroundAttachment = $rtfeldman$elm_css$Css$prop1('background-attachment');
var $rtfeldman$elm_css$Css$Internal$property = F2(
	function (key, value) {
		return $rtfeldman$elm_css$Css$Preprocess$AppendProperty(
			$rtfeldman$elm_css$Css$Structure$Property(key + (':' + value)));
	});
var $rtfeldman$elm_css$Css$Internal$getOverloadedProperty = F3(
	function (functionName, desiredKey, style) {
		getOverloadedProperty:
		while (true) {
			switch (style.$) {
				case 'AppendProperty':
					var str = style.a.a;
					var key = A2(
						$elm$core$Maybe$withDefault,
						'',
						$elm$core$List$head(
							A2($elm$core$String$split, ':', str)));
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, key);
				case 'ExtendSelector':
					var selector = style.a;
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-selector'));
				case 'NestSnippet':
					var combinator = style.a;
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-combinator'));
				case 'WithPseudoElement':
					var pseudoElement = style.a;
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-pseudo-element setter'));
				case 'WithMedia':
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-media-query'));
				case 'WithKeyframes':
					return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-inapplicable-Style-for-keyframes'));
				default:
					if (!style.a.b) {
						return A2($rtfeldman$elm_css$Css$Internal$property, desiredKey, 'elm-css-error-cannot-apply-' + (functionName + '-with-empty-Style'));
					} else {
						if (!style.a.b.b) {
							var _v1 = style.a;
							var only = _v1.a;
							var $temp$functionName = functionName,
								$temp$desiredKey = desiredKey,
								$temp$style = only;
							functionName = $temp$functionName;
							desiredKey = $temp$desiredKey;
							style = $temp$style;
							continue getOverloadedProperty;
						} else {
							var _v2 = style.a;
							var first = _v2.a;
							var rest = _v2.b;
							var $temp$functionName = functionName,
								$temp$desiredKey = desiredKey,
								$temp$style = $rtfeldman$elm_css$Css$Preprocess$ApplyStyles(rest);
							functionName = $temp$functionName;
							desiredKey = $temp$desiredKey;
							style = $temp$style;
							continue getOverloadedProperty;
						}
					}
			}
		}
	});
var $rtfeldman$elm_css$Css$Internal$IncompatibleUnits = {$: 'IncompatibleUnits'};
var $rtfeldman$elm_css$Css$Internal$lengthConverter = F3(
	function (units, unitLabel, numericValue) {
		return {
			absoluteLength: $rtfeldman$elm_css$Css$Structure$Compatible,
			calc: $rtfeldman$elm_css$Css$Structure$Compatible,
			flexBasis: $rtfeldman$elm_css$Css$Structure$Compatible,
			fontSize: $rtfeldman$elm_css$Css$Structure$Compatible,
			length: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrAuto: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrAutoOrCoverOrContain: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNone: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNoneOrMinMaxDimension: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNumber: $rtfeldman$elm_css$Css$Structure$Compatible,
			lengthOrNumberOrAutoOrNoneOrContent: $rtfeldman$elm_css$Css$Structure$Compatible,
			numericValue: numericValue,
			textIndent: $rtfeldman$elm_css$Css$Structure$Compatible,
			unitLabel: unitLabel,
			units: units,
			value: _Utils_ap(
				$elm$core$String$fromFloat(numericValue),
				unitLabel)
		};
	});
var $rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty = A3($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$Internal$IncompatibleUnits, '', 0);
var $rtfeldman$elm_css$Css$backgroundPosition = function (fn) {
	return A3(
		$rtfeldman$elm_css$Css$Internal$getOverloadedProperty,
		'backgroundPosition',
		'background-position',
		fn($rtfeldman$elm_css$Css$Internal$lengthForOverloadedProperty));
};
var $rtfeldman$elm_css$Css$backgroundRepeat = $rtfeldman$elm_css$Css$prop1('background-repeat');
var $rtfeldman$elm_css$Css$backgroundSize = $rtfeldman$elm_css$Css$prop1('background-size');
var $rtfeldman$elm_css$Css$center = $rtfeldman$elm_css$Css$prop1('center');
var $rtfeldman$elm_css$Css$cover = {lengthOrAutoOrCoverOrContain: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'cover'};
var $rtfeldman$elm_css$Css$fixed = {backgroundAttachment: $rtfeldman$elm_css$Css$Structure$Compatible, position: $rtfeldman$elm_css$Css$Structure$Compatible, tableLayout: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'fixed'};
var $rtfeldman$elm_css$Css$Global$global = function (snippets) {
	return $rtfeldman$elm_css$VirtualDom$Styled$unstyledNode(
		A3(
			$elm$virtual_dom$VirtualDom$node,
			'span',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'style', 'display: none;'),
					A2($elm$virtual_dom$VirtualDom$attribute, 'class', 'elm-css-style-wrapper')
				]),
			$elm$core$List$singleton(
				A3(
					$elm$virtual_dom$VirtualDom$node,
					'style',
					_List_Nil,
					$elm$core$List$singleton(
						$elm$virtual_dom$VirtualDom$text(
							$rtfeldman$elm_css$Css$Preprocess$Resolve$compile(
								$rtfeldman$elm_css$Css$Preprocess$stylesheet(snippets))))))));
};
var $author$project$Tailwind$Utilities$h_screen = A2($rtfeldman$elm_css$Css$property, 'height', '100vh');
var $rtfeldman$elm_css$Css$noRepeat = {backgroundRepeat: $rtfeldman$elm_css$Css$Structure$Compatible, backgroundRepeatShorthand: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'no-repeat'};
var $rtfeldman$elm_css$Css$backgroundImage = $rtfeldman$elm_css$Css$prop1('background-image');
var $rtfeldman$elm_css$Css$Media$feature = F2(
	function (key, _v0) {
		var value = _v0.value;
		return {
			feature: key,
			value: $elm$core$Maybe$Just(value)
		};
	});
var $rtfeldman$elm_css$Css$Media$maxWidth = function (value) {
	return A2($rtfeldman$elm_css$Css$Media$feature, 'max-width', value);
};
var $rtfeldman$elm_css$Css$Preprocess$MediaRule = F2(
	function (a, b) {
		return {$: 'MediaRule', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Global$media = F2(
	function (queries, snippets) {
		var snippetDeclarations = A2($elm$core$List$concatMap, $rtfeldman$elm_css$Css$Preprocess$unwrapSnippet, snippets);
		var nestedMediaRules = function (declarations) {
			nestedMediaRules:
			while (true) {
				if (!declarations.b) {
					return _List_Nil;
				} else {
					switch (declarations.a.$) {
						case 'StyleBlockDeclaration':
							var rest = declarations.b;
							var $temp$declarations = rest;
							declarations = $temp$declarations;
							continue nestedMediaRules;
						case 'MediaRule':
							var _v1 = declarations.a;
							var nestedMediaQueries = _v1.a;
							var styleBlocks = _v1.b;
							var rest = declarations.b;
							return A2(
								$elm$core$List$cons,
								A2(
									$rtfeldman$elm_css$Css$Preprocess$MediaRule,
									A2($elm$core$List$append, queries, nestedMediaQueries),
									styleBlocks),
								nestedMediaRules(rest));
						default:
							var first = declarations.a;
							var rest = declarations.b;
							return A2(
								$elm$core$List$cons,
								first,
								nestedMediaRules(rest));
					}
				}
			}
		};
		var extractStyleBlocks = function (declarations) {
			extractStyleBlocks:
			while (true) {
				if (!declarations.b) {
					return _List_Nil;
				} else {
					if (declarations.a.$ === 'StyleBlockDeclaration') {
						var styleBlock = declarations.a.a;
						var rest = declarations.b;
						return A2(
							$elm$core$List$cons,
							styleBlock,
							extractStyleBlocks(rest));
					} else {
						var rest = declarations.b;
						var $temp$declarations = rest;
						declarations = $temp$declarations;
						continue extractStyleBlocks;
					}
				}
			}
		};
		var mediaRuleFromStyleBlocks = A2(
			$rtfeldman$elm_css$Css$Preprocess$MediaRule,
			queries,
			extractStyleBlocks(snippetDeclarations));
		return $rtfeldman$elm_css$Css$Preprocess$Snippet(
			A2(
				$elm$core$List$cons,
				mediaRuleFromStyleBlocks,
				nestedMediaRules(snippetDeclarations)));
	});
var $rtfeldman$elm_css$Css$Structure$OnlyQuery = F2(
	function (a, b) {
		return {$: 'OnlyQuery', a: a, b: b};
	});
var $rtfeldman$elm_css$Css$Media$only = $rtfeldman$elm_css$Css$Structure$OnlyQuery;
var $rtfeldman$elm_css$Css$PxUnits = {$: 'PxUnits'};
var $rtfeldman$elm_css$Css$px = A2($rtfeldman$elm_css$Css$Internal$lengthConverter, $rtfeldman$elm_css$Css$PxUnits, 'px');
var $rtfeldman$elm_css$Css$Structure$Screen = {$: 'Screen'};
var $rtfeldman$elm_css$Css$Media$screen = $rtfeldman$elm_css$Css$Structure$Screen;
var $rtfeldman$elm_css$Css$url = function (urlValue) {
	return {backgroundImage: $rtfeldman$elm_css$Css$Structure$Compatible, value: 'url(' + (urlValue + ')')};
};
var $author$project$View$Misc$responsiveBackgroundImageByScreenWidth = F3(
	function (basePath, className, size) {
		var webp = A2(
			$rtfeldman$elm_css$Css$Global$selector,
			'.webp.notavif .' + className,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$backgroundImage(
					$rtfeldman$elm_css$Css$url(
						A3($author$project$View$Misc$responsiveImageFile, basePath, size, 'webp')))
				]));
		var jpeg = A2(
			$rtfeldman$elm_css$Css$Global$selector,
			'.notwebp.notavif .' + className,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$backgroundImage(
					$rtfeldman$elm_css$Css$url(
						A3($author$project$View$Misc$responsiveImageFile, basePath, size, 'jpeg')))
				]));
		var avif = A2(
			$rtfeldman$elm_css$Css$Global$selector,
			'.avif .' + className,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$backgroundImage(
					$rtfeldman$elm_css$Css$url(
						A3($author$project$View$Misc$responsiveImageFile, basePath, size, 'avif')))
				]));
		return A2(
			$rtfeldman$elm_css$Css$Global$media,
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Css$Media$only,
					$rtfeldman$elm_css$Css$Media$screen,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Css$Media$maxWidth(
							$rtfeldman$elm_css$Css$px(size))
						]))
				]),
			_List_fromArray(
				[avif, webp, jpeg]));
	});
var $author$project$View$Misc$responsiveBackgroundImage = F2(
	function (basePath, className) {
		return A2(
			$elm$core$List$map,
			function (size) {
				return A3($author$project$View$Misc$responsiveBackgroundImageByScreenWidth, basePath, className, size);
			},
			$author$project$View$Misc$imgSizes);
	});
var $author$project$Tailwind$Utilities$text_5xl = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'font-size', '3rem'),
			A2($rtfeldman$elm_css$Css$property, 'line-height', '1')
		]));
var $author$project$Tailwind$Utilities$text_white = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 255, 255, var(--tw-text-opacity))')
		]));
var $author$project$Page$Index$view = F3(
	function (_v0, _v1, _v2) {
		var className = 'welcome-page';
		var backgroundImage = A2($author$project$View$Misc$responsiveBackgroundImage, 'bilder/forside', className);
		return A2(
			$author$project$View$html,
			'Velkommen',
			_List_fromArray(
				[
					$rtfeldman$elm_css$Css$Global$global(backgroundImage),
					A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$class(className),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[
									$author$project$Tailwind$Utilities$h_screen,
									$author$project$Tailwind$Utilities$flex,
									$author$project$Tailwind$Utilities$flex_col,
									$author$project$Tailwind$Utilities$justify_center,
									$rtfeldman$elm_css$Css$backgroundRepeat($rtfeldman$elm_css$Css$noRepeat),
									$rtfeldman$elm_css$Css$backgroundPosition($rtfeldman$elm_css$Css$center),
									$rtfeldman$elm_css$Css$backgroundSize($rtfeldman$elm_css$Css$cover),
									$rtfeldman$elm_css$Css$backgroundAttachment($rtfeldman$elm_css$Css$fixed)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$author$project$Tailwind$Breakpoints$lg(
											_List_fromArray(
												[$author$project$Tailwind$Utilities$text_4xl])),
											$author$project$Tailwind$Utilities$text_center,
											$author$project$Tailwind$Utilities$text_white,
											$author$project$Tailwind$Utilities$text_3xl,
											$rtfeldman$elm_css$Css$fontFamilies(
											_List_fromArray(
												['rift-soft', 'sans-serif']))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text('Velkommen til')
								])),
							A2(
							$rtfeldman$elm_css$Html$Styled$div,
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$Attributes$css(
									_List_fromArray(
										[
											$author$project$Tailwind$Breakpoints$lg(
											_List_fromArray(
												[$author$project$Tailwind$Utilities$text_8xl])),
											$author$project$Tailwind$Utilities$text_center,
											$author$project$Tailwind$Utilities$text_white,
											$author$project$Tailwind$Utilities$text_5xl,
											$author$project$Tailwind$Utilities$py_6,
											$rtfeldman$elm_css$Css$fontFamilies(
											_List_fromArray(
												['luxus-brut', 'cursive']))
										]))
								]),
							_List_fromArray(
								[
									$rtfeldman$elm_css$Html$Styled$text('Aspargesgården')
								])),
							$author$project$View$Misc$contact
						]))
				]));
	});
var $author$project$Page$Index$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Index$view},
	$author$project$Page$single(
		{data: $author$project$Page$Index$data, head: $author$project$Page$Index$head}));
var $author$project$TemplateModulesBeta$dataForRoute = function (route) {
	if (route.$ === 'Nothing') {
		return $dillonkearns$elm_pages$DataSource$succeed($author$project$TemplateModulesBeta$Data404NotFoundPage____);
	} else {
		switch (route.a.$) {
			case 'About':
				var _v1 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataAbout,
					$author$project$Page$About$page.data(
						{}));
			case 'Contact':
				var _v2 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataContact,
					$author$project$Page$Contact$page.data(
						{}));
			case 'Facilities':
				var _v3 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataFacilities,
					$author$project$Page$Facilities$page.data(
						{}));
			case 'Gallery':
				var _v4 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataGallery,
					$author$project$Page$Gallery$page.data(
						{}));
			default:
				var _v5 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataIndex,
					$author$project$Page$Index$page.data(
						{}));
		}
	}
};
var $author$project$TemplateModulesBeta$fromJsPort = _Platform_incomingPort('fromJsPort', $elm$json$Json$Decode$value);
var $author$project$TemplateModulesBeta$handleRoute = function (maybeRoute) {
	if (maybeRoute.$ === 'Nothing') {
		return $dillonkearns$elm_pages$DataSource$succeed($elm$core$Maybe$Nothing);
	} else {
		switch (maybeRoute.a.$) {
			case 'About':
				var _v1 = maybeRoute.a;
				return A3(
					$author$project$Page$About$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['About']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('about')
								])
						}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			case 'Contact':
				var _v2 = maybeRoute.a;
				return A3(
					$author$project$Page$Contact$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Contact']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('contact')
								])
						}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			case 'Facilities':
				var _v3 = maybeRoute.a;
				return A3(
					$author$project$Page$Facilities$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Facilities']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('facilities')
								])
						}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			case 'Gallery':
				var _v4 = maybeRoute.a;
				return A3(
					$author$project$Page$Gallery$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Gallery']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('gallery')
								])
						}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			default:
				var _v5 = maybeRoute.a;
				return A3(
					$author$project$Page$Index$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Index']),
						routePattern: {ending: $elm$core$Maybe$Nothing, segments: _List_Nil}
					},
					function (param) {
						return _List_Nil;
					},
					{});
		}
	}
};
var $author$project$TemplateModulesBeta$ModelAbout = function (a) {
	return {$: 'ModelAbout', a: a};
};
var $author$project$TemplateModulesBeta$ModelContact = function (a) {
	return {$: 'ModelContact', a: a};
};
var $author$project$TemplateModulesBeta$ModelFacilities = function (a) {
	return {$: 'ModelFacilities', a: a};
};
var $author$project$TemplateModulesBeta$ModelGallery = function (a) {
	return {$: 'ModelGallery', a: a};
};
var $author$project$TemplateModulesBeta$ModelIndex = function (a) {
	return {$: 'ModelIndex', a: a};
};
var $author$project$TemplateModulesBeta$MsgAbout = function (a) {
	return {$: 'MsgAbout', a: a};
};
var $author$project$TemplateModulesBeta$MsgContact = function (a) {
	return {$: 'MsgContact', a: a};
};
var $author$project$TemplateModulesBeta$MsgFacilities = function (a) {
	return {$: 'MsgFacilities', a: a};
};
var $author$project$TemplateModulesBeta$MsgGallery = function (a) {
	return {$: 'MsgGallery', a: a};
};
var $author$project$TemplateModulesBeta$MsgIndex = function (a) {
	return {$: 'MsgIndex', a: a};
};
var $author$project$TemplateModulesBeta$NotFound = {$: 'NotFound'};
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Tuple$mapBoth = F3(
	function (funcA, funcB, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			funcA(x),
			funcB(y));
	});
var $author$project$Shared$OnPageChange = function (a) {
	return {$: 'OnPageChange', a: a};
};
var $author$project$Shared$data = $dillonkearns$elm_pages$DataSource$succeed(_Utils_Tuple0);
var $author$project$Shared$init = F3(
	function (navigationKey, flags, maybePagePath) {
		return _Utils_Tuple2(
			{counter: 0, navigationKey: navigationKey, showMobileMenu: false},
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Shared$subscriptions = F2(
	function (_v0, _v1) {
		return $elm$core$Platform$Sub$none;
	});
var $author$project$Shared$update = F2(
	function (msg, model) {
		if (msg.$ === 'OnPageChange') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{showMobileMenu: false}),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{counter: model.counter + 1}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Tailwind$Utilities$antialiased = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '-webkit-font-smoothing', 'antialiased'),
			A2($rtfeldman$elm_css$Css$property, '-moz-osx-font-smoothing', 'grayscale')
		]));
var $rtfeldman$elm_css$Css$Global$mediaQuery = F2(
	function (stringQueries, snippets) {
		return A2(
			$rtfeldman$elm_css$Css$Global$media,
			A2($elm$core$List$map, $rtfeldman$elm_css$Css$Structure$CustomQuery, stringQueries),
			snippets);
	});
var $author$project$Tailwind$Utilities$globalStyles = _List_fromArray(
	[
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'*,\n::before,\n::after',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'box-sizing', 'border-box')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'html',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '-moz-tab-size', '4'),
				A2($rtfeldman$elm_css$Css$property, 'tab-size', '4')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'html',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'line-height', '1.15'),
				A2($rtfeldman$elm_css$Css$property, '-webkit-text-size-adjust', '100%')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'body',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'margin', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'body',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-family', 'system-ui,\n\t\t-apple-system, \n\t\t\'Segoe UI\',\n\t\tRoboto,\n\t\tHelvetica,\n\t\tArial,\n\t\tsans-serif,\n\t\t\'Apple Color Emoji\',\n\t\t\'Segoe UI Emoji\'')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'hr',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'height', '0'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'inherit')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'abbr[title]',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'underline dotted')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'b,\nstrong',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-weight', 'bolder')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'code,\nkbd,\nsamp,\npre',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-family', 'ui-monospace,\n\t\tSFMono-Regular,\n\t\tConsolas,\n\t\t\'Liberation Mono\',\n\t\tMenlo,\n\t\tmonospace'),
				A2($rtfeldman$elm_css$Css$property, 'font-size', '1em')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'small',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-size', '80%')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'sub,\nsup',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-size', '75%'),
				A2($rtfeldman$elm_css$Css$property, 'line-height', '0'),
				A2($rtfeldman$elm_css$Css$property, 'position', 'relative'),
				A2($rtfeldman$elm_css$Css$property, 'vertical-align', 'baseline')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'sub',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'bottom', '-0.25em')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'sup',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'top', '-0.5em')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'table',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'text-indent', '0'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'inherit')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'button,\ninput,\noptgroup,\nselect,\ntextarea',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-family', 'inherit'),
				A2($rtfeldman$elm_css$Css$property, 'font-size', '100%'),
				A2($rtfeldman$elm_css$Css$property, 'line-height', '1.15'),
				A2($rtfeldman$elm_css$Css$property, 'margin', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'button,\nselect',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'text-transform', 'none')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'button,\n[type=\'button\'],\n[type=\'reset\'],\n[type=\'submit\']',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '-webkit-appearance', 'button')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'::-moz-focus-inner',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'border-style', 'none'),
				A2($rtfeldman$elm_css$Css$property, 'padding', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		':-moz-focusring',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'outline', '1px dotted ButtonText')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		':-moz-ui-invalid',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'none')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'legend',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'padding', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'progress',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'vertical-align', 'baseline')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'::-webkit-inner-spin-button,\n::-webkit-outer-spin-button',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'height', 'auto')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'[type=\'search\']',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '-webkit-appearance', 'textfield'),
				A2($rtfeldman$elm_css$Css$property, 'outline-offset', '-2px')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'::-webkit-search-decoration',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '-webkit-appearance', 'none')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'::-webkit-file-upload-button',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '-webkit-appearance', 'button'),
				A2($rtfeldman$elm_css$Css$property, 'font', 'inherit')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'summary',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'display', 'list-item')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'blockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'margin', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'button',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'transparent'),
				A2($rtfeldman$elm_css$Css$property, 'background-image', 'none')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'fieldset',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'margin', '0'),
				A2($rtfeldman$elm_css$Css$property, 'padding', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'ol,\nul',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'list-style', 'none'),
				A2($rtfeldman$elm_css$Css$property, 'margin', '0'),
				A2($rtfeldman$elm_css$Css$property, 'padding', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'html',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-family', 'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"'),
				A2($rtfeldman$elm_css$Css$property, 'line-height', '1.5')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'body',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-family', 'inherit'),
				A2($rtfeldman$elm_css$Css$property, 'line-height', 'inherit')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'*,\n::before,\n::after',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'box-sizing', 'border-box'),
				A2($rtfeldman$elm_css$Css$property, 'border-width', '0'),
				A2($rtfeldman$elm_css$Css$property, 'border-style', 'solid'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'currentColor')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'hr',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'border-top-width', '1px')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'img',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'border-style', 'solid')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'textarea',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'resize', 'vertical')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'input::placeholder,\ntextarea::placeholder',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', '#9ca3af')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'button,\n[role=\"button\"]',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'cursor', 'pointer')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		':-moz-focusring',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'outline', 'auto')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'table',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'border-collapse', 'collapse')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'h1,\nh2,\nh3,\nh4,\nh5,\nh6',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-size', 'inherit'),
				A2($rtfeldman$elm_css$Css$property, 'font-weight', 'inherit')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'a',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'color', 'inherit'),
				A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'inherit')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'button,\ninput,\noptgroup,\nselect,\ntextarea',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'padding', '0'),
				A2($rtfeldman$elm_css$Css$property, 'line-height', 'inherit'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'inherit')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'pre,\ncode,\nkbd,\nsamp',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'font-family', 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'img,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'display', 'block'),
				A2($rtfeldman$elm_css$Css$property, 'vertical-align', 'middle')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'img,\nvideo',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'max-width', '100%'),
				A2($rtfeldman$elm_css$Css$property, 'height', 'auto')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'[hidden]',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'display', 'none')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'*, ::before, ::after',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(229, 231, 235, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-transparent',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'transparent')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-current',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'currentColor')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-black',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(0, 0, 0, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-white',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 255, 255, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 250, 251, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(243, 244, 246, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(229, 231, 235, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 213, 219, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 163, 175, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(107, 114, 128, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(75, 85, 99, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 65, 81, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(31, 41, 55, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-gray-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(17, 24, 39, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 242, 242, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 226, 226, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 202, 202, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 165, 165, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(248, 113, 113, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 68, 68, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(220, 38, 38, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(185, 28, 28, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(153, 27, 27, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-red-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(127, 29, 29, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 251, 235, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 243, 199, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 230, 138, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 211, 77, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 191, 36, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 158, 11, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(217, 119, 6, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(180, 83, 9, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(146, 64, 14, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-yellow-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(120, 53, 15, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 253, 245, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 250, 229, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 243, 208, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(110, 231, 183, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(52, 211, 153, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(16, 185, 129, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(5, 150, 105, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(4, 120, 87, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 95, 70, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-green-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 78, 59, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 246, 255, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 234, 254, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(191, 219, 254, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(147, 197, 253, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(96, 165, 250, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(59, 130, 246, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(37, 99, 235, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(29, 78, 216, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 64, 175, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-blue-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 58, 138, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(238, 242, 255, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 231, 255, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(199, 210, 254, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(165, 180, 252, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(129, 140, 248, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(99, 102, 241, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(79, 70, 229, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(67, 56, 202, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 48, 163, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-indigo-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(49, 46, 129, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 243, 255, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(237, 233, 254, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(221, 214, 254, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(196, 181, 253, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 139, 250, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(139, 92, 246, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(124, 58, 237, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(109, 40, 217, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(91, 33, 182, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-purple-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(76, 29, 149, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 242, 248, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 231, 243, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 207, 232, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 168, 212, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(244, 114, 182, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 72, 153, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 39, 119, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(190, 24, 93, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(157, 23, 77, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-pink-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(131, 24, 67, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-brown-border',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(182, 167, 161, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-brown-link',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 141, 135, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-brown-link-active',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 195, 188, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-brown',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(183, 168, 162, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-brown-text',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(117, 116, 113, var(--tw-border-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-0',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-5',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.05')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-10',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.1')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-20',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.2')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-25',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.25')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-30',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.3')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-40',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.4')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.5')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-60',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.6')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-70',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.7')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-75',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.75')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-80',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.8')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-90',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.9')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-95',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.95')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:border-opacity-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-transparent',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'transparent')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-current',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'currentColor')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-black',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(0, 0, 0, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-white',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 255, 255, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 250, 251, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(243, 244, 246, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(229, 231, 235, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 213, 219, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 163, 175, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(107, 114, 128, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(75, 85, 99, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 65, 81, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(31, 41, 55, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-gray-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(17, 24, 39, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 242, 242, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 226, 226, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 202, 202, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 165, 165, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(248, 113, 113, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 68, 68, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(220, 38, 38, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(185, 28, 28, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(153, 27, 27, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-red-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(127, 29, 29, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 251, 235, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 243, 199, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 230, 138, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 211, 77, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 191, 36, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 158, 11, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(217, 119, 6, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(180, 83, 9, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(146, 64, 14, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-yellow-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(120, 53, 15, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 253, 245, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 250, 229, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 243, 208, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(110, 231, 183, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(52, 211, 153, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(16, 185, 129, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(5, 150, 105, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(4, 120, 87, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 95, 70, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-green-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 78, 59, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 246, 255, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 234, 254, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(191, 219, 254, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(147, 197, 253, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(96, 165, 250, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(59, 130, 246, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(37, 99, 235, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(29, 78, 216, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 64, 175, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-blue-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 58, 138, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(238, 242, 255, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 231, 255, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(199, 210, 254, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(165, 180, 252, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(129, 140, 248, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(99, 102, 241, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(79, 70, 229, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(67, 56, 202, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 48, 163, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-indigo-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(49, 46, 129, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 243, 255, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(237, 233, 254, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(221, 214, 254, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(196, 181, 253, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 139, 250, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(139, 92, 246, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(124, 58, 237, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(109, 40, 217, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(91, 33, 182, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-purple-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(76, 29, 149, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 242, 248, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 231, 243, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 207, 232, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 168, 212, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(244, 114, 182, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 72, 153, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 39, 119, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(190, 24, 93, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(157, 23, 77, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-pink-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(131, 24, 67, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-brown-border',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(182, 167, 161, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-brown-link',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 141, 135, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-brown-link-active',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 195, 188, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-brown',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(183, 168, 162, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-brown-text',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(117, 116, 113, var(--tw-bg-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-0',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-5',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.05')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-10',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.1')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-20',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.2')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-25',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.25')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-30',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.3')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-40',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.4')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.5')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-60',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.6')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-70',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.7')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-75',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.75')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-80',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.8')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-90',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.9')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-95',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.95')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:bg-opacity-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-transparent',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'color', 'transparent')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-current',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'color', 'currentColor')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-black',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(0, 0, 0, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-white',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 255, 255, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 250, 251, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(243, 244, 246, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(229, 231, 235, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 213, 219, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 163, 175, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(107, 114, 128, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(75, 85, 99, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 65, 81, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(31, 41, 55, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-gray-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(17, 24, 39, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 242, 242, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 226, 226, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 202, 202, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 165, 165, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(248, 113, 113, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 68, 68, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(220, 38, 38, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(185, 28, 28, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(153, 27, 27, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-red-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(127, 29, 29, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 251, 235, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 243, 199, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 230, 138, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 211, 77, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 191, 36, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 158, 11, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(217, 119, 6, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(180, 83, 9, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(146, 64, 14, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-yellow-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(120, 53, 15, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 253, 245, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 250, 229, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 243, 208, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(110, 231, 183, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(52, 211, 153, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(16, 185, 129, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(5, 150, 105, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(4, 120, 87, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 95, 70, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-green-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 78, 59, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 246, 255, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 234, 254, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(191, 219, 254, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(147, 197, 253, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(96, 165, 250, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(59, 130, 246, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(37, 99, 235, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(29, 78, 216, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 64, 175, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-blue-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 58, 138, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(238, 242, 255, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 231, 255, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(199, 210, 254, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(165, 180, 252, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(129, 140, 248, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(99, 102, 241, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(79, 70, 229, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(67, 56, 202, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 48, 163, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-indigo-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(49, 46, 129, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 243, 255, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(237, 233, 254, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(221, 214, 254, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(196, 181, 253, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 139, 250, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(139, 92, 246, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(124, 58, 237, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(109, 40, 217, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(91, 33, 182, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-purple-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(76, 29, 149, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 242, 248, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 231, 243, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-200',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 207, 232, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-300',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 168, 212, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-400',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(244, 114, 182, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-500',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 72, 153, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-600',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 39, 119, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-700',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(190, 24, 93, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-800',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(157, 23, 77, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-pink-900',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(131, 24, 67, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-brown-border',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(182, 167, 161, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-brown-link',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 141, 135, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-brown-link-active',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 195, 188, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-brown',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(183, 168, 162, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-brown-text',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
				A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(117, 116, 113, var(--tw-text-opacity))')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-0',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-5',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.05')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-10',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.1')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-20',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.2')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-25',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.25')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-30',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.3')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-40',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.4')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.5')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-60',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.6')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-70',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.7')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-75',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.75')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-80',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.8')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-90',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.9')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-95',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.95')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:text-opacity-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:underline',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'underline')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:line-through',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'line-through')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:no-underline',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'none')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-0',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-5',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.05')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-10',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.1')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-20',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.2')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-25',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.25')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-30',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.3')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-40',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.4')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-50',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.5')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-60',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.6')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-70',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.7')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-75',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.75')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-80',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.8')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-90',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.9')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-95',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '0.95')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:opacity-100',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, 'opacity', '1')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'*, ::before, ::after',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 0 #0000')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:shadow-sm',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 2px 0 rgba(0, 0, 0, 0.05)'),
				A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:shadow',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)'),
				A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:shadow-md',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'),
				A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:shadow-lg',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'),
				A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:shadow-xl',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'),
				A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:shadow-2xl',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 25px 50px -12px rgba(0, 0, 0, 0.25)'),
				A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:shadow-inner',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-shadow', 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)'),
				A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'.group:hover .group-hover\\:shadow-none',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 0 #0000'),
				A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$selector,
		'*, ::before, ::after',
		_List_fromArray(
			[
				A2($rtfeldman$elm_css$Css$property, '--tw-ring-inset', 'var(--tw-empty,/*!*/ /*!*/)'),
				A2($rtfeldman$elm_css$Css$property, '--tw-ring-offset-width', '0px'),
				A2($rtfeldman$elm_css$Css$property, '--tw-ring-offset-color', '#fff'),
				A2($rtfeldman$elm_css$Css$property, '--tw-ring-color', 'rgba(59, 130, 246, 0.5)'),
				A2($rtfeldman$elm_css$Css$property, '--tw-ring-offset-shadow', '0 0 #0000'),
				A2($rtfeldman$elm_css$Css$property, '--tw-ring-shadow', '0 0 #0000')
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(0, 0, 0, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 255, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 250, 251, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(243, 244, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(229, 231, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 213, 219, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 163, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(107, 114, 128, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(75, 85, 99, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 65, 81, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(31, 41, 55, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(17, 24, 39, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 242, 242, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 226, 226, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 202, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 165, 165, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(248, 113, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 68, 68, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(220, 38, 38, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(185, 28, 28, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(153, 27, 27, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(127, 29, 29, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 251, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 243, 199, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 230, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 211, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 191, 36, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 158, 11, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(217, 119, 6, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(180, 83, 9, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(146, 64, 14, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(120, 53, 15, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 253, 245, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 250, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 243, 208, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(110, 231, 183, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(52, 211, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(16, 185, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(5, 150, 105, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(4, 120, 87, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 95, 70, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 78, 59, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 246, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 234, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(191, 219, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(147, 197, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(96, 165, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(59, 130, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(37, 99, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(29, 78, 216, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 64, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 58, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(238, 242, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 231, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(199, 210, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(165, 180, 252, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(129, 140, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(99, 102, 241, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(79, 70, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(67, 56, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 48, 163, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(49, 46, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 243, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(237, 233, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(221, 214, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(196, 181, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 139, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(139, 92, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(124, 58, 237, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(109, 40, 217, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(91, 33, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(76, 29, 149, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 242, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 231, 243, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 207, 232, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 168, 212, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(244, 114, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 72, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 39, 119, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(190, 24, 93, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(157, 23, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(131, 24, 67, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(182, 167, 161, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 141, 135, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 195, 188, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(183, 168, 162, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(117, 116, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:border-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(0, 0, 0, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 255, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 250, 251, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(243, 244, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(229, 231, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 213, 219, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 163, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(107, 114, 128, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(75, 85, 99, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 65, 81, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(31, 41, 55, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(17, 24, 39, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 242, 242, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 226, 226, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 202, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 165, 165, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(248, 113, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 68, 68, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(220, 38, 38, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(185, 28, 28, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(153, 27, 27, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(127, 29, 29, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 251, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 243, 199, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 230, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 211, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 191, 36, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 158, 11, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(217, 119, 6, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(180, 83, 9, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(146, 64, 14, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(120, 53, 15, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 253, 245, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 250, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 243, 208, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(110, 231, 183, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(52, 211, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(16, 185, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(5, 150, 105, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(4, 120, 87, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 95, 70, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 78, 59, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 246, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 234, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(191, 219, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(147, 197, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(96, 165, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(59, 130, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(37, 99, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(29, 78, 216, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 64, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 58, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(238, 242, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 231, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(199, 210, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(165, 180, 252, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(129, 140, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(99, 102, 241, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(79, 70, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(67, 56, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 48, 163, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(49, 46, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 243, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(237, 233, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(221, 214, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(196, 181, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 139, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(139, 92, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(124, 58, 237, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(109, 40, 217, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(91, 33, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(76, 29, 149, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 242, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 231, 243, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 207, 232, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 168, 212, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(244, 114, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 72, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 39, 119, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(190, 24, 93, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(157, 23, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(131, 24, 67, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(182, 167, 161, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 141, 135, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 195, 188, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(183, 168, 162, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(117, 116, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:bg-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(0, 0, 0, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 255, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 250, 251, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(243, 244, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(229, 231, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 213, 219, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 163, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(107, 114, 128, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(75, 85, 99, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 65, 81, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(31, 41, 55, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(17, 24, 39, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 242, 242, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 226, 226, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 202, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 165, 165, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(248, 113, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 68, 68, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(220, 38, 38, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(185, 28, 28, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(153, 27, 27, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(127, 29, 29, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 251, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 243, 199, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 230, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 211, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 191, 36, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 158, 11, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(217, 119, 6, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(180, 83, 9, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(146, 64, 14, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(120, 53, 15, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 253, 245, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 250, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 243, 208, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(110, 231, 183, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(52, 211, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(16, 185, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(5, 150, 105, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(4, 120, 87, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 95, 70, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 78, 59, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 246, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 234, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(191, 219, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(147, 197, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(96, 165, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(59, 130, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(37, 99, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(29, 78, 216, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 64, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 58, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(238, 242, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 231, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(199, 210, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(165, 180, 252, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(129, 140, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(99, 102, 241, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(79, 70, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(67, 56, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 48, 163, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(49, 46, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 243, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(237, 233, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(221, 214, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(196, 181, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 139, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(139, 92, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(124, 58, 237, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(109, 40, 217, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(91, 33, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(76, 29, 149, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 242, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 231, 243, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 207, 232, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 168, 212, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(244, 114, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 72, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 39, 119, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(190, 24, 93, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(157, 23, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(131, 24, 67, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(182, 167, 161, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 141, 135, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 195, 188, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(183, 168, 162, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(117, 116, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:text-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'underline')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:line-through',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'line-through')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:no-underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'none')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:shadow-sm',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 2px 0 rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:shadow',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:shadow-md',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:shadow-lg',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:shadow-xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:shadow-2xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 25px 50px -12px rgba(0, 0, 0, 0.25)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:shadow-inner',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 640px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .sm\\:group-hover\\:shadow-none',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 0 #0000'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(0, 0, 0, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 255, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 250, 251, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(243, 244, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(229, 231, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 213, 219, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 163, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(107, 114, 128, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(75, 85, 99, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 65, 81, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(31, 41, 55, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(17, 24, 39, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 242, 242, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 226, 226, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 202, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 165, 165, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(248, 113, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 68, 68, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(220, 38, 38, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(185, 28, 28, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(153, 27, 27, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(127, 29, 29, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 251, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 243, 199, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 230, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 211, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 191, 36, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 158, 11, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(217, 119, 6, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(180, 83, 9, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(146, 64, 14, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(120, 53, 15, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 253, 245, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 250, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 243, 208, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(110, 231, 183, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(52, 211, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(16, 185, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(5, 150, 105, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(4, 120, 87, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 95, 70, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 78, 59, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 246, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 234, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(191, 219, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(147, 197, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(96, 165, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(59, 130, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(37, 99, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(29, 78, 216, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 64, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 58, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(238, 242, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 231, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(199, 210, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(165, 180, 252, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(129, 140, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(99, 102, 241, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(79, 70, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(67, 56, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 48, 163, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(49, 46, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 243, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(237, 233, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(221, 214, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(196, 181, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 139, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(139, 92, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(124, 58, 237, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(109, 40, 217, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(91, 33, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(76, 29, 149, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 242, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 231, 243, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 207, 232, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 168, 212, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(244, 114, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 72, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 39, 119, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(190, 24, 93, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(157, 23, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(131, 24, 67, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(182, 167, 161, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 141, 135, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 195, 188, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(183, 168, 162, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(117, 116, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:border-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(0, 0, 0, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 255, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 250, 251, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(243, 244, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(229, 231, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 213, 219, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 163, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(107, 114, 128, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(75, 85, 99, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 65, 81, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(31, 41, 55, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(17, 24, 39, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 242, 242, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 226, 226, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 202, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 165, 165, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(248, 113, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 68, 68, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(220, 38, 38, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(185, 28, 28, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(153, 27, 27, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(127, 29, 29, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 251, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 243, 199, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 230, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 211, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 191, 36, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 158, 11, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(217, 119, 6, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(180, 83, 9, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(146, 64, 14, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(120, 53, 15, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 253, 245, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 250, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 243, 208, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(110, 231, 183, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(52, 211, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(16, 185, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(5, 150, 105, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(4, 120, 87, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 95, 70, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 78, 59, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 246, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 234, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(191, 219, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(147, 197, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(96, 165, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(59, 130, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(37, 99, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(29, 78, 216, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 64, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 58, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(238, 242, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 231, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(199, 210, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(165, 180, 252, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(129, 140, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(99, 102, 241, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(79, 70, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(67, 56, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 48, 163, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(49, 46, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 243, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(237, 233, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(221, 214, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(196, 181, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 139, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(139, 92, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(124, 58, 237, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(109, 40, 217, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(91, 33, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(76, 29, 149, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 242, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 231, 243, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 207, 232, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 168, 212, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(244, 114, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 72, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 39, 119, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(190, 24, 93, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(157, 23, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(131, 24, 67, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(182, 167, 161, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 141, 135, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 195, 188, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(183, 168, 162, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(117, 116, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:bg-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(0, 0, 0, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 255, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 250, 251, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(243, 244, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(229, 231, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 213, 219, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 163, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(107, 114, 128, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(75, 85, 99, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 65, 81, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(31, 41, 55, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(17, 24, 39, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 242, 242, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 226, 226, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 202, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 165, 165, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(248, 113, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 68, 68, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(220, 38, 38, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(185, 28, 28, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(153, 27, 27, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(127, 29, 29, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 251, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 243, 199, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 230, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 211, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 191, 36, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 158, 11, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(217, 119, 6, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(180, 83, 9, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(146, 64, 14, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(120, 53, 15, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 253, 245, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 250, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 243, 208, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(110, 231, 183, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(52, 211, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(16, 185, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(5, 150, 105, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(4, 120, 87, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 95, 70, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 78, 59, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 246, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 234, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(191, 219, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(147, 197, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(96, 165, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(59, 130, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(37, 99, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(29, 78, 216, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 64, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 58, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(238, 242, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 231, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(199, 210, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(165, 180, 252, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(129, 140, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(99, 102, 241, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(79, 70, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(67, 56, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 48, 163, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(49, 46, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 243, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(237, 233, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(221, 214, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(196, 181, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 139, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(139, 92, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(124, 58, 237, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(109, 40, 217, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(91, 33, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(76, 29, 149, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 242, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 231, 243, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 207, 232, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 168, 212, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(244, 114, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 72, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 39, 119, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(190, 24, 93, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(157, 23, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(131, 24, 67, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(182, 167, 161, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 141, 135, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 195, 188, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(183, 168, 162, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(117, 116, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:text-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'underline')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:line-through',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'line-through')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:no-underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'none')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:shadow-sm',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 2px 0 rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:shadow',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:shadow-md',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:shadow-lg',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:shadow-xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:shadow-2xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 25px 50px -12px rgba(0, 0, 0, 0.25)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:shadow-inner',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 768px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .md\\:group-hover\\:shadow-none',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 0 #0000'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(0, 0, 0, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 255, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 250, 251, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(243, 244, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(229, 231, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 213, 219, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 163, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(107, 114, 128, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(75, 85, 99, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 65, 81, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(31, 41, 55, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(17, 24, 39, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 242, 242, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 226, 226, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 202, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 165, 165, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(248, 113, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 68, 68, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(220, 38, 38, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(185, 28, 28, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(153, 27, 27, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(127, 29, 29, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 251, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 243, 199, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 230, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 211, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 191, 36, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 158, 11, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(217, 119, 6, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(180, 83, 9, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(146, 64, 14, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(120, 53, 15, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 253, 245, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 250, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 243, 208, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(110, 231, 183, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(52, 211, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(16, 185, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(5, 150, 105, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(4, 120, 87, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 95, 70, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 78, 59, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 246, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 234, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(191, 219, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(147, 197, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(96, 165, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(59, 130, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(37, 99, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(29, 78, 216, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 64, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 58, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(238, 242, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 231, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(199, 210, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(165, 180, 252, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(129, 140, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(99, 102, 241, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(79, 70, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(67, 56, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 48, 163, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(49, 46, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 243, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(237, 233, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(221, 214, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(196, 181, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 139, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(139, 92, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(124, 58, 237, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(109, 40, 217, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(91, 33, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(76, 29, 149, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 242, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 231, 243, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 207, 232, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 168, 212, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(244, 114, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 72, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 39, 119, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(190, 24, 93, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(157, 23, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(131, 24, 67, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(182, 167, 161, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 141, 135, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 195, 188, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(183, 168, 162, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(117, 116, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:border-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(0, 0, 0, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 255, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 250, 251, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(243, 244, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(229, 231, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 213, 219, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 163, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(107, 114, 128, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(75, 85, 99, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 65, 81, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(31, 41, 55, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(17, 24, 39, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 242, 242, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 226, 226, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 202, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 165, 165, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(248, 113, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 68, 68, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(220, 38, 38, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(185, 28, 28, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(153, 27, 27, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(127, 29, 29, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 251, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 243, 199, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 230, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 211, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 191, 36, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 158, 11, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(217, 119, 6, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(180, 83, 9, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(146, 64, 14, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(120, 53, 15, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 253, 245, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 250, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 243, 208, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(110, 231, 183, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(52, 211, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(16, 185, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(5, 150, 105, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(4, 120, 87, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 95, 70, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 78, 59, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 246, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 234, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(191, 219, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(147, 197, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(96, 165, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(59, 130, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(37, 99, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(29, 78, 216, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 64, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 58, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(238, 242, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 231, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(199, 210, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(165, 180, 252, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(129, 140, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(99, 102, 241, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(79, 70, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(67, 56, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 48, 163, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(49, 46, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 243, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(237, 233, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(221, 214, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(196, 181, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 139, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(139, 92, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(124, 58, 237, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(109, 40, 217, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(91, 33, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(76, 29, 149, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 242, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 231, 243, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 207, 232, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 168, 212, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(244, 114, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 72, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 39, 119, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(190, 24, 93, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(157, 23, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(131, 24, 67, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(182, 167, 161, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 141, 135, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 195, 188, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(183, 168, 162, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(117, 116, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:bg-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(0, 0, 0, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 255, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 250, 251, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(243, 244, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(229, 231, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 213, 219, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 163, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(107, 114, 128, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(75, 85, 99, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 65, 81, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(31, 41, 55, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(17, 24, 39, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 242, 242, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 226, 226, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 202, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 165, 165, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(248, 113, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 68, 68, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(220, 38, 38, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(185, 28, 28, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(153, 27, 27, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(127, 29, 29, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 251, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 243, 199, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 230, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 211, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 191, 36, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 158, 11, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(217, 119, 6, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(180, 83, 9, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(146, 64, 14, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(120, 53, 15, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 253, 245, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 250, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 243, 208, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(110, 231, 183, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(52, 211, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(16, 185, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(5, 150, 105, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(4, 120, 87, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 95, 70, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 78, 59, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 246, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 234, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(191, 219, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(147, 197, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(96, 165, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(59, 130, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(37, 99, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(29, 78, 216, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 64, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 58, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(238, 242, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 231, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(199, 210, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(165, 180, 252, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(129, 140, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(99, 102, 241, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(79, 70, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(67, 56, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 48, 163, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(49, 46, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 243, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(237, 233, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(221, 214, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(196, 181, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 139, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(139, 92, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(124, 58, 237, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(109, 40, 217, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(91, 33, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(76, 29, 149, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 242, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 231, 243, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 207, 232, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 168, 212, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(244, 114, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 72, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 39, 119, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(190, 24, 93, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(157, 23, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(131, 24, 67, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(182, 167, 161, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 141, 135, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 195, 188, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(183, 168, 162, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(117, 116, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:text-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'underline')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:line-through',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'line-through')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:no-underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'none')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:shadow-sm',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 2px 0 rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:shadow',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:shadow-md',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:shadow-lg',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:shadow-xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:shadow-2xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 25px 50px -12px rgba(0, 0, 0, 0.25)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:shadow-inner',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1024px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .lg\\:group-hover\\:shadow-none',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 0 #0000'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(0, 0, 0, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 255, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 250, 251, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(243, 244, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(229, 231, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 213, 219, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 163, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(107, 114, 128, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(75, 85, 99, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 65, 81, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(31, 41, 55, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(17, 24, 39, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 242, 242, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 226, 226, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 202, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 165, 165, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(248, 113, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 68, 68, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(220, 38, 38, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(185, 28, 28, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(153, 27, 27, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(127, 29, 29, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 251, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 243, 199, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 230, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 211, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 191, 36, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 158, 11, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(217, 119, 6, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(180, 83, 9, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(146, 64, 14, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(120, 53, 15, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 253, 245, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 250, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 243, 208, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(110, 231, 183, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(52, 211, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(16, 185, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(5, 150, 105, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(4, 120, 87, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 95, 70, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 78, 59, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 246, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 234, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(191, 219, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(147, 197, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(96, 165, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(59, 130, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(37, 99, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(29, 78, 216, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 64, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 58, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(238, 242, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 231, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(199, 210, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(165, 180, 252, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(129, 140, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(99, 102, 241, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(79, 70, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(67, 56, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 48, 163, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(49, 46, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 243, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(237, 233, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(221, 214, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(196, 181, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 139, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(139, 92, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(124, 58, 237, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(109, 40, 217, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(91, 33, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(76, 29, 149, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 242, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 231, 243, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 207, 232, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 168, 212, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(244, 114, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 72, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 39, 119, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(190, 24, 93, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(157, 23, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(131, 24, 67, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(182, 167, 161, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 141, 135, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 195, 188, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(183, 168, 162, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(117, 116, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:border-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(0, 0, 0, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 255, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 250, 251, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(243, 244, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(229, 231, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 213, 219, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 163, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(107, 114, 128, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(75, 85, 99, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 65, 81, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(31, 41, 55, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(17, 24, 39, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 242, 242, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 226, 226, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 202, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 165, 165, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(248, 113, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 68, 68, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(220, 38, 38, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(185, 28, 28, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(153, 27, 27, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(127, 29, 29, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 251, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 243, 199, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 230, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 211, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 191, 36, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 158, 11, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(217, 119, 6, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(180, 83, 9, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(146, 64, 14, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(120, 53, 15, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 253, 245, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 250, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 243, 208, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(110, 231, 183, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(52, 211, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(16, 185, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(5, 150, 105, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(4, 120, 87, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 95, 70, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 78, 59, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 246, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 234, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(191, 219, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(147, 197, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(96, 165, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(59, 130, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(37, 99, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(29, 78, 216, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 64, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 58, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(238, 242, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 231, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(199, 210, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(165, 180, 252, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(129, 140, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(99, 102, 241, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(79, 70, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(67, 56, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 48, 163, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(49, 46, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 243, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(237, 233, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(221, 214, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(196, 181, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 139, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(139, 92, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(124, 58, 237, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(109, 40, 217, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(91, 33, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(76, 29, 149, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 242, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 231, 243, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 207, 232, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 168, 212, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(244, 114, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 72, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 39, 119, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(190, 24, 93, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(157, 23, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(131, 24, 67, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(182, 167, 161, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 141, 135, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 195, 188, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(183, 168, 162, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(117, 116, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:bg-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(0, 0, 0, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 255, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 250, 251, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(243, 244, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(229, 231, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 213, 219, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 163, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(107, 114, 128, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(75, 85, 99, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 65, 81, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(31, 41, 55, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(17, 24, 39, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 242, 242, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 226, 226, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 202, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 165, 165, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(248, 113, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 68, 68, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(220, 38, 38, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(185, 28, 28, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(153, 27, 27, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(127, 29, 29, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 251, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 243, 199, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 230, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 211, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 191, 36, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 158, 11, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(217, 119, 6, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(180, 83, 9, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(146, 64, 14, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(120, 53, 15, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 253, 245, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 250, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 243, 208, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(110, 231, 183, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(52, 211, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(16, 185, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(5, 150, 105, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(4, 120, 87, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 95, 70, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 78, 59, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 246, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 234, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(191, 219, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(147, 197, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(96, 165, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(59, 130, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(37, 99, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(29, 78, 216, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 64, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 58, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(238, 242, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 231, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(199, 210, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(165, 180, 252, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(129, 140, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(99, 102, 241, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(79, 70, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(67, 56, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 48, 163, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(49, 46, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 243, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(237, 233, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(221, 214, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(196, 181, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 139, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(139, 92, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(124, 58, 237, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(109, 40, 217, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(91, 33, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(76, 29, 149, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 242, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 231, 243, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 207, 232, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 168, 212, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(244, 114, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 72, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 39, 119, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(190, 24, 93, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(157, 23, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(131, 24, 67, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(182, 167, 161, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 141, 135, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 195, 188, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(183, 168, 162, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(117, 116, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:text-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'underline')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:line-through',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'line-through')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:no-underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'none')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:shadow-sm',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 2px 0 rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:shadow',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:shadow-md',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:shadow-lg',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:shadow-xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:shadow-2xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 25px 50px -12px rgba(0, 0, 0, 0.25)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:shadow-inner',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1280px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .xl\\:group-hover\\:shadow-none',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 0 #0000'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(0, 0, 0, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 255, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 250, 251, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(243, 244, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(229, 231, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 213, 219, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 163, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(107, 114, 128, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(75, 85, 99, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 65, 81, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(31, 41, 55, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(17, 24, 39, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 242, 242, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 226, 226, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 202, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 165, 165, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(248, 113, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 68, 68, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(220, 38, 38, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(185, 28, 28, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(153, 27, 27, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(127, 29, 29, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(255, 251, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(254, 243, 199, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 230, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 211, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 191, 36, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 158, 11, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(217, 119, 6, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(180, 83, 9, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(146, 64, 14, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(120, 53, 15, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 253, 245, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(209, 250, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 243, 208, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(110, 231, 183, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(52, 211, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(16, 185, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(5, 150, 105, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(4, 120, 87, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 95, 70, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(6, 78, 59, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(239, 246, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 234, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(191, 219, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(147, 197, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(96, 165, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(59, 130, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(37, 99, 235, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(29, 78, 216, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 64, 175, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(30, 58, 138, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(238, 242, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 231, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(199, 210, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(165, 180, 252, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(129, 140, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(99, 102, 241, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(79, 70, 229, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(67, 56, 202, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(55, 48, 163, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(49, 46, 129, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(245, 243, 255, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(237, 233, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(221, 214, 254, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(196, 181, 253, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(167, 139, 250, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(139, 92, 246, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(124, 58, 237, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(109, 40, 217, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(91, 33, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(76, 29, 149, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(253, 242, 248, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(252, 231, 243, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(251, 207, 232, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(249, 168, 212, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(244, 114, 182, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(236, 72, 153, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(219, 39, 119, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(190, 24, 93, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(157, 23, 77, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(131, 24, 67, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(182, 167, 161, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(156, 141, 135, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(224, 195, 188, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(183, 168, 162, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(117, 116, 113, var(--tw-border-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:border-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(0, 0, 0, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 255, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 250, 251, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(243, 244, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(229, 231, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 213, 219, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 163, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(107, 114, 128, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(75, 85, 99, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 65, 81, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(31, 41, 55, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(17, 24, 39, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 242, 242, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 226, 226, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 202, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 165, 165, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(248, 113, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 68, 68, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(220, 38, 38, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(185, 28, 28, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(153, 27, 27, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(127, 29, 29, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(255, 251, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(254, 243, 199, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 230, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 211, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 191, 36, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 158, 11, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(217, 119, 6, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(180, 83, 9, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(146, 64, 14, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(120, 53, 15, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 253, 245, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(209, 250, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 243, 208, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(110, 231, 183, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(52, 211, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(16, 185, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(5, 150, 105, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(4, 120, 87, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 95, 70, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(6, 78, 59, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(239, 246, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 234, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(191, 219, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(147, 197, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(96, 165, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(59, 130, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(37, 99, 235, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(29, 78, 216, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 64, 175, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(30, 58, 138, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(238, 242, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 231, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(199, 210, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(165, 180, 252, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(129, 140, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(99, 102, 241, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(79, 70, 229, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(67, 56, 202, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(55, 48, 163, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(49, 46, 129, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(245, 243, 255, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(237, 233, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(221, 214, 254, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(196, 181, 253, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(167, 139, 250, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(139, 92, 246, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(124, 58, 237, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(109, 40, 217, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(91, 33, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(76, 29, 149, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(253, 242, 248, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(252, 231, 243, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(251, 207, 232, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(249, 168, 212, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(244, 114, 182, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(236, 72, 153, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(219, 39, 119, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(190, 24, 93, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(157, 23, 77, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(131, 24, 67, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(182, 167, 161, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(156, 141, 135, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(224, 195, 188, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(183, 168, 162, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'background-color', 'rgba(117, 116, 113, var(--tw-bg-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:bg-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-bg-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-transparent',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'transparent')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-current',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'color', 'currentColor')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-black',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(0, 0, 0, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-white',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 255, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 250, 251, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(243, 244, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(229, 231, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 213, 219, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 163, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(107, 114, 128, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(75, 85, 99, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 65, 81, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(31, 41, 55, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-gray-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(17, 24, 39, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 242, 242, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 226, 226, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 202, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 165, 165, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(248, 113, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 68, 68, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(220, 38, 38, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(185, 28, 28, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(153, 27, 27, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-red-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(127, 29, 29, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(255, 251, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(254, 243, 199, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 230, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 211, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 191, 36, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 158, 11, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(217, 119, 6, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(180, 83, 9, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(146, 64, 14, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-yellow-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(120, 53, 15, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 253, 245, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(209, 250, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 243, 208, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(110, 231, 183, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(52, 211, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(16, 185, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(5, 150, 105, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(4, 120, 87, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 95, 70, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-green-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(6, 78, 59, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(239, 246, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 234, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(191, 219, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(147, 197, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(96, 165, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(59, 130, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(37, 99, 235, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(29, 78, 216, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 64, 175, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-blue-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(30, 58, 138, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(238, 242, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 231, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(199, 210, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(165, 180, 252, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(129, 140, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(99, 102, 241, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(79, 70, 229, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(67, 56, 202, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(55, 48, 163, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-indigo-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(49, 46, 129, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(245, 243, 255, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(237, 233, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(221, 214, 254, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(196, 181, 253, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(167, 139, 250, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(139, 92, 246, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(124, 58, 237, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(109, 40, 217, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(91, 33, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-purple-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(76, 29, 149, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(253, 242, 248, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(252, 231, 243, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-200',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(251, 207, 232, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-300',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(249, 168, 212, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-400',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(244, 114, 182, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-500',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(236, 72, 153, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-600',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(219, 39, 119, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-700',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(190, 24, 93, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-800',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(157, 23, 77, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-pink-900',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(131, 24, 67, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-brown-border',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(182, 167, 161, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-brown-link',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 141, 135, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-brown-link-active',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 195, 188, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-brown',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(183, 168, 162, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-brown-text',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
						A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(117, 116, 113, var(--tw-text-opacity))')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:text-opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'underline')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:line-through',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'line-through')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:no-underline',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'text-decoration', 'none')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-0',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-5',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.05')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-10',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-20',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.2')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-25',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.25')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-30',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.3')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-40',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.4')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-50',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.5')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-60',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.6')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-70',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.7')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-75',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.75')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-80',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.8')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-90',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.9')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-95',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '0.95')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:opacity-100',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, 'opacity', '1')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:shadow-sm',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 2px 0 rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:shadow',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:shadow-md',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:shadow-lg',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:shadow-xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:shadow-2xl',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 25px 50px -12px rgba(0, 0, 0, 0.25)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:shadow-inner',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			])),
		A2(
		$rtfeldman$elm_css$Css$Global$mediaQuery,
		_List_fromArray(
			['(min-width: 1536px)']),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Css$Global$selector,
				'.group:hover .\\32xl\\:group-hover\\:shadow-none',
				_List_fromArray(
					[
						A2($rtfeldman$elm_css$Css$property, '--tw-shadow', '0 0 #0000'),
						A2($rtfeldman$elm_css$Css$property, 'box-shadow', 'var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)')
					]))
			]))
	]);
var $author$project$Tailwind$Utilities$justify_start = A2($rtfeldman$elm_css$Css$property, 'justify-content', 'flex-start');
var $rtfeldman$elm_css$VirtualDom$Styled$KeyedNode = F3(
	function (a, b, c) {
		return {$: 'KeyedNode', a: a, b: b, c: c};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$KeyedNodeNS = F4(
	function (a, b, c, d) {
		return {$: 'KeyedNodeNS', a: a, b: b, c: c, d: d};
	});
var $rtfeldman$elm_css$VirtualDom$Styled$NodeNS = F4(
	function (a, b, c, d) {
		return {$: 'NodeNS', a: a, b: b, c: c, d: d};
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $rtfeldman$elm_css$VirtualDom$Styled$mapAttribute = F2(
	function (transform, _v0) {
		var prop = _v0.a;
		var isCssStyle = _v0.b;
		var cssTemplate = _v0.c;
		return A3(
			$rtfeldman$elm_css$VirtualDom$Styled$Attribute,
			A2($elm$virtual_dom$VirtualDom$mapAttribute, transform, prop),
			isCssStyle,
			cssTemplate);
	});
var $rtfeldman$elm_css$VirtualDom$Styled$map = F2(
	function (transform, vdomNode) {
		switch (vdomNode.$) {
			case 'Node':
				var elemType = vdomNode.a;
				var properties = vdomNode.b;
				var children = vdomNode.c;
				return A3(
					$rtfeldman$elm_css$VirtualDom$Styled$Node,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$map(transform),
						children));
			case 'NodeNS':
				var ns = vdomNode.a;
				var elemType = vdomNode.b;
				var properties = vdomNode.c;
				var children = vdomNode.d;
				return A4(
					$rtfeldman$elm_css$VirtualDom$Styled$NodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$map(transform),
						children));
			case 'KeyedNode':
				var elemType = vdomNode.a;
				var properties = vdomNode.b;
				var children = vdomNode.c;
				return A3(
					$rtfeldman$elm_css$VirtualDom$Styled$KeyedNode,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						function (_v1) {
							var key = _v1.a;
							var child = _v1.b;
							return _Utils_Tuple2(
								key,
								A2($rtfeldman$elm_css$VirtualDom$Styled$map, transform, child));
						},
						children));
			case 'KeyedNodeNS':
				var ns = vdomNode.a;
				var elemType = vdomNode.b;
				var properties = vdomNode.c;
				var children = vdomNode.d;
				return A4(
					$rtfeldman$elm_css$VirtualDom$Styled$KeyedNodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$mapAttribute(transform),
						properties),
					A2(
						$elm$core$List$map,
						function (_v2) {
							var key = _v2.a;
							var child = _v2.b;
							return _Utils_Tuple2(
								key,
								A2($rtfeldman$elm_css$VirtualDom$Styled$map, transform, child));
						},
						children));
			default:
				var vdom = vdomNode.a;
				return $rtfeldman$elm_css$VirtualDom$Styled$Unstyled(
					A2($elm$virtual_dom$VirtualDom$map, transform, vdom));
		}
	});
var $rtfeldman$elm_css$Html$Styled$map = $rtfeldman$elm_css$VirtualDom$Styled$map;
var $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles = F2(
	function (_v0, styles) {
		var isCssStyles = _v0.b;
		var cssTemplate = _v0.c;
		if (isCssStyles) {
			var _v1 = A2($elm$core$Dict$get, cssTemplate, styles);
			if (_v1.$ === 'Just') {
				return styles;
			} else {
				return A3(
					$elm$core$Dict$insert,
					cssTemplate,
					$rtfeldman$elm_css$Hash$fromString(cssTemplate),
					styles);
			}
		} else {
			return styles;
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute = F2(
	function (styles, _v0) {
		var val = _v0.a;
		var isCssStyles = _v0.b;
		var cssTemplate = _v0.c;
		if (isCssStyles) {
			var _v1 = A2($elm$core$Dict$get, cssTemplate, styles);
			if (_v1.$ === 'Just') {
				var classname = _v1.a;
				return A2(
					$elm$virtual_dom$VirtualDom$property,
					'className',
					$elm$json$Json$Encode$string(classname));
			} else {
				return A2(
					$elm$virtual_dom$VirtualDom$property,
					'className',
					$elm$json$Json$Encode$string('_unstyled'));
			}
		} else {
			return val;
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttributeNS = F2(
	function (styles, _v0) {
		var val = _v0.a;
		var isCssStyles = _v0.b;
		var cssTemplate = _v0.c;
		if (isCssStyles) {
			var _v1 = A2($elm$core$Dict$get, cssTemplate, styles);
			if (_v1.$ === 'Just') {
				var classname = _v1.a;
				return A2($elm$virtual_dom$VirtualDom$attribute, 'class', classname);
			} else {
				return A2($elm$virtual_dom$VirtualDom$attribute, 'class', '_unstyled');
			}
		} else {
			return val;
		}
	});
var $elm$virtual_dom$VirtualDom$keyedNodeNS = F2(
	function (namespace, tag) {
		return A2(
			_VirtualDom_keyedNodeNS,
			namespace,
			_VirtualDom_noScript(tag));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml = F2(
	function (_v6, _v7) {
		var key = _v6.a;
		var html = _v6.b;
		var pairs = _v7.a;
		var styles = _v7.b;
		switch (html.$) {
			case 'Unstyled':
				var vdom = html.a;
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					styles);
			case 'Node':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v9 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v9.a;
				var finalStyles = _v9.b;
				var vdom = A3(
					$elm$virtual_dom$VirtualDom$node,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute(finalStyles),
						properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
			case 'NodeNS':
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v10 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v10.a;
				var finalStyles = _v10.b;
				var vdom = A4(
					$elm$virtual_dom$VirtualDom$nodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute(finalStyles),
						properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
			case 'KeyedNode':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v11 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v11.a;
				var finalStyles = _v11.b;
				var vdom = A3(
					$elm$virtual_dom$VirtualDom$keyedNode,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute(finalStyles),
						properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
			default:
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v12 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v12.a;
				var finalStyles = _v12.b;
				var vdom = A4(
					$elm$virtual_dom$VirtualDom$keyedNodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute(finalStyles),
						properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2(key, vdom),
						pairs),
					finalStyles);
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml = F2(
	function (html, _v0) {
		var nodes = _v0.a;
		var styles = _v0.b;
		switch (html.$) {
			case 'Unstyled':
				var vdomNode = html.a;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					styles);
			case 'Node':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v2 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v2.a;
				var finalStyles = _v2.b;
				var vdomNode = A3(
					$elm$virtual_dom$VirtualDom$node,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute(finalStyles),
						properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
			case 'NodeNS':
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v3 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v3.a;
				var finalStyles = _v3.b;
				var vdomNode = A4(
					$elm$virtual_dom$VirtualDom$nodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttributeNS(finalStyles),
						properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
			case 'KeyedNode':
				var elemType = html.a;
				var properties = html.b;
				var children = html.c;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v4 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v4.a;
				var finalStyles = _v4.b;
				var vdomNode = A3(
					$elm$virtual_dom$VirtualDom$keyedNode,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute(finalStyles),
						properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
			default:
				var ns = html.a;
				var elemType = html.b;
				var properties = html.c;
				var children = html.d;
				var combinedStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, styles, properties);
				var _v5 = A3(
					$elm$core$List$foldl,
					$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
					_Utils_Tuple2(_List_Nil, combinedStyles),
					children);
				var childNodes = _v5.a;
				var finalStyles = _v5.b;
				var vdomNode = A4(
					$elm$virtual_dom$VirtualDom$keyedNodeNS,
					ns,
					elemType,
					A2(
						$elm$core$List$map,
						$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttributeNS(finalStyles),
						properties),
					$elm$core$List$reverse(childNodes));
				return _Utils_Tuple2(
					A2($elm$core$List$cons, vdomNode, nodes),
					finalStyles);
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$styleToDeclaration = F3(
	function (template, classname, declaration) {
		return declaration + ('\n' + A3($elm$core$String$replace, $rtfeldman$elm_css$VirtualDom$Styled$classnameStandin, classname, template));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$toDeclaration = function (dict) {
	return A3($elm$core$Dict$foldl, $rtfeldman$elm_css$VirtualDom$Styled$styleToDeclaration, '', dict);
};
var $rtfeldman$elm_css$VirtualDom$Styled$toStyleNode = F2(
	function (maybeNonce, styles) {
		return A3(
			$elm$virtual_dom$VirtualDom$node,
			'span',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'style', 'display: none;'),
					A2($elm$virtual_dom$VirtualDom$attribute, 'class', 'elm-css-style-wrapper')
				]),
			_List_fromArray(
				[
					A3(
					$elm$virtual_dom$VirtualDom$node,
					'style',
					function () {
						if (maybeNonce.$ === 'Just') {
							var nonce = maybeNonce.a.a;
							return _List_fromArray(
								[
									A2($elm$virtual_dom$VirtualDom$attribute, 'nonce', nonce)
								]);
						} else {
							return _List_Nil;
						}
					}(),
					$elm$core$List$singleton(
						$elm$virtual_dom$VirtualDom$text(
							$rtfeldman$elm_css$VirtualDom$Styled$toDeclaration(styles))))
				]));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyle = F4(
	function (maybeNonce, elemType, properties, children) {
		var initialStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, $elm$core$Dict$empty, properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			children);
		var childNodes = _v0.a;
		var styles = _v0.b;
		var styleNode = A2($rtfeldman$elm_css$VirtualDom$Styled$toStyleNode, maybeNonce, styles);
		var unstyledProperties = A2(
			$elm$core$List$map,
			$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute(styles),
			properties);
		return A3(
			$elm$virtual_dom$VirtualDom$node,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				styleNode,
				$elm$core$List$reverse(childNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$containsKey = F2(
	function (key, pairs) {
		containsKey:
		while (true) {
			if (!pairs.b) {
				return false;
			} else {
				var _v1 = pairs.a;
				var str = _v1.a;
				var rest = pairs.b;
				if (_Utils_eq(key, str)) {
					return true;
				} else {
					var $temp$key = key,
						$temp$pairs = rest;
					key = $temp$key;
					pairs = $temp$pairs;
					continue containsKey;
				}
			}
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey = F2(
	function (_default, pairs) {
		getUnusedKey:
		while (true) {
			if (!pairs.b) {
				return _default;
			} else {
				var _v1 = pairs.a;
				var firstKey = _v1.a;
				var rest = pairs.b;
				var newKey = '_' + firstKey;
				if (A2($rtfeldman$elm_css$VirtualDom$Styled$containsKey, newKey, rest)) {
					var $temp$default = newKey,
						$temp$pairs = rest;
					_default = $temp$default;
					pairs = $temp$pairs;
					continue getUnusedKey;
				} else {
					return newKey;
				}
			}
		}
	});
var $rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode = F3(
	function (maybeNonce, allStyles, keyedChildNodes) {
		var styleNodeKey = A2($rtfeldman$elm_css$VirtualDom$Styled$getUnusedKey, '_', keyedChildNodes);
		var finalNode = A2($rtfeldman$elm_css$VirtualDom$Styled$toStyleNode, maybeNonce, allStyles);
		return _Utils_Tuple2(styleNodeKey, finalNode);
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed = F4(
	function (maybeNonce, elemType, properties, keyedChildren) {
		var initialStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, $elm$core$Dict$empty, properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			keyedChildren);
		var keyedChildNodes = _v0.a;
		var styles = _v0.b;
		var keyedStyleNode = A3($rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, maybeNonce, styles, keyedChildNodes);
		var unstyledProperties = A2(
			$elm$core$List$map,
			$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttribute(styles),
			properties);
		return A3(
			$elm$virtual_dom$VirtualDom$keyedNode,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				keyedStyleNode,
				$elm$core$List$reverse(keyedChildNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS = F5(
	function (maybeNonce, ns, elemType, properties, keyedChildren) {
		var initialStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, $elm$core$Dict$empty, properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateKeyedStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			keyedChildren);
		var keyedChildNodes = _v0.a;
		var styles = _v0.b;
		var keyedStyleNode = A3($rtfeldman$elm_css$VirtualDom$Styled$toKeyedStyleNode, maybeNonce, styles, keyedChildNodes);
		var unstyledProperties = A2(
			$elm$core$List$map,
			$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttributeNS(styles),
			properties);
		return A4(
			$elm$virtual_dom$VirtualDom$keyedNodeNS,
			ns,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				keyedStyleNode,
				$elm$core$List$reverse(keyedChildNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$unstyleNS = F5(
	function (maybeNonce, ns, elemType, properties, children) {
		var initialStyles = A3($elm$core$List$foldl, $rtfeldman$elm_css$VirtualDom$Styled$accumulateStyles, $elm$core$Dict$empty, properties);
		var _v0 = A3(
			$elm$core$List$foldl,
			$rtfeldman$elm_css$VirtualDom$Styled$accumulateStyledHtml,
			_Utils_Tuple2(_List_Nil, initialStyles),
			children);
		var childNodes = _v0.a;
		var styles = _v0.b;
		var styleNode = A2($rtfeldman$elm_css$VirtualDom$Styled$toStyleNode, maybeNonce, styles);
		var unstyledProperties = A2(
			$elm$core$List$map,
			$rtfeldman$elm_css$VirtualDom$Styled$extractUnstyledAttributeNS(styles),
			properties);
		return A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			ns,
			elemType,
			unstyledProperties,
			A2(
				$elm$core$List$cons,
				styleNode,
				$elm$core$List$reverse(childNodes)));
	});
var $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled = function (vdom) {
	switch (vdom.$) {
		case 'Unstyled':
			var plainNode = vdom.a;
			return plainNode;
		case 'Node':
			var elemType = vdom.a;
			var properties = vdom.b;
			var children = vdom.c;
			return A4($rtfeldman$elm_css$VirtualDom$Styled$unstyle, $elm$core$Maybe$Nothing, elemType, properties, children);
		case 'NodeNS':
			var ns = vdom.a;
			var elemType = vdom.b;
			var properties = vdom.c;
			var children = vdom.d;
			return A5($rtfeldman$elm_css$VirtualDom$Styled$unstyleNS, $elm$core$Maybe$Nothing, ns, elemType, properties, children);
		case 'KeyedNode':
			var elemType = vdom.a;
			var properties = vdom.b;
			var children = vdom.c;
			return A4($rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyed, $elm$core$Maybe$Nothing, elemType, properties, children);
		default:
			var ns = vdom.a;
			var elemType = vdom.b;
			var properties = vdom.c;
			var children = vdom.d;
			return A5($rtfeldman$elm_css$VirtualDom$Styled$unstyleKeyedNS, $elm$core$Maybe$Nothing, ns, elemType, properties, children);
	}
};
var $rtfeldman$elm_css$Html$Styled$toUnstyled = $rtfeldman$elm_css$VirtualDom$Styled$toUnstyled;
var $author$project$Tailwind$Utilities$duration_200 = A2($rtfeldman$elm_css$Css$property, 'transition-duration', '200ms');
var $author$project$Tailwind$Utilities$scale_125 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-scale-x', '1.25'),
			A2($rtfeldman$elm_css$Css$property, '--tw-scale-y', '1.25')
		]));
var $author$project$Tailwind$Utilities$transform = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-translate-x', '0'),
			A2($rtfeldman$elm_css$Css$property, '--tw-translate-y', '0'),
			A2($rtfeldman$elm_css$Css$property, '--tw-rotate', '0'),
			A2($rtfeldman$elm_css$Css$property, '--tw-skew-x', '0'),
			A2($rtfeldman$elm_css$Css$property, '--tw-skew-y', '0'),
			A2($rtfeldman$elm_css$Css$property, '--tw-scale-x', '1'),
			A2($rtfeldman$elm_css$Css$property, '--tw-scale-y', '1'),
			A2($rtfeldman$elm_css$Css$property, 'transform', 'translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))')
		]));
var $author$project$Tailwind$Utilities$transition = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'transition-property', 'background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter'),
			A2($rtfeldman$elm_css$Css$property, 'transition-timing-function', 'cubic-bezier(0.4, 0, 0.2, 1)'),
			A2($rtfeldman$elm_css$Css$property, 'transition-duration', '150ms')
		]));
var $author$project$View$Footer$contactPoint = F3(
	function (url, imagePath, altName) {
		return A2(
			$rtfeldman$elm_css$Html$Styled$a,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$Tailwind$Utilities$inline_block,
							$author$project$Tailwind$Utilities$w_14,
							$author$project$Tailwind$Utilities$h_14,
							$author$project$Tailwind$Utilities$p_2,
							$author$project$Tailwind$Utilities$transform,
							$author$project$Tailwind$Utilities$transition,
							$author$project$Tailwind$Utilities$duration_200,
							$author$project$Tailwind$Utilities$ease_in_out,
							$rtfeldman$elm_css$Css$hover(
							_List_fromArray(
								[$author$project$Tailwind$Utilities$scale_125]))
						])),
					$rtfeldman$elm_css$Html$Styled$Attributes$href(url),
					$rtfeldman$elm_css$Html$Styled$Attributes$target('_blank'),
					$rtfeldman$elm_css$Html$Styled$Attributes$rel('noopener noreferrer')
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$img,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$src(imagePath),
							$rtfeldman$elm_css$Html$Styled$Attributes$alt(altName)
						]),
					_List_Nil)
				]));
	});
var $rtfeldman$elm_css$Html$Styled$footer = $rtfeldman$elm_css$Html$Styled$node('footer');
var $author$project$View$Footer$view = A2(
	$rtfeldman$elm_css$Html$Styled$footer,
	_List_fromArray(
		[
			$rtfeldman$elm_css$Html$Styled$Attributes$css(
			_List_fromArray(
				[$author$project$Tailwind$Utilities$w_full, $author$project$Tailwind$Utilities$text_center, $author$project$Tailwind$Utilities$p_4]))
		]),
	_List_fromArray(
		[
			A2(
			$rtfeldman$elm_css$Html$Styled$div,
			_List_Nil,
			_List_fromArray(
				[
					A3($author$project$View$Footer$contactPoint, 'https://facebook.com/aspargesgaarden', '/ressurser/fb.png', 'Facebook'),
					A3($author$project$View$Footer$contactPoint, 'https://instagram.com/aspargesgaarden', '/ressurser/insta.png', 'Instagram')
				])),
			A3(
			$rtfeldman$elm_css$Html$Styled$node,
			'script',
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$src('https://umami.kradalby.no/umami.js'),
					A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'data-website-id', '168bd9f6-fec6-40dc-95b5-b0e4082c7a98'),
					A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'async', ''),
					A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'defer', '')
				]),
			_List_Nil)
		]));
var $author$project$Tailwind$Utilities$block = A2($rtfeldman$elm_css$Css$property, 'display', 'block');
var $author$project$Tailwind$Utilities$border_brown_border = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-border-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'border-color', 'rgba(182, 167, 161, var(--tw-border-opacity))')
		]));
var $rtfeldman$elm_css$Svg$Styled$Internal$css = function (styles) {
	var cssTemplate = $rtfeldman$elm_css$VirtualDom$Styled$getCssTemplate(styles);
	var classAttribute = A2($elm$virtual_dom$VirtualDom$attribute, '', '');
	return A3($rtfeldman$elm_css$VirtualDom$Styled$Attribute, classAttribute, true, cssTemplate);
};
var $rtfeldman$elm_css$Svg$Styled$Attributes$css = $rtfeldman$elm_css$Svg$Styled$Internal$css;
var $author$project$Tailwind$Utilities$cursor_pointer = A2($rtfeldman$elm_css$Css$property, 'cursor', 'pointer');
var $rtfeldman$elm_css$Svg$Styled$Attributes$d = $rtfeldman$elm_css$VirtualDom$Styled$attribute('d');
var $author$project$Tailwind$Utilities$fill_current = A2($rtfeldman$elm_css$Css$property, 'fill', 'currentColor');
var $author$project$Tailwind$Utilities$flex_1 = A2($rtfeldman$elm_css$Css$property, 'flex', '1 1 0%');
var $rtfeldman$elm_css$Html$Styled$Attributes$for = $rtfeldman$elm_css$Html$Styled$Attributes$stringProperty('htmlFor');
var $author$project$Tailwind$Utilities$h_28 = A2($rtfeldman$elm_css$Css$property, 'height', '7rem');
var $rtfeldman$elm_css$Html$Styled$header = $rtfeldman$elm_css$Html$Styled$node('header');
var $author$project$Tailwind$Utilities$px_6 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-left', '1.5rem'),
			A2($rtfeldman$elm_css$Css$property, 'padding-right', '1.5rem')
		]));
var $author$project$Tailwind$Utilities$text_brown_link = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(156, 141, 135, var(--tw-text-opacity))')
		]));
var $author$project$Tailwind$Utilities$text_brown_link_active = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, '--tw-text-opacity', '1'),
			A2($rtfeldman$elm_css$Css$property, 'color', 'rgba(224, 195, 188, var(--tw-text-opacity))')
		]));
var $author$project$Tailwind$Utilities$text_xl = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'font-size', '1.25rem'),
			A2($rtfeldman$elm_css$Css$property, 'line-height', '1.75rem')
		]));
var $author$project$View$Header$headerLink = F3(
	function (currentPagePath, linkTo, name) {
		var isCurrentPath = _Utils_eq(
			$elm$core$List$head(
				$dillonkearns$elm_pages$Path$toSegments(currentPagePath)),
			$elm$core$Maybe$Just(linkTo));
		return A2(
			$rtfeldman$elm_css$Html$Styled$li,
			_List_fromArray(
				[
					$rtfeldman$elm_css$Html$Styled$Attributes$css(
					_List_fromArray(
						[
							$author$project$Tailwind$Breakpoints$lg(
							_List_fromArray(
								[$author$project$Tailwind$Utilities$p_4, $author$project$Tailwind$Utilities$px_6])),
							$author$project$Tailwind$Utilities$py_3,
							$author$project$Tailwind$Utilities$px_0,
							$author$project$Tailwind$Utilities$block
						]))
				]),
			_List_fromArray(
				[
					A2(
					$rtfeldman$elm_css$Html$Styled$a,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$href('/' + linkTo),
							A2($rtfeldman$elm_css$Html$Styled$Attributes$attribute, 'elm-pages:prefetch', 'true'),
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_Utils_ap(
								_List_fromArray(
									[
										$author$project$Tailwind$Utilities$font_medium,
										$author$project$Tailwind$Utilities$text_xl,
										$rtfeldman$elm_css$Css$fontFamilies(
										_List_fromArray(
											['rift-soft', 'sans-serif'])),
										$rtfeldman$elm_css$Css$hover(
										_List_fromArray(
											[$author$project$Tailwind$Utilities$text_brown_link_active]))
									]),
								isCurrentPath ? _List_fromArray(
									[
										$rtfeldman$elm_css$Css$hover(
										_List_fromArray(
											[$author$project$Tailwind$Utilities$text_brown_link]))
									]) : _List_Nil))
						]),
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$text(name)
						]))
				]));
	});
var $rtfeldman$elm_css$Svg$Styled$Attributes$height = $rtfeldman$elm_css$VirtualDom$Styled$attribute('height');
var $author$project$Tailwind$Utilities$hidden = A2($rtfeldman$elm_css$Css$property, 'display', 'none');
var $author$project$Tailwind$Utilities$items_center = A2($rtfeldman$elm_css$Css$property, 'align-items', 'center');
var $author$project$Tailwind$Utilities$justify_between = A2($rtfeldman$elm_css$Css$property, 'justify-content', 'space-between');
var $rtfeldman$elm_css$Html$Styled$label = $rtfeldman$elm_css$Html$Styled$node('label');
var $rtfeldman$elm_css$Html$Styled$nav = $rtfeldman$elm_css$Html$Styled$node('nav');
var $rtfeldman$elm_css$VirtualDom$Styled$nodeNS = $rtfeldman$elm_css$VirtualDom$Styled$NodeNS;
var $rtfeldman$elm_css$Svg$Styled$node = $rtfeldman$elm_css$VirtualDom$Styled$nodeNS('http://www.w3.org/2000/svg');
var $rtfeldman$elm_css$Svg$Styled$path = $rtfeldman$elm_css$Svg$Styled$node('path');
var $author$project$Tailwind$Utilities$px_16 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-left', '4rem'),
			A2($rtfeldman$elm_css$Css$property, 'padding-right', '4rem')
		]));
var $author$project$Tailwind$Utilities$px_4 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-left', '1rem'),
			A2($rtfeldman$elm_css$Css$property, 'padding-right', '1rem')
		]));
var $author$project$Tailwind$Utilities$py_0 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-top', '0px'),
			A2($rtfeldman$elm_css$Css$property, 'padding-bottom', '0px')
		]));
var $author$project$Tailwind$Utilities$py_2 = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'padding-top', '0.5rem'),
			A2($rtfeldman$elm_css$Css$property, 'padding-bottom', '0.5rem')
		]));
var $rtfeldman$elm_css$Svg$Styled$svg = $rtfeldman$elm_css$Svg$Styled$node('svg');
var $author$project$Tailwind$Utilities$text_base = $rtfeldman$elm_css$Css$batch(
	_List_fromArray(
		[
			A2($rtfeldman$elm_css$Css$property, 'font-size', '1rem'),
			A2($rtfeldman$elm_css$Css$property, 'line-height', '1.5rem')
		]));
var $rtfeldman$elm_css$Svg$Styled$title = $rtfeldman$elm_css$Svg$Styled$node('title');
var $rtfeldman$elm_css$Svg$Styled$Attributes$viewBox = $rtfeldman$elm_css$VirtualDom$Styled$attribute('viewBox');
var $author$project$Tailwind$Utilities$w_auto = A2($rtfeldman$elm_css$Css$property, 'width', 'auto');
var $rtfeldman$elm_css$Svg$Styled$Attributes$width = $rtfeldman$elm_css$VirtualDom$Styled$attribute('width');
var $author$project$View$Header$view = function (currentPath) {
	return A2(
		$rtfeldman$elm_css$Html$Styled$header,
		_List_fromArray(
			[
				$rtfeldman$elm_css$Html$Styled$Attributes$css(
				_List_fromArray(
					[
						$author$project$Tailwind$Utilities$flex,
						$author$project$Tailwind$Utilities$flex_wrap,
						$author$project$Tailwind$Utilities$items_center,
						$author$project$Tailwind$Breakpoints$lg(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$px_16, $author$project$Tailwind$Utilities$py_2])),
						$author$project$Tailwind$Utilities$px_4,
						$author$project$Tailwind$Utilities$py_0,
						$author$project$Tailwind$Utilities$border_b,
						$author$project$Tailwind$Utilities$border_brown_border
					]))
			]),
		_List_fromArray(
			[
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[$author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$flex_1, $author$project$Tailwind$Utilities$justify_between, $author$project$Tailwind$Utilities$items_center]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$a,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Html$Styled$Attributes$href('/')
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$img,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[$author$project$Tailwind$Utilities$h_28])),
										$rtfeldman$elm_css$Html$Styled$Attributes$src('/ressurser/logo.svg'),
										$rtfeldman$elm_css$Html$Styled$Attributes$alt('Aspargesgården')
									]),
								_List_Nil)
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$label,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$for('menu-toggle'),
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$Tailwind$Breakpoints$lg(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$hidden])),
								$author$project$Tailwind$Utilities$cursor_pointer,
								$author$project$Tailwind$Utilities$block
							]))
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Svg$Styled$svg,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Svg$Styled$Attributes$css(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$fill_current, $author$project$Tailwind$Utilities$text_brown_link])),
								$rtfeldman$elm_css$Svg$Styled$Attributes$width('20'),
								$rtfeldman$elm_css$Svg$Styled$Attributes$height('20'),
								$rtfeldman$elm_css$Svg$Styled$Attributes$viewBox('0 0 20 20')
							]),
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Svg$Styled$title,
								_List_Nil,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$text('menu')
									])),
								A2(
								$rtfeldman$elm_css$Svg$Styled$path,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Svg$Styled$Attributes$d('M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z')
									]),
								_List_Nil)
							]))
					])),
				A2(
				$rtfeldman$elm_css$Html$Styled$input,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$Tailwind$Breakpoints$lg(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$items_center, $author$project$Tailwind$Utilities$hidden, $author$project$Tailwind$Utilities$w_auto])),
								$author$project$Tailwind$Utilities$hidden,
								$author$project$Tailwind$Utilities$w_full
							])),
						$rtfeldman$elm_css$Html$Styled$Attributes$type_('checkbox'),
						$rtfeldman$elm_css$Html$Styled$Attributes$id('menu-toggle')
					]),
				_List_Nil),
				A2(
				$rtfeldman$elm_css$Html$Styled$div,
				_List_fromArray(
					[
						$rtfeldman$elm_css$Html$Styled$Attributes$css(
						_List_fromArray(
							[
								$author$project$Tailwind$Breakpoints$lg(
								_List_fromArray(
									[$author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$items_center, $author$project$Tailwind$Utilities$w_auto])),
								$author$project$Tailwind$Utilities$hidden,
								$author$project$Tailwind$Utilities$w_full
							])),
						$rtfeldman$elm_css$Html$Styled$Attributes$id('menu')
					]),
				_List_fromArray(
					[
						A2(
						$rtfeldman$elm_css$Html$Styled$nav,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$rtfeldman$elm_css$Html$Styled$ul,
								_List_fromArray(
									[
										$rtfeldman$elm_css$Html$Styled$Attributes$css(
										_List_fromArray(
											[
												$author$project$Tailwind$Breakpoints$lg(
												_List_fromArray(
													[$author$project$Tailwind$Utilities$flex])),
												$author$project$Tailwind$Utilities$items_center,
												$author$project$Tailwind$Utilities$justify_between,
												$author$project$Tailwind$Utilities$text_base,
												$author$project$Tailwind$Utilities$text_brown_link
											])),
										$rtfeldman$elm_css$Html$Styled$Attributes$id('menu')
									]),
								_List_fromArray(
									[
										A3($author$project$View$Header$headerLink, currentPath, 'facilities', 'Muligheter'),
										A3($author$project$View$Header$headerLink, currentPath, 'gallery', 'Galleri'),
										A3($author$project$View$Header$headerLink, currentPath, 'about', 'Om gården'),
										A3($author$project$View$Header$headerLink, currentPath, 'contact', 'Kontakt')
									]))
							]))
					]))
			]));
};
var $author$project$Shared$view = F5(
	function (tableOfContents, page, model, toMsg, pageView) {
		return {
			body: $rtfeldman$elm_css$Html$Styled$toUnstyled(
				A2(
					$rtfeldman$elm_css$Html$Styled$div,
					_List_fromArray(
						[
							$rtfeldman$elm_css$Html$Styled$Attributes$css(
							_List_fromArray(
								[$author$project$Tailwind$Utilities$antialiased, $author$project$Tailwind$Utilities$flex, $author$project$Tailwind$Utilities$flex_col, $author$project$Tailwind$Utilities$h_screen, $author$project$Tailwind$Utilities$justify_start]))
						]),
					A2(
						$elm$core$List$append,
						_List_fromArray(
							[
								$rtfeldman$elm_css$Css$Global$global($author$project$Tailwind$Utilities$globalStyles)
							]),
						A2(
							$elm$core$List$cons,
							A2(
								$rtfeldman$elm_css$Html$Styled$map,
								toMsg,
								$author$project$View$Header$view(page.path)),
							_Utils_ap(
								pageView.body,
								_List_fromArray(
									[
										A2($rtfeldman$elm_css$Html$Styled$map, toMsg, $author$project$View$Footer$view)
									])))))),
			title: pageView.title
		};
	});
var $author$project$Shared$template = {
	data: $author$project$Shared$data,
	init: $author$project$Shared$init,
	onPageChange: $elm$core$Maybe$Just($author$project$Shared$OnPageChange),
	subscriptions: $author$project$Shared$subscriptions,
	update: $author$project$Shared$update,
	view: $author$project$Shared$view
};
var $author$project$TemplateModulesBeta$init = F6(
	function (currentGlobalModel, userFlags, sharedData, pageData, navigationKey, maybePagePath) {
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			A3($author$project$Shared$template.init, navigationKey, userFlags, maybePagePath),
			A2(
				$elm$core$Maybe$map,
				function (m) {
					return _Utils_Tuple2(m, $elm$core$Platform$Cmd$none);
				},
				currentGlobalModel));
		var sharedModel = _v0.a;
		var globalCmd = _v0.b;
		var _v1 = function () {
			var _v2 = _Utils_Tuple2(
				A3(
					$elm$core$Maybe$map2,
					$elm$core$Tuple$pair,
					A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.metadata;
						},
						maybePagePath),
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.path;
						},
						maybePagePath)),
				pageData);
			_v2$5:
			while (true) {
				if (_v2.a.$ === 'Just') {
					switch (_v2.a.a.a.$) {
						case 'About':
							if (_v2.b.$ === 'DataAbout') {
								var _v3 = _v2.a.a;
								var _v4 = _v3.a;
								var justPath = _v3.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelAbout,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgAbout),
									A3(
										$author$project$Page$About$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$5;
							}
						case 'Contact':
							if (_v2.b.$ === 'DataContact') {
								var _v5 = _v2.a.a;
								var _v6 = _v5.a;
								var justPath = _v5.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelContact,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgContact),
									A3(
										$author$project$Page$Contact$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$5;
							}
						case 'Facilities':
							if (_v2.b.$ === 'DataFacilities') {
								var _v7 = _v2.a.a;
								var _v8 = _v7.a;
								var justPath = _v7.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelFacilities,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgFacilities),
									A3(
										$author$project$Page$Facilities$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$5;
							}
						case 'Gallery':
							if (_v2.b.$ === 'DataGallery') {
								var _v9 = _v2.a.a;
								var _v10 = _v9.a;
								var justPath = _v9.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelGallery,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgGallery),
									A3(
										$author$project$Page$Gallery$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$5;
							}
						default:
							if (_v2.b.$ === 'DataIndex') {
								var _v11 = _v2.a.a;
								var _v12 = _v11.a;
								var justPath = _v11.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelIndex,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgIndex),
									A3(
										$author$project$Page$Index$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$5;
							}
					}
				} else {
					break _v2$5;
				}
			}
			return _Utils_Tuple2($author$project$TemplateModulesBeta$NotFound, $elm$core$Platform$Cmd$none);
		}();
		var templateModel = _v1.a;
		var templateCmd = _v1.b;
		return _Utils_Tuple2(
			{current: maybePagePath, global: sharedModel, page: templateModel},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						templateCmd,
						A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, globalCmd)
					])));
	});
var $author$project$TemplateModulesBeta$routePatterns3 = _List_fromArray(
	[
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('about')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('contact')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('facilities')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('gallery')
			])
	},
		{ending: $elm$core$Maybe$Nothing, segments: _List_Nil}
	]);
var $author$project$Route$routeToPath = function (route) {
	switch (route.$) {
		case 'About':
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['about'])
					]));
		case 'Contact':
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['contact'])
					]));
		case 'Facilities':
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['facilities'])
					]));
		case 'Gallery':
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['gallery'])
					]));
		default:
			return $elm$core$List$concat(_List_Nil);
	}
};
var $author$project$TemplateModulesBeta$templateSubscriptions = F3(
	function (route, path, model) {
		var _v0 = _Utils_Tuple2(model.page, route);
		_v0$5:
		while (true) {
			if (_v0.b.$ === 'Just') {
				switch (_v0.b.a.$) {
					case 'About':
						if (_v0.a.$ === 'ModelAbout') {
							var templateModel = _v0.a.a;
							var _v1 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgAbout,
								A5(
									$author$project$Page$About$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$5;
						}
					case 'Contact':
						if (_v0.a.$ === 'ModelContact') {
							var templateModel = _v0.a.a;
							var _v2 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgContact,
								A5(
									$author$project$Page$Contact$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$5;
						}
					case 'Facilities':
						if (_v0.a.$ === 'ModelFacilities') {
							var templateModel = _v0.a.a;
							var _v3 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgFacilities,
								A5(
									$author$project$Page$Facilities$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$5;
						}
					case 'Gallery':
						if (_v0.a.$ === 'ModelGallery') {
							var templateModel = _v0.a.a;
							var _v4 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgGallery,
								A5(
									$author$project$Page$Gallery$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$5;
						}
					default:
						if (_v0.a.$ === 'ModelIndex') {
							var templateModel = _v0.a.a;
							var _v5 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgIndex,
								A5(
									$author$project$Page$Index$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$5;
						}
				}
			} else {
				break _v0$5;
			}
		}
		return $elm$core$Platform$Sub$none;
	});
var $author$project$TemplateModulesBeta$toJsPort = _Platform_outgoingPort('toJsPort', $elm$core$Basics$identity);
var $dillonkearns$elm_pages$Pages$Flags$PreRenderFlags = {$: 'PreRenderFlags'};
var $elm$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					return $elm$core$Maybe$Just(
						A3(func, a, b, c));
				}
			}
		}
	});
var $author$project$TemplateModulesBeta$mapBoth = F3(
	function (fnA, fnB, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		var c = _v0.c;
		return _Utils_Tuple3(
			fnA(a),
			fnB(b),
			c);
	});
var $author$project$TemplateModulesBeta$update = F5(
	function (sharedData, pageData, navigationKey, msg, model) {
		switch (msg.$) {
			case 'MsgGlobal':
				var msg_ = msg.a;
				var _v1 = A2($author$project$Shared$template.update, msg_, model.global);
				var sharedModel = _v1.a;
				var globalCmd = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: sharedModel}),
					A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, globalCmd));
			case 'OnPageChange':
				var record = msg.a;
				return function (_v2) {
					var updatedModel = _v2.a;
					var cmd = _v2.b;
					var _v3 = $author$project$Shared$template.onPageChange;
					if (_v3.$ === 'Nothing') {
						return _Utils_Tuple2(updatedModel, cmd);
					} else {
						var thingy = _v3.a;
						var _v4 = A2(
							$author$project$Shared$template.update,
							thingy(
								{fragment: record.fragment, path: record.path, query: record.query}),
							model.global);
						var updatedGlobalModel = _v4.a;
						var globalCmd = _v4.b;
						return _Utils_Tuple2(
							_Utils_update(
								updatedModel,
								{global: updatedGlobalModel}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										cmd,
										A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, globalCmd)
									])));
					}
				}(
					A6(
						$author$project$TemplateModulesBeta$init,
						$elm$core$Maybe$Just(model.global),
						$dillonkearns$elm_pages$Pages$Flags$PreRenderFlags,
						sharedData,
						pageData,
						navigationKey,
						$elm$core$Maybe$Just(
							{
								metadata: record.metadata,
								pageUrl: $elm$core$Maybe$Just(
									{
										fragment: record.fragment,
										host: record.host,
										path: record.path,
										port_: record.port_,
										protocol: record.protocol,
										query: A2($elm$core$Maybe$map, $dillonkearns$elm_pages$QueryParams$fromString, record.query)
									}),
								path: {fragment: record.fragment, path: record.path, query: record.query}
							})));
			case 'MsgAbout':
				var msg_ = msg.a;
				var _v5 = function () {
					var _v7 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v7.a.$ === 'ModelAbout') && (_v7.b.$ === 'DataAbout')) && (_v7.c.$ === 'Just')) && (_v7.c.a.a.$ === 'About')) {
						var pageModel = _v7.a.a;
						var thisPageData = _v7.b.a;
						var _v8 = _v7.c.a;
						var _v9 = _v8.a;
						var pageUrl = _v8.b;
						var justPage = _v8.c;
						return function (_v10) {
							var a = _v10.a;
							var b = _v10.b;
							var c = _v10.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelAbout,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgAbout),
								A6(
									$author$project$Page$About$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v5.a;
				var pageCmd = _v5.b;
				var _v6 = _v5.c;
				var newGlobalModel = _v6.a;
				var newGlobalCmd = _v6.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgContact':
				var msg_ = msg.a;
				var _v12 = function () {
					var _v14 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v14.a.$ === 'ModelContact') && (_v14.b.$ === 'DataContact')) && (_v14.c.$ === 'Just')) && (_v14.c.a.a.$ === 'Contact')) {
						var pageModel = _v14.a.a;
						var thisPageData = _v14.b.a;
						var _v15 = _v14.c.a;
						var _v16 = _v15.a;
						var pageUrl = _v15.b;
						var justPage = _v15.c;
						return function (_v17) {
							var a = _v17.a;
							var b = _v17.b;
							var c = _v17.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelContact,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgContact),
								A6(
									$author$project$Page$Contact$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v12.a;
				var pageCmd = _v12.b;
				var _v13 = _v12.c;
				var newGlobalModel = _v13.a;
				var newGlobalCmd = _v13.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgFacilities':
				var msg_ = msg.a;
				var _v19 = function () {
					var _v21 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v21.a.$ === 'ModelFacilities') && (_v21.b.$ === 'DataFacilities')) && (_v21.c.$ === 'Just')) && (_v21.c.a.a.$ === 'Facilities')) {
						var pageModel = _v21.a.a;
						var thisPageData = _v21.b.a;
						var _v22 = _v21.c.a;
						var _v23 = _v22.a;
						var pageUrl = _v22.b;
						var justPage = _v22.c;
						return function (_v24) {
							var a = _v24.a;
							var b = _v24.b;
							var c = _v24.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelFacilities,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgFacilities),
								A6(
									$author$project$Page$Facilities$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v19.a;
				var pageCmd = _v19.b;
				var _v20 = _v19.c;
				var newGlobalModel = _v20.a;
				var newGlobalCmd = _v20.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgGallery':
				var msg_ = msg.a;
				var _v26 = function () {
					var _v28 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v28.a.$ === 'ModelGallery') && (_v28.b.$ === 'DataGallery')) && (_v28.c.$ === 'Just')) && (_v28.c.a.a.$ === 'Gallery')) {
						var pageModel = _v28.a.a;
						var thisPageData = _v28.b.a;
						var _v29 = _v28.c.a;
						var _v30 = _v29.a;
						var pageUrl = _v29.b;
						var justPage = _v29.c;
						return function (_v31) {
							var a = _v31.a;
							var b = _v31.b;
							var c = _v31.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelGallery,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgGallery),
								A6(
									$author$project$Page$Gallery$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v26.a;
				var pageCmd = _v26.b;
				var _v27 = _v26.c;
				var newGlobalModel = _v27.a;
				var newGlobalCmd = _v27.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			default:
				var msg_ = msg.a;
				var _v33 = function () {
					var _v35 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v35.a.$ === 'ModelIndex') && (_v35.b.$ === 'DataIndex')) && (_v35.c.$ === 'Just')) && (_v35.c.a.a.$ === 'Index')) {
						var pageModel = _v35.a.a;
						var thisPageData = _v35.b.a;
						var _v36 = _v35.c.a;
						var _v37 = _v36.a;
						var pageUrl = _v36.b;
						var justPage = _v36.c;
						return function (_v38) {
							var a = _v38.a;
							var b = _v38.b;
							var c = _v38.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelIndex,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgIndex),
								A6(
									$author$project$Page$Index$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v33.a;
				var pageCmd = _v33.b;
				var _v34 = _v33.c;
				var newGlobalModel = _v34.a;
				var newGlobalCmd = _v34.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
		}
	});
var $elm_community$list_extra$List$Extra$findMap = F2(
	function (f, list) {
		findMap:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var a = list.a;
				var tail = list.b;
				var _v1 = f(a);
				if (_v1.$ === 'Just') {
					var b = _v1.a;
					return $elm$core$Maybe$Just(b);
				} else {
					var $temp$f = f,
						$temp$list = tail;
					f = $temp$f;
					list = $temp$list;
					continue findMap;
				}
			}
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$Router$ensureLeadingSlash = function (path) {
	return A2($elm$core$String$startsWith, '/', path) ? path : ('/' + path);
};
var $dillonkearns$elm_pages$Pages$Internal$Router$stripTrailingSlash = function (path) {
	return (A2($elm$core$String$endsWith, '/', path) && ($elm$core$String$length(path) > 1)) ? A2($elm$core$String$dropRight, 1, path) : path;
};
var $dillonkearns$elm_pages$Pages$Internal$Router$normalizePath = function (path) {
	return $dillonkearns$elm_pages$Pages$Internal$Router$stripTrailingSlash(
		$dillonkearns$elm_pages$Pages$Internal$Router$ensureLeadingSlash(path));
};
var $dillonkearns$elm_pages$Pages$Internal$Router$toRegex = function (pattern) {
	return A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString(pattern));
};
var $dillonkearns$elm_pages$Pages$Internal$Router$submatches = F2(
	function (pattern, path) {
		return A2(
			$elm$core$List$concatMap,
			function ($) {
				return $.submatches;
			},
			A2(
				$elm$regex$Regex$find,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$regex$Regex$never,
					$elm$regex$Regex$fromString(pattern)),
				path));
	});
var $dillonkearns$elm_pages$Pages$Internal$Router$tryMatch = F2(
	function (_v0, path) {
		var pattern = _v0.pattern;
		var toRoute = _v0.toRoute;
		return toRoute(
			A2(
				$dillonkearns$elm_pages$Pages$Internal$Router$submatches,
				pattern,
				$dillonkearns$elm_pages$Pages$Internal$Router$normalizePath(path)));
	});
var $dillonkearns$elm_pages$Pages$Internal$Router$firstMatch = F2(
	function (matchers, path) {
		return A2(
			$elm_community$list_extra$List$Extra$findMap,
			function (matcher) {
				return A2(
					$elm$regex$Regex$contains,
					$dillonkearns$elm_pages$Pages$Internal$Router$toRegex(matcher.pattern),
					$dillonkearns$elm_pages$Pages$Internal$Router$normalizePath(path)) ? A2($dillonkearns$elm_pages$Pages$Internal$Router$tryMatch, matcher, path) : $elm$core$Maybe$Nothing;
			},
			matchers);
	});
var $author$project$Route$About = {$: 'About'};
var $author$project$Route$Contact = {$: 'Contact'};
var $author$project$Route$Facilities = {$: 'Facilities'};
var $author$project$Route$Gallery = {$: 'Gallery'};
var $author$project$Route$Index = {$: 'Index'};
var $author$project$Route$matchers = _List_fromArray(
	[
		{
		pattern: '^\\/about$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$About);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/contact$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Contact);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/facilities$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Facilities);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/gallery$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Gallery);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Index);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	}
	]);
var $author$project$Route$baseUrl = '/';
var $author$project$Route$withoutBaseUrl = function (path) {
	return A2($elm$core$String$startsWith, $author$project$Route$baseUrl, path) ? A2(
		$elm$core$String$dropLeft,
		$elm$core$String$length($author$project$Route$baseUrl),
		path) : path;
};
var $author$project$Route$urlToRoute = function (url) {
	return A2(
		$dillonkearns$elm_pages$Pages$Internal$Router$firstMatch,
		$author$project$Route$matchers,
		$author$project$Route$withoutBaseUrl(url.path));
};
var $author$project$View$map = F2(
	function (fn, doc) {
		return {
			body: A2(
				$elm$core$List$map,
				$rtfeldman$elm_css$Html$Styled$map(fn),
				doc.body),
			title: doc.title
		};
	});
var $author$project$TemplateModulesBeta$view = F4(
	function (page, maybePageUrl, globalData, pageData) {
		var _v0 = _Utils_Tuple2(page.route, pageData);
		_v0$5:
		while (true) {
			if (_v0.a.$ === 'Just') {
				switch (_v0.a.a.$) {
					case 'About':
						if (_v0.b.$ === 'DataAbout') {
							var _v1 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: _List_Nil,
								view: function (model) {
									var _v2 = model.page;
									if (_v2.$ === 'ModelAbout') {
										var subModel = _v2.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgAbout,
												A4(
													$author$project$Page$About$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$5;
						}
					case 'Contact':
						if (_v0.b.$ === 'DataContact') {
							var _v3 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: _List_Nil,
								view: function (model) {
									var _v4 = model.page;
									if (_v4.$ === 'ModelContact') {
										var subModel = _v4.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgContact,
												A4(
													$author$project$Page$Contact$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$5;
						}
					case 'Facilities':
						if (_v0.b.$ === 'DataFacilities') {
							var _v5 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: _List_Nil,
								view: function (model) {
									var _v6 = model.page;
									if (_v6.$ === 'ModelFacilities') {
										var subModel = _v6.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgFacilities,
												A4(
													$author$project$Page$Facilities$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$5;
						}
					case 'Gallery':
						if (_v0.b.$ === 'DataGallery') {
							var _v7 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: _List_Nil,
								view: function (model) {
									var _v8 = model.page;
									if (_v8.$ === 'ModelGallery') {
										var subModel = _v8.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgGallery,
												A4(
													$author$project$Page$Gallery$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$5;
						}
					default:
						if (_v0.b.$ === 'DataIndex') {
							var _v9 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: _List_Nil,
								view: function (model) {
									var _v10 = model.page;
									if (_v10.$ === 'ModelIndex') {
										var subModel = _v10.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgIndex,
												A4(
													$author$project$Page$Index$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$5;
						}
				}
			} else {
				break _v0$5;
			}
		}
		return {
			head: _List_Nil,
			view: function (_v11) {
				return {
					body: A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('This page could not be found.')
							])),
					title: 'Page not found'
				};
			}
		};
	});
var $author$project$TemplateModulesBeta$main = $dillonkearns$elm_pages$Pages$Internal$Platform$application(
	{
		apiRoutes: function (_v0) {
			return _List_Nil;
		},
		basePath: _List_Nil,
		data: $author$project$TemplateModulesBeta$dataForRoute,
		fromJsPort: $author$project$TemplateModulesBeta$fromJsPort($elm$core$Basics$identity),
		getStaticRoutes: $dillonkearns$elm_pages$DataSource$succeed(_List_Nil),
		handleRoute: $author$project$TemplateModulesBeta$handleRoute,
		init: $author$project$TemplateModulesBeta$init($elm$core$Maybe$Nothing),
		onPageChange: $author$project$TemplateModulesBeta$OnPageChange,
		pathPatterns: $author$project$TemplateModulesBeta$routePatterns3,
		routeToPath: function (route) {
			return A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $author$project$Route$routeToPath, route));
		},
		sharedData: $author$project$Shared$template.data,
		site: $elm$core$Maybe$Nothing,
		subscriptions: F3(
			function (route, path, model) {
				return $elm$core$Platform$Sub$batch(
					_List_fromArray(
						[
							A2(
							$elm$core$Platform$Sub$map,
							$author$project$TemplateModulesBeta$MsgGlobal,
							A2($author$project$Shared$template.subscriptions, path, model.global)),
							A3($author$project$TemplateModulesBeta$templateSubscriptions, route, path, model)
						]));
			}),
		toJsPort: $author$project$TemplateModulesBeta$toJsPort,
		update: $author$project$TemplateModulesBeta$update,
		urlToRoute: $author$project$Route$urlToRoute,
		view: $author$project$TemplateModulesBeta$view
	});
_Platform_export({'TemplateModulesBeta':{'init':$author$project$TemplateModulesBeta$main($elm$json$Json$Decode$value)({"versions":{"elm":"0.19.1"},"types":{"message":"Pages.Internal.Platform.Msg TemplateModulesBeta.Msg","aliases":{"Pages.ContentCache.ContentCache":{"args":[],"type":"Dict.Dict Pages.ContentCache.Path Pages.ContentCache.Entry"},"Pages.ContentCache.ContentJson":{"args":[],"type":"{ staticData : RequestsAndPending.RequestsAndPending, is404 : Basics.Bool, path : Maybe.Maybe String.String, notFoundReason : Maybe.Maybe Pages.Internal.NotFoundReason.Payload }"},"Page.About.Msg":{"args":[],"type":"Basics.Never"},"Page.Contact.Msg":{"args":[],"type":"Basics.Never"},"Page.Facilities.Msg":{"args":[],"type":"Basics.Never"},"Page.Index.Msg":{"args":[],"type":"Basics.Never"},"Pages.ContentCache.Path":{"args":[],"type":"List.List String.String"},"Pages.Internal.NotFoundReason.Payload":{"args":[],"type":"{ path : Path.Path, reason : Pages.Internal.NotFoundReason.NotFoundReason }"},"RequestsAndPending.RequestsAndPending":{"args":[],"type":"Dict.Dict String.String (Maybe.Maybe String.String)"},"Url.Url":{"args":[],"type":"{ protocol : Url.Protocol, host : String.String, port_ : Maybe.Maybe Basics.Int, path : String.String, query : Maybe.Maybe String.String, fragment : Maybe.Maybe String.String }"},"Pages.Internal.NotFoundReason.ModuleContext":{"args":[],"type":"{ moduleName : List.List String.String, routePattern : Pages.Internal.RoutePattern.RoutePattern, matchedRouteParams : Pages.Internal.NotFoundReason.Record }"},"Pages.Internal.NotFoundReason.Record":{"args":[],"type":"List.List ( String.String, String.String )"},"Pages.Internal.RoutePattern.RoutePattern":{"args":[],"type":"{ segments : List.List Pages.Internal.RoutePattern.Segment, ending : Maybe.Maybe Pages.Internal.RoutePattern.Ending }"}},"unions":{"Pages.Internal.Platform.Msg":{"args":["userMsg"],"tags":{"LinkClicked":["Browser.UrlRequest"],"UrlChanged":["Url.Url"],"UserMsg":["userMsg"],"UpdateCache":["Result.Result Http.Error ( Url.Url, Pages.ContentCache.ContentJson, Pages.ContentCache.ContentCache )"],"UpdateCacheAndUrl":["Url.Url","Result.Result Http.Error ( Url.Url, Pages.ContentCache.ContentJson, Pages.ContentCache.ContentCache )"],"PageScrollComplete":[],"HotReloadComplete":["Pages.ContentCache.ContentJson"],"NoOp":[]}},"TemplateModulesBeta.Msg":{"args":[],"tags":{"MsgGlobal":["Shared.Msg"],"OnPageChange":["{ protocol : Url.Protocol, host : String.String, port_ : Maybe.Maybe Basics.Int, path : Path.Path, query : Maybe.Maybe String.String, fragment : Maybe.Maybe String.String, metadata : Maybe.Maybe Route.Route }"],"MsgAbout":["Page.About.Msg"],"MsgContact":["Page.Contact.Msg"],"MsgFacilities":["Page.Facilities.Msg"],"MsgGallery":["Page.Gallery.Msg"],"MsgIndex":["Page.Index.Msg"]}},"Basics.Bool":{"args":[],"tags":{"True":[],"False":[]}},"Dict.Dict":{"args":["k","v"],"tags":{"RBNode_elm_builtin":["Dict.NColor","k","v","Dict.Dict k v","Dict.Dict k v"],"RBEmpty_elm_builtin":[]}},"Pages.ContentCache.Entry":{"args":[],"tags":{"Parsed":["Pages.ContentCache.ContentJson"]}},"Http.Error":{"args":[],"tags":{"BadUrl":["String.String"],"Timeout":[],"NetworkError":[],"BadStatus":["Basics.Int"],"BadBody":["String.String"]}},"Basics.Int":{"args":[],"tags":{"Int":[]}},"List.List":{"args":["a"],"tags":{}},"Maybe.Maybe":{"args":["a"],"tags":{"Just":["a"],"Nothing":[]}},"Page.Gallery.Msg":{"args":[],"tags":{"OnKeyPress":["Maybe.Maybe Page.Gallery.Direction"],"ToggleSlideShow":["Basics.Int"],"PreviousSlide":[],"NextSlide":[]}},"Shared.Msg":{"args":[],"tags":{"OnPageChange":["{ path : Path.Path, query : Maybe.Maybe String.String, fragment : Maybe.Maybe String.String }"],"IncrementFromChild":[]}},"Basics.Never":{"args":[],"tags":{"JustOneMore":["Basics.Never"]}},"Pages.Internal.NotFoundReason.NotFoundReason":{"args":[],"tags":{"NoMatchingRoute":[],"NotPrerendered":["Pages.Internal.NotFoundReason.ModuleContext","List.List Pages.Internal.NotFoundReason.Record"],"NotPrerenderedOrHandledByFallback":["Pages.Internal.NotFoundReason.ModuleContext","List.List Pages.Internal.NotFoundReason.Record"],"UnhandledServerRoute":["Pages.Internal.NotFoundReason.ModuleContext"]}},"Path.Path":{"args":[],"tags":{"Path":["String.String"]}},"Url.Protocol":{"args":[],"tags":{"Http":[],"Https":[]}},"Result.Result":{"args":["error","value"],"tags":{"Ok":["value"],"Err":["error"]}},"Route.Route":{"args":[],"tags":{"About":[],"Contact":[],"Facilities":[],"Gallery":[],"Index":[]}},"String.String":{"args":[],"tags":{"String":[]}},"Browser.UrlRequest":{"args":[],"tags":{"Internal":["Url.Url"],"External":["String.String"]}},"Page.Gallery.Direction":{"args":[],"tags":{"Left":[],"Right":[]}},"Pages.Internal.RoutePattern.Ending":{"args":[],"tags":{"Optional":["String.String"],"RequiredSplat":[],"OptionalSplat":[]}},"Dict.NColor":{"args":[],"tags":{"Red":[],"Black":[]}},"Pages.Internal.RoutePattern.Segment":{"args":[],"tags":{"StaticSegment":["String.String"],"DynamicSegment":["String.String"]}}}}})}});}(this));